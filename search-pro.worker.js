const{entries:V}=Object,{fromEntries:et}=Object,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":208,\"nextId\":208,\"documentIds\":{\"0\":\"0\",\"1\":\"0#一、基础技能进阶\",\"2\":\"0#_1-java核心技术深化\",\"3\":\"0#_2-设计思维提升\",\"4\":\"0#二、系统架构能力\",\"5\":\"0#_1-分布式系统设计\",\"6\":\"0#_2-高并发架构设计\",\"7\":\"0#_3-高可用架构设计\",\"8\":\"0#三、技术广度扩展\",\"9\":\"0#_1-云原生技术\",\"10\":\"0#_2-数据架构\",\"11\":\"0#_3-安全架构\",\"12\":\"0#四、软技能提升\",\"13\":\"0#_1-项目管理能力\",\"14\":\"0#_2-技术管理能力\",\"15\":\"0#_3-业务理解能力\",\"16\":\"0#五、实践路径建议\",\"17\":\"0#六、学习资源推荐\",\"18\":\"0#_1-书籍推荐\",\"19\":\"0#_2-在线资源\",\"20\":\"0#_3-实践途径\",\"21\":\"0#七、评估标准\",\"22\":\"0#_1-技术能力\",\"23\":\"0#_2-项目经验\",\"24\":\"0#_3-影响力\",\"25\":\"0#总结\",\"26\":\"1\",\"27\":\"2\",\"28\":\"3\",\"29\":\"4\",\"30\":\"4@0\",\"31\":\"5\",\"32\":\"6\",\"33\":\"7\",\"34\":\"8\",\"35\":\"9\",\"36\":\"9@0\",\"37\":\"9@1\",\"38\":\"10\",\"39\":\"11\",\"40\":\"12\",\"41\":\"13\",\"42\":\"14\",\"43\":\"15\",\"44\":\"15@0\",\"45\":\"15@1\",\"46\":\"16\",\"47\":\"16@1\",\"48\":\"17\",\"49\":\"18\",\"50\":\"19\",\"51\":\"20\",\"52\":\"20#静态资源\",\"53\":\"20#静态资源映射规则\",\"54\":\"20#欢迎页\",\"55\":\"20#favicon\",\"56\":\"20#自定义静态资源规则\",\"57\":\"20#配置方式\",\"58\":\"20#代码方式\",\"59\":\"20#路径匹配\",\"60\":\"20#ant风格路径用法\",\"61\":\"20#模式切换\",\"62\":\"20#内容协商\",\"63\":\"20#springboot-多端适配默认规则\",\"64\":\"20#基于请求头内容协商-默认开启\",\"65\":\"20#基于请求参数内容协商-需要开启\",\"66\":\"20#效果演示\",\"67\":\"20#错误处理\",\"68\":\"20#默认机制\",\"69\":\"20#自定义错误响应\",\"70\":\"20#消息转换器\",\"71\":\"21\",\"72\":\"21#_1-基于-spring-boot-starter-parent-管理\",\"73\":\"21#_2-基于-dependencymanagement-管理\",\"74\":\"21#_3-基于多模块项目的最佳实践\",\"75\":\"21#_4-依赖中-optional-标记和provided-scope-的区别\",\"76\":\"21#optional-标记\",\"77\":\"21#scope-标记\",\"78\":\"21#provided-的使用场景\",\"79\":\"21#optional-true-使用场景\",\"80\":\"21@0\",\"81\":\"21@1\",\"82\":\"22\",\"83\":\"22@0\",\"84\":\"23\",\"85\":\"23#整合mybatis实战\",\"86\":\"23#_1-引入相关依赖\",\"87\":\"23#_2-配置数据源\",\"88\":\"23#_3-配置mybatis\",\"89\":\"23#_4-crud编写\",\"90\":\"23#自动装配的原理\",\"91\":\"23#核心启动器分析\",\"92\":\"23#jdbc-场景的自动配置\",\"93\":\"23#mybatis-的自动配置类-mybatisautoconfiguration\",\"94\":\"23#mapper-接口的注册机制\",\"95\":\"23@0\",\"96\":\"24\",\"97\":\"24#springboot怎么把日志默认配置好的\",\"98\":\"24#springboot-常见日志配置\",\"99\":\"24#日志级别\",\"100\":\"24#日志分组\",\"101\":\"24#文件输出\",\"102\":\"24#最佳实践\",\"103\":\"24#logback-spring-xml-配置\",\"104\":\"24#核心实现原理\",\"105\":\"24@0\",\"106\":\"24@1\",\"107\":\"25\",\"108\":\"25#自动配置\",\"109\":\"25#webmvcautoconfiguration\",\"110\":\"25#生效条件\",\"111\":\"25#核心类-webmvcautoconfigurationadapter\",\"112\":\"25#✅1-配置消息转换器-messageconverter\",\"113\":\"25#_2-异步请求处理\",\"114\":\"25#_3-内容协商配置\",\"115\":\"25#✅4-静态资源处理配置\",\"116\":\"25#_5-路径匹配配置\",\"117\":\"25#_6-配置requestcontextholder支持\",\"118\":\"25#核心类-enablewebmvcconfiguration\",\"119\":\"25#✅1-注册-handlermapping\",\"120\":\"25#✅2-注册handleradapter\",\"121\":\"25#_3-欢迎页配置\",\"122\":\"25#_4-配置国际化支持\",\"123\":\"25#✅5-默认的异常解析器\",\"124\":\"26\",\"125\":\"26#_1-常见的条件注解\",\"126\":\"26#conditionalonproperty\",\"127\":\"26#conditonalonclass\",\"128\":\"26#conditionalonmissingbean\",\"129\":\"26#conditionalonexpression\",\"130\":\"26#_2-如何实现自定义条件注解\",\"131\":\"26#_3-条件注解的实现原理\",\"132\":\"26#条件注解处理流程图\",\"133\":\"26#条件注解核心类图\",\"134\":\"26#条件注解执行时序图\",\"135\":\"26@0\",\"136\":\"26@1\",\"137\":\"27\",\"138\":\"27#_1-component注解方式\",\"139\":\"27#_2-bean注解方式\",\"140\":\"27#_3-import注解方式\",\"141\":\"27#_4-importselector接口\",\"142\":\"27#_5-✅importbeandefinitionregistrar接口\",\"143\":\"27#_6-factorybean接口\",\"144\":\"27#使用场景总结\",\"145\":\"27#_1-component适用场景\",\"146\":\"27#_2-bean适用场景\",\"147\":\"27#_3-import适用场景\",\"148\":\"27#_4-importselector适用场景\",\"149\":\"27#_5-importbeandefinitionregistrar适用场景\",\"150\":\"27#_6-factorybean适用场景\",\"151\":\"28\",\"152\":\"28@0\",\"153\":\"29\",\"154\":\"29#一、核心启动原理\",\"155\":\"29#_1-springboot-启动流程源码分析\",\"156\":\"29#_2-自动配置原理\",\"157\":\"29#二、高级特性实战\",\"158\":\"29#_1-自定义-starter-开发\",\"159\":\"29#_2-自定义条件注解\",\"160\":\"29#_3-事件监听机制\",\"161\":\"29#三、性能调优实战\",\"162\":\"29#_1-spring-boot-actuator-高级运用\",\"163\":\"29#_2-自定义线程池配置\",\"164\":\"29#_3-缓存优化\",\"165\":\"29#四、源码解析案例\",\"166\":\"29#_1-spring-boot-配置加载源码分析\",\"167\":\"29#_2-spring-boot-异常处理机制\",\"168\":\"29#五、面试要点\",\"169\":\"29#六、实战案例\",\"170\":\"29#_1-分布式限流实现\",\"171\":\"29#_2-分布式事务实现\",\"172\":\"29#总结\",\"173\":\"30\",\"174\":\"30#单系统打包问题\",\"175\":\"30#多模块系统打包规范\",\"176\":\"30#为什么可执行-jar-需要配置repackage功能\",\"177\":\"30#父-pom-配置\",\"178\":\"30#非可执行模块-如-common、api-模块\",\"179\":\"30#可执行模块-如-product-模块\",\"180\":\"30#总结\",\"181\":\"30@0\",\"182\":\"30@1\",\"183\":\"31\",\"184\":\"31#属性绑定的使用\",\"185\":\"31#为什么使用属性类的时候采用构造注入而非字段注入\",\"186\":\"31#字段注入-vs-构造注入\",\"187\":\"31#使用-requiredargsconstructor-lombok-简化构造注入\",\"188\":\"31#为什么使用构造注入\",\"189\":\"31#字段注入的问题\",\"190\":\"31#springboot-是如何实现属性绑定的\",\"191\":\"31#属性绑定流程图\",\"192\":\"31#绑定过程时序图\",\"193\":\"31@0\",\"194\":\"31@1\",\"195\":\"32\",\"196\":\"32#关于-enableconfigurationproperties-的常见使用场景\",\"197\":\"32#使用案例\",\"198\":\"32#_1-appplication-yml-配置\",\"199\":\"32#_2-定义配置属性类\",\"200\":\"32#_3-配置类-创建配置类来启用属性绑定\",\"201\":\"32#_4-使用配置的服务类\",\"202\":\"32#enableconfigurationproperties-注解的原理\",\"203\":\"32@0\",\"204\":\"32@1\",\"205\":\"33\",\"206\":\"33#自动配置的流程\",\"207\":\"34\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[2],\"2\":[2,10],\"3\":[2,11],\"4\":[2],\"5\":[2,19],\"6\":[2,16],\"7\":[2,13],\"8\":[2],\"9\":[2,8],\"10\":[2,5],\"11\":[2,6],\"12\":[2],\"13\":[2,4],\"14\":[2,4],\"15\":[2,4],\"16\":[2,16],\"17\":[2],\"18\":[2,7],\"19\":[2,4],\"20\":[2,4],\"21\":[2],\"22\":[2,3],\"23\":[2,3],\"24\":[2,3],\"25\":[1,22],\"26\":[1],\"27\":[2,3],\"28\":[1,1],\"29\":[1],\"30\":[null,null,1],\"31\":[1],\"32\":[1],\"33\":[2,174],\"34\":[1],\"35\":[3,4],\"36\":[null,null,1],\"37\":[null,null,1],\"38\":[2,3],\"39\":[1,1],\"40\":[1,3],\"41\":[1,1],\"42\":[1,1],\"43\":[1],\"44\":[null,null,1],\"45\":[null,null,1],\"46\":[1,1],\"47\":[null,null,1],\"48\":[2,3],\"49\":[2,3],\"50\":[1],\"51\":[3],\"52\":[1],\"53\":[1,27],\"54\":[1,8],\"55\":[1,10],\"56\":[1],\"57\":[1,24],\"58\":[1,31],\"59\":[1,10],\"60\":[1,35],\"61\":[1,56],\"62\":[1,1],\"63\":[1],\"64\":[3,10],\"65\":[3,15],\"66\":[1,49],\"67\":[1],\"68\":[1,84],\"69\":[1,9],\"70\":[1,103],\"71\":[2,14],\"72\":[3,90],\"73\":[3,76],\"74\":[2,369],\"75\":[6],\"76\":[2,44],\"77\":[2,64],\"78\":[2,52],\"79\":[2,152],\"80\":[null,null,1],\"81\":[null,null,2],\"82\":[2,5],\"83\":[null,null,1],\"84\":[4],\"85\":[1],\"86\":[2,27],\"87\":[1,30],\"88\":[2,25],\"89\":[2,93],\"90\":[1],\"91\":[1,18],\"92\":[2,29],\"93\":[3,114],\"94\":[2,207],\"95\":[null,null,2],\"96\":[2],\"97\":[1,34],\"98\":[2],\"99\":[1,32],\"100\":[1,18],\"101\":[1,16],\"102\":[1,22],\"103\":[4,192],\"104\":[1,121],\"105\":[null,null,1],\"106\":[null,null,2],\"107\":[4,9],\"108\":[1,56],\"109\":[1,6],\"110\":[1,62],\"111\":[2,38],\"112\":[4,42],\"113\":[2,44],\"114\":[2,34],\"115\":[2,47],\"116\":[2,52],\"117\":[2,22],\"118\":[2],\"119\":[3,29],\"120\":[2,26],\"121\":[2,19],\"122\":[2,43],\"123\":[2,14],\"124\":[4],\"125\":[2],\"126\":[2,66],\"127\":[2,67],\"128\":[2,25],\"129\":[2,25],\"130\":[2,100],\"131\":[2,33],\"132\":[2],\"133\":[2],\"134\":[1],\"135\":[null,null,1],\"136\":[null,null,2],\"137\":[2],\"138\":[2,48],\"139\":[2,47],\"140\":[2,42],\"141\":[2,60],\"142\":[2,45],\"143\":[2,35],\"144\":[2],\"145\":[3,4],\"146\":[3,4],\"147\":[3,3],\"148\":[3,6],\"149\":[3,4],\"150\":[3,4],\"151\":[4,25],\"152\":[null,null,1],\"153\":[2],\"154\":[2],\"155\":[3,63],\"156\":[2,45],\"157\":[2],\"158\":[4,22],\"159\":[2,30],\"160\":[2,30],\"161\":[2],\"162\":[5,17],\"163\":[2,27],\"164\":[2,29],\"165\":[2],\"166\":[4,65],\"167\":[4,26],\"168\":[2,33],\"169\":[2],\"170\":[2,59],\"171\":[2,30],\"172\":[1,16],\"173\":[4],\"174\":[1,54],\"175\":[1,39],\"176\":[4,81],\"177\":[3,72],\"178\":[6,53],\"179\":[5,48],\"180\":[1,12],\"181\":[null,null,1],\"182\":[null,null,2],\"183\":[2],\"184\":[1,112],\"185\":[1,2],\"186\":[3,49],\"187\":[1,44],\"188\":[1,19],\"189\":[1,16],\"190\":[2],\"191\":[2],\"192\":[2],\"193\":[null,null,1],\"194\":[null,null,1],\"195\":[2],\"196\":[3,39],\"197\":[2],\"198\":[4,17],\"199\":[2,44],\"200\":[3,17],\"201\":[2,29],\"202\":[3],\"203\":[null,null,1],\"204\":[null,null,1],\"205\":[2],\"206\":[1],\"207\":[1,3]},\"averageFieldLength\":[1.9867431543771068,32.11839886170199,0.27924192912431045],\"storedFields\":{\"0\":{\"h\":\"主页\"},\"1\":{\"h\":\"一、基础技能进阶\"},\"2\":{\"h\":\"1. Java核心技术深化\",\"t\":[\"JVM底层原理与性能调优 \",\"内存模型与垃圾回收机制\",\"类加载机制\",\"JIT即时编译\",\"常见性能问题诊断与调优\",\"并发编程精通 \",\"线程模型与线程池\",\"锁机制与同步控制\",\"并发容器与框架\",\"NIO与网络编程\"]},\"3\":{\"h\":\"2. 设计思维提升\",\"t\":[\"设计模式的深入理解与实践 \",\"创建型模式\",\"结构型模式\",\"行为型模式\",\"面向对象设计原则(SOLID)\",\"DDD领域驱动设计\",\"架构设计原则 \",\"高内聚低耦合\",\"正交性\",\"依赖倒置\"]},\"4\":{\"h\":\"二、系统架构能力\"},\"5\":{\"h\":\"1. 分布式系统设计\",\"t\":[\"分布式理论 \",\"CAP理论\",\"BASE理论\",\"一致性算法(Paxos/Raft)\",\"分布式服务框架 \",\"Spring Cloud/Dubbo生态\",\"服务注册与发现\",\"负载均衡\",\"服务熔断与降级\",\"分布式事务解决方案 \",\"2PC/3PC\",\"TCC\",\"SAGA模式\",\"最一致性\"]},\"6\":{\"h\":\"2. 高并发架构设计\",\"t\":[\"缓存架构 \",\"多级缓存架构\",\"缓存一致性\",\"热点数据处理\",\"消息队列 \",\"Kafka/RocketMQ/RabbitMQ\",\"消息幂等性\",\"顺序消息\",\"延迟消息\",\"数据库优化 \",\"分库分表\",\"读写分离\",\"SQL优化\",\"索引设计\"]},\"7\":{\"h\":\"3. 高可用架构设计\",\"t\":[\"容错设计 \",\"熔断\",\"限流\",\"降级\",\"隔离\",\"灾备方案 \",\"异地多活\",\"同城双活\",\"冷备热备\",\"监控告警 \",\"系统监控\",\"业务监控\",\"链路追踪\"]},\"8\":{\"h\":\"三、技术广度扩展\"},\"9\":{\"h\":\"1. 云原生技术\",\"t\":[\"容器化技术(Docker/Kubernetes)\",\"服务网格(Service Mesh)\",\"云原生存储\",\"Serverless架构\"]},\"10\":{\"h\":\"2. 数据架构\",\"t\":[\"数据仓库设计\",\"数据湖架构\",\"实时计算\",\"离线分析\",\"数据治理\"]},\"11\":{\"h\":\"3. 安全架构\",\"t\":[\"认证授权(OAuth/JWT)\",\"数据加密\",\"安全传输\",\"漏洞防护\"]},\"12\":{\"h\":\"四、软技能提升\"},\"13\":{\"h\":\"1. 项目管理能力\",\"t\":[\"需求分析与管理\",\"项目估算与规划\",\"风险控制\",\"团队协作\"]},\"14\":{\"h\":\"2. 技术管理能力\",\"t\":[\"技术评估\",\"架构评审\",\"技术债务管理\",\"团队培养\"]},\"15\":{\"h\":\"3. 业务理解能力\",\"t\":[\"领域知识积累\",\"业务架构设计\",\"业务价值评估\",\"成本收益分析\"]},\"16\":{\"h\":\"五、实践路径建议\",\"t\":[\"循序渐进\",\"先深化Java核心技能\",\"再拓展分布式架构知识\",\"最后建立完整知识体系\",\"实战驱动\",\"参与重要项目架构设计\",\"解决实际技术难题\",\"总结经验教训\",\"持续学习\",\"关注技术发展趋势\",\"学习优秀开源项目\",\"参与技术社区交流\",\"建立知识管理\",\"技术博客写作\",\"技术分享与演讲\",\"建立个人知识库\"]},\"17\":{\"h\":\"六、学习资源推荐\"},\"18\":{\"h\":\"1. 书籍推荐\",\"t\":[\"《Java编程思想》\",\"《深入理解Java虚拟机》\",\"《凤凰架构》\",\"《架构整洁之道》\",\"《领域驱动设计》\",\"《数据密集型应用系统设计》\"]},\"19\":{\"h\":\"2. 在线资源\",\"t\":[\"GitHub优秀开源项目\",\"技术博客和公众号\",\"技术会议与分享\",\"在线课程平台\"]},\"20\":{\"h\":\"3. 实践途径\",\"t\":[\"开源项目贡献\",\"企业内部分享\",\"技术社区交流\",\"个人项目实践\"]},\"21\":{\"h\":\"七、评估标准\"},\"22\":{\"h\":\"1. 技术能力\",\"t\":[\"能够独立设计和负责大型系统架构\",\"能够解决复杂技术问题\",\"具备技术选型和评估能力\"]},\"23\":{\"h\":\"2. 项目经验\",\"t\":[\"有大型分布式系统架构经验\",\"有复杂业务系统设计经验\",\"有技术团队管理经验\"]},\"24\":{\"h\":\"3. 影响力\",\"t\":[\"团队技术指导能力\",\"技术方案评审能力\",\"技术演讲和分享能力\"]},\"25\":{\"h\":\"总结\",\"t\":[\"成为一名优秀的Java架构师是一个渐进的过，需要在技术深度、广度和软技能等多个维度持续提升。建议：\",\"建立完整的知识体系\",\"积累实际项目经验\",\"培养架构思维方式\",\"持续学习新技术\",\"注重软技能提升\",\"记住：\\\"架构师\\\"不仅是一个职位，更是一种责任和能力的体现。需要在技术、业务、管理等多个维度不断成长。\",\"探索代码的无限可能，分享技术的纯粹热爱。在这里，每一行代码都是一次思维的跃迁，每篇文章都是知识的沉淀。\"]},\"26\":{\"h\":\"分布式系统\"},\"27\":{\"h\":\"分布式 ID\",\"t\":[\"这是分布式 ID 生成的介绍\"]},\"28\":{\"h\":\"分布式锁\",\"t\":[\"这是分布式锁的介绍\"]},\"29\":{\"h\":\"Java核心技术深化\"},\"30\":{\"c\":[\"java\"]},\"31\":{\"h\":\"SSM\"},\"32\":{\"h\":\"工具\"},\"33\":{\"h\":\"Git 分支管理策略和工作流程\",\"t\":[\"我来修改一下看看 我来修改一下再看看 我来解释一下分支管理策略和工作流程：\",\"请你扮演一名阿里云的 ACP 资深专家，并且也精通 Java 开发，下面我会通过图片来给你阿里云 ACP 的教学大纲和具体内容，请根据教学大纲来为我制定学习详细内容以及辅助\",\"这是一则或许对你有用的小广告\",\"面试专版：准备 Java 面试的小伙伴可以考虑面试专版：《Java面试指北》(质量非常高，专为面试打造，配合 JavaGuide 食用效果最佳)。\",\"知识星球：技术专栏/一对一提问/简历修改/求职指南/面试打卡/不定时福利，欢迎加入 JavaGuide 官方知识星球。\",\"测试一下这个容器\",\"这是目标 1\",\"这是目标 2\",\"测试一下 Java 代码：\",\"@Configuration(proxyBeanMethods = false) // spring.aop.auto=true时开启AOP，或者没有配置spring.aop.auto时默认也是开启 @ConditionalOnProperty(prefix = \\\"spring.aop\\\", name = \\\"auto\\\", havingValue = \\\"true\\\", matchIfMissing = true) public class AopAutoConfiguration { @Configuration(proxyBeanMethods = false) @ConditionalOnClass(Advice.class) static class AspectJAutoProxyingConfiguration { @Configuration(proxyBeanMethods = false) // 开启AOP的注解，使用JDK动态代理 @EnableAspectJAutoProxy(proxyTargetClass = false) // spring.aop.proxy-target-class=false时才生效 @ConditionalOnProperty(prefix = \\\"spring.aop\\\", name = \\\"proxy-target-class\\\", havingValue = \\\"false\\\") static class JdkDynamicAutoProxyConfiguration { } @Configuration(proxyBeanMethods = false) // 开启AOP的注解，使用CGLIB动态代理 @EnableAspectJAutoProxy(proxyTargetClass = true) // spring.aop.proxy-target-class=true时生效，或者没有配置spring.aop.proxy-target-class时默认也生效 @ConditionalOnProperty(prefix = \\\"spring.aop\\\", name = \\\"proxy-target-class\\\", havingValue = \\\"true\\\", matchIfMissing = true) static class CglibAutoProxyConfiguration { } } @Configuration(proxyBeanMethods = false) // 没有aspectj的依赖，但是又要使用cglib动态代理 @ConditionalOnMissingClass(\\\"org.aspectj.weaver.Advice\\\") @ConditionalOnProperty(prefix = \\\"spring.aop\\\", name = \\\"proxy-target-class\\\", havingValue = \\\"true\\\", matchIfMissing = true) static class ClassProxyingConfiguration { @Bean static BeanFactoryPostProcessor forceAutoProxyCreatorToUseClassProxying() { return (beanFactory) -> { if (beanFactory instanceof BeanDefinitionRegistry) { BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory; // 注册InfrastructureAdvisorAutoProxyCreator从而开启Spring AOP // @EnableAspectJAutoProxy会注册AnnotationAwareAspectJAutoProxyCreator，也会开启Spring AOP但是同时有用解析AspectJ注解的功能 AopConfigUtils.registerAutoProxyCreatorIfNecessary(registry); AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry); } }; } } }\",\"同步到 main 分支\",\"# 切换到 main 分支 git checkout main # 合并 gh-pages 分支的更改到 main git merge gh-pages # 推送到远程 main 分支 git push origin main\",\"日常开发流程建议\",\"建议采用以下工作流程：\",\"A. 在 main 分支进行开发\",\"# 确保在 main 分支 git checkout main # 拉取最新代码 git pull origin main # 进行开发，然后提交 git add . git commit -m \\\"你的提交信息\\\" # 推送到远程 main git push origin main\",\"B. 更新部署（gh-pages）分支\",\"# 切换到 gh-pages 分支 git checkout gh-pages # 合并 main 的更改 git merge main # 推送到远程 gh-pages git push origin gh-pages\",\"分支管理策略\",\"main 分支（主分支） ├── 日常开发 ├── 存放最新代码 └── 保持与 gh-pages 同步 gh-pages 分支（部署分支） ├── 用于网站部署 ├── 从 main 分支合并更新 └── 保持与线上部署版本一致\",\"建议的工作流程\",\"所有新功能开发和修改都在 main 分支进行\",\"完成开发并测试无误后，将更改合并到 gh-pages 分支\",\"gh-pages 分支专门用于部署，不直接在上面开发\",\"定期将 main 分支的更改同步到 gh-pages\",\"一些有用的命令\",\"# 查看当前分支 git branch # 查看所有分支（包括远程） git branch -a # 切换分支 git checkout <分支名> # 创建并切换到新分支 git checkout -b <新分支名> # 查看分支状态 git status\",\"注意事项\",\"每次开发前先拉取最新代码\",\"确保在正确的分支上工作\",\"定期将 main 的更改同步到 gh-pages\",\"保持良好的提交信息习惯\",\"如果有配置文件的改动，注意是否需要同步到两个分支\",\"这样的工作流程可以帮助你：\",\"保持代码版本的清晰性\",\"方便管理开发和部署版本\",\"降低出错的风险\",\"便于回滚和维护\"]},\"34\":{\"h\":\"分布式算法基础\"},\"35\":{\"h\":\"CAP & BASE 理论基础\",\"t\":[\"这是 CAP & BASE 理论基础的介绍\"]},\"36\":{\"c\":[\"分布式\"]},\"37\":{\"c\":[\"分布式\"]},\"38\":{\"h\":\"Raft 一致性算法\",\"t\":[\"这是 Raft 一致性算法的介绍\"]},\"39\":{\"h\":\"并发编程\",\"t\":[\"这是并发编程的介绍\"]},\"40\":{\"h\":\"java锁\",\"t\":[\"这是 java 锁的介绍\"]},\"41\":{\"h\":\"线程模型\",\"t\":[\"这是线程模型的介绍\"]},\"42\":{\"h\":\"线程池\",\"t\":[\"这是线程池的介绍\"]},\"43\":{\"h\":\"JVM\"},\"44\":{\"c\":[\"java\"]},\"45\":{\"c\":[\"JVM\"]},\"46\":{\"h\":\"类加载机制\",\"t\":[\"这是类加载机制的介绍\"]},\"47\":{\"c\":[\"JVM\"]},\"48\":{\"h\":\"JIT 即时编译\",\"t\":[\"这是 JIT 即时编译的介绍\"]},\"49\":{\"h\":\"JVM 基础\",\"t\":[\"这是 JVM 的介绍\"]},\"50\":{\"h\":\"SpringBoot\"},\"51\":{\"h\":\"SpringBoot Web 开发\"},\"52\":{\"h\":\"静态资源\"},\"53\":{\"h\":\"静态资源映射规则\",\"t\":[\"静态资源映射规则在 WebMvcAutoConfiguration 中进行了定义：\",\"/webjars/** 的所有路径 资源都在 classpath:/META-INF/resources/webjars/\",\"/** 的所有路径 资源都在 classpath:/META-INF/resources/、classpath:/resources/、classpath:/static/、classpath:/public/\",\"所有静态资源都定义了缓存规则。即浏览器访问过一次，就会缓存一段时间，但此功能参数无默认值 \",\"period： 缓存间隔。 默认 0S；\",\"cacheControl：缓存控制。 默认无；\",\"useLastModified：是否使用lastModified头。 默认 false；\"]},\"54\":{\"h\":\"欢迎页\",\"t\":[\"欢迎页规则在 WebMvcAutoConfiguration 中进行了定义：\",\"在静态资源目录下找 index.html\",\"没有就在 templates下找index模板页\"]},\"55\":{\"h\":\"Favicon\",\"t\":[\"在静态资源目录下找 favicon.ico\",\"如下图的静态资源可以通过路径直接访问：\",\"浏览器输入：http://localhost:10086/003.jpeg\"]},\"56\":{\"h\":\"自定义静态资源规则\"},\"57\":{\"h\":\"配置方式\",\"t\":[\"spring.mvc：静态资源访问前缀路径\",\"spring.web：静态资源目录 静态资源缓存策略\",\"spring.web.resources.static-locations=classpath:/a/,classpath:/b/,classpath:/static/ # 这个配置的意思就是原本默认访问静态资源路径是 /** 直接去找对应的映射路径 # 但是配置了/static/** 后，访问静态资源路径就需要加 /static 后才能映射对应的资源路径 # 但是配置了/static/** 后，访问静态资源路径就需要加 /static 后才能映射对应的资源路径 spring.mvc.static-path-pattern=/static/**\",\"spring.mvc.static-path-pattern 这个配置常用于我们后端需要拦截所有请求，但是对静态资源不进行拦截，所以我们配置一个静态资源路径前缀来区分\"]},\"58\":{\"h\":\"代码方式\",\"t\":[\"定义一个配置类，实现WebMvcConfigurer接口，但是不要标注@EnableWebMvc注解\",\"@Configuration //配置类 public class MyConfig implements WebMvcConfigurer { @Override public void addResourceHandlers(ResourceHandlerRegistry registry) { //保留以前规则 //自己写新的规则。 registry.addResourceHandler(\\\"/static/**\\\") .addResourceLocations(\\\"classpath:/a/\\\",\\\"classpath:/b/\\\") .setCacheControl(CacheControl.maxAge(1180, TimeUnit.SECONDS)); } }\"]},\"59\":{\"h\":\"路径匹配\",\"t\":[\"Spring5.3 之后加入了更多的请求路径匹配的实现策略； 以前只支持 AntPathMatcher 策略, 现在提供了 PathPatternParser 策略。并且可以让我们指定到底使用那种策略。\"]},\"60\":{\"h\":\"\",\"t\":[\"Ant 风格的路径模式语法具有以下规则：\",\"*：表示任意数量的字符。\",\"?：表示任意一个字符。\",\"**：表示任意数量的目录。\",\"{}：表示一个命名的模式占位符。\",\"[]：表示字符集合，例如[a-z]表示小写字母。\",\"例如：\",\"*.html 匹配任意名称，扩展名为.html的文件。\",\"/folder1/*/*.java 匹配在folder1目录下的任意两级目录下的.java文件。\",\"/folder2/**/*.jsp 匹配在folder2目录下任意目录深度的.jsp文件。\",\"/{type}/{id}.html 匹配任意文件名为{id}.html，在任意命名的{type}目录下的文件。\",\"注意：Ant 风格的路径模式语法中的特殊字符需要转义，如：\",\"要匹配文件路径中的星号，则需要转义为\\\\\\\\*。\",\"要匹配文件路径中的问号，则需要转义为\\\\\\\\?。\"]},\"61\":{\"h\":\"模式切换\",\"t\":[\"AntPathMatcher 与 PathPatternParser\",\"PathPatternParser 在 jmh 基准测试下，有 6~8 倍吞吐量提升，降低 30%~40%空间分配率\",\"PathPatternParser 兼容 AntPathMatcher语法，并支持更多类型的路径模式\",\"PathPatternParser \\\"\\\" 多段匹配的支持仅允许在模式末尾使用**\",\" @GetMapping(\\\"/a*/b?/{p1:[a-f]+}\\\") public String hello(HttpServletRequest request, @PathVariable(\\\"p1\\\") String path) { log.info(\\\"路径变量p1： {}\\\", path); //获取请求路径 String uri = request.getRequestURI(); return uri; }\",\"# 改变路径匹配策略： # ant_path_matcher 老版策略； # path_pattern_parser 新版策略； spring.mvc.pathmatch.matching-strategy=ant_path_matcher\",\"总结：\",\"使用默认的路径匹配规则，是由 PathPatternParser 提供的\",\"**如果路径中间需要有 ，替换成ant风格路径\"]},\"62\":{\"h\":\"内容协商\",\"t\":[\"一套系统适配多端数据返回\"]},\"63\":{\"h\":\"多端适配默认规则\"},\"64\":{\"h\":\"基于请求头内容协商：（默认开启）\",\"t\":[\"客户端向服务端发送请求，携带HTTP标准的 Accept 请求头\",\"Accept: application/json、text/xml、text/yaml\",\"服务端根据客户端请求头期望的数据类型进行动态返回\"]},\"65\":{\"h\":\"基于请求参数内容协商：（需要开启）\",\"t\":[\"发送请求 GET /projects/spring-boot?format=json\",\"匹配到 @GetMapping(\\\"/projects/spring-boot\\\")\",\"根据参数协商，优先返回 json 类型数据【需要开启参数匹配设置】\",\"发送请求 GET /projects/spring-boot?format=xml,优先返回 xml 类型数据\"]},\"66\":{\"h\":\"效果演示\",\"t\":[\"请求同一个接口，可以返回 json 和 xml 不同格式数据\",\"引入支持写出xml内容依赖\",\"<dependency> <groupId>com.fasterxml.jackson.dataformat</groupId> <artifactId>jackson-dataformat-xml</artifactId> </dependency>\",\"标注注解\",\"@JacksonXmlRootElement // 可以写出为xml文档 @Data public class Person { private Long id; private String userName; private String email; private Integer age; }\",\"开启基于请求参数的内容协商\",\"# 开启基于请求参数的内容协商功能。 默认参数名：format。 默认此功能不开启 spring.mvc.contentnegotiation.favor-parameter=true # 指定内容协商时使用的参数名。默认是 format spring.mvc.contentnegotiation.parameter-name=type\",\"效果\"]},\"67\":{\"h\":\"错误处理\"},\"68\":{\"h\":\"默认机制\",\"t\":[\"默认机制\",\"错误处理的自动配置都在ErrorMvcAutoConfiguration中，两大核心机制：\",\"SpringBoot 会自适应处理错误，响应页面或JSON数据\",\"SpringMVC的错误处理机制依然保留，MVC处理不了，才会交给boot进行处理\",\"发生错误以后，转发给/error路径，SpringBoot在底层写好一个 BasicErrorController的组件，专门处理这个请求：\",\" @RequestMapping(produces = MediaType.TEXT_HTML_VALUE) //返回HTML public ModelAndView errorHtml(HttpServletRequest request, HttpServletResponse response) { HttpStatus status = getStatus(request); Map<String, Object> model = Collections .unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML))); response.setStatus(status.value()); ModelAndView modelAndView = resolveErrorView(request, response, status, model); return (modelAndView != null) ? modelAndView : new ModelAndView(\\\"error\\\", model); } @RequestMapping //返回 ResponseEntity, JSON public ResponseEntity<Map<String, Object>> error(HttpServletRequest request) { HttpStatus status = getStatus(request); if (status == HttpStatus.NO_CONTENT) { return new ResponseEntity<>(status); } Map<String, Object> body = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.ALL)); return new ResponseEntity<>(body, status); }\",\"如何解析一个错误页：\",\"如果发生了500、404、503、403 这些错误 \",\"如果有模板引擎，默认在 classpath:/templates/error/精确码.html\",\"如果没有模板引擎，在静态资源文件夹下找 精确码.html\",\"如果匹配不到精确码.html这些精确的错误页，就去找5xx.html，4xx.html模糊匹配 \",\"如果有模板引擎，默认在 classpath:/templates/error/5xx.html\",\"如果没有模板引擎，在静态资源文件夹下找 5xx.html\",\"如果都匹配不到： \",\"如果模板引擎路径templates下有 error.html页面，就直接渲染\"]},\"69\":{\"h\":\"自定义错误响应\",\"t\":[\"自定义json响应\",\"使用@ControllerAdvice + @ExceptionHandler 进行统一异常处理\",\"自定义页面响应\",\"根据SpringBoot的错误页面规则，自定义页面模板\"]},\"70\":{\"h\":\"消息转换器\",\"t\":[\"开发中我们经常自己实现一个WebMvcConfigurer 接口，然后重写 configureMessageConverters 方法\",\"常用于解决\",\"处理前端精度丢失问题（如Long类型ID）\",\"统一日期格式\",\"统一空值处理\",\"处理特殊字符编码\",\"有如下接口：\",\" @GetMapping(\\\"/{id}\\\") public User getUser(@PathVariable Long id) { return userService.getUser(id); }\",\"在没有配置自定义消息转换器之前在前端是这样返回的：\",\"{ \\\"id\\\": 1234567890123456789, // Long型数据可能精度丢失 \\\"createTime\\\": 1621324800000, // 时间戳格式 \\\"name\\\": \\\"张三\\\", \\\"age\\\": null, // 空值也会返回 }\",\"添加自定义消息转换器：\",\"/** * 场景：接口需要统一处理日期格式、Long型数据精度丢失、空值处理等问题 */ @Configuration public class CustomMessageConverterConfig implements WebMvcConfigurer { @Override public void configureMessageConverters(List<HttpMessageConverter<?>> converters) { // 创建自定义的 Jackson 转换器 MappingJackson2HttpMessageConverter jackson2HttpMessageConverter = new MappingJackson2HttpMessageConverter(); ObjectMapper objectMapper = new ObjectMapper(); // 配置日期格式 objectMapper.setDateFormat(new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\")); // 配置 Long 型数据序列化为字符串，避免精度丢失 SimpleModule simpleModule = new SimpleModule(); simpleModule.addSerializer(Long.class, ToStringSerializer.instance); simpleModule.addSerializer(Long.TYPE, ToStringSerializer.instance); objectMapper.registerModule(simpleModule); // 配置空值处理 objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL); // 禁用时间戳功能 objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false); jackson2HttpMessageConverter.setObjectMapper(objectMapper); // 将自定义的转换器添加到首位 converters.add(0, jackson2HttpMessageConverter); } }\",\"添加后的效果：\",\"{ \\\"id\\\": \\\"1234567890123456789\\\", // Long型转为字符串 \\\"createTime\\\": \\\"2021-05-18 12:00:00\\\", // 格式化的日期 \\\"name\\\": \\\"张三\\\" // 空值被忽略 }\"]},\"71\":{\"h\":\"SpringBoot 是如何进行依赖管理的\",\"t\":[\"首先 SpringBoot 的依赖管理是基于 Maven 的依赖传递原则，当依赖 A 中包含依赖 B且依赖 B 中包含依赖 C，那么依赖 A 就同时拥有依赖 B 和依赖 C\"]},\"72\":{\"h\":\"1. 基于 管理\",\"t\":[\"当我们使用 SpringBoot 初始化器创建一个 SpringBoot 项目时，都会有一个父项目 spring-boot-starter-parent\",\"<parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>3.3.5</version> </parent>\",\"这个父项目最重要的作用是：\",\"提供了统一的 Java 版本配置（Java 17+）\",\"提供了统一的源码编码格式（UTF-8）\",\"提供了一组预定义的依赖版本（依赖管理）\",\"而 spring-boot-starter-parent 也有一个父项目 spring-boot-dependencies\",\" <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>3.3.5</version> </parent>\",\"它在 <properties> 中定义了几百个依赖的版本号，通过这种方式统一管理依赖版本，避免版本冲突\",\"<properties> <mybatis.version>3.5.13</mybatis.version> <mysql.version>8.0.33</mysql.version> <jackson.version>2.15.3</jackson.version> ... </properties>\",\"而这个父项目 spring-boot-dependencies 也称之为 SpringBoot 版本仲裁中心，它把所有常见的jar的依赖版本都声明好了。例如：\",\"<!-- 父项目中已经定义了 MySQL 驱动的版本 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <!-- 无需指定版本，会自动使用父项目中定义的版本 --> </dependency>\",\"而如果需要使用不同于 SpringBoot 默认的版本，有两种方式：\",\"直接在依赖中指定版本号\",\"<dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>5.1.49</version> </dependency>\",\"在当前项目的 properties 中覆盖版本属性\",\"<properties> <mysql.version>5.1.49</mysql.version> </properties>\",\"所以，SpringBoot 的依赖管理是基于父项目 spring-boot-starter-parent，而 spring-boot-starter-parent也有父项目 spring-boot-dependencies\",\"它在 <properties> 中定义了几百个依赖的版本号，通过这种方式统一管理依赖版本，避免版本冲突。\"]},\"73\":{\"h\":\"2. 基于 管理\",\"t\":[\"什么时候不使用 parent：\",\"项目需要继承其他父 POM（比如公司统一的父 POM）\",\"需要更灵活的版本控制\",\"需要完全控制项目的构建配置\",\"当我们构建一个多模块项目时：\",\"<!-- 父工程 parent-project/pom.xml --> <project> <!-- 继承公司的父 POM --> <parent> <groupId>com.van</groupId> <artifactId>company-parent</artifactId> <version>1.0.0</version> </parent> <groupId>com.van</groupId> <artifactId>parent-project</artifactId> <version>1.0.0</version> <packaging>pom</packaging> <!-- SpringBoot 依赖管理 --> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>3.2.0</version> <type>pom</type> <scope>import</scope> </dependency> <!-- springcloud alibaba --> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-alibaba-dependencies</artifactId> <version>2022.0.0.0</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <!-- 公共插件管理 --> <build> <pluginManagement> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>3.2.0</version> </plugin> </plugins> </pluginManagement> </build> </project>\",\"比较一下使用和不使用 spring-boot-starter-parent 的区别：\",\"使用 parent 方式：\",\"<parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>3.2.0</version> </parent>\",\"使用 dependencyManagement 方式：\",\"<dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>3.2.0</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement>\"]},\"74\":{\"h\":\"3. 基于多模块项目的最佳实践\",\"t\":[\"假设以一个电商系统为例，包含多个模块\",\"首先是根项目的 POM（parent-project/pom.xml）：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <!-- 基本信息 --> <groupId>com.van.mall</groupId> <artifactId>mall-parent</artifactId> <version>1.0.0-SNAPSHOT</version> <packaging>pom</packaging> <description>电商系统父工程</description> <!-- 统一管理版本号 --> <properties> <!-- 基础配置 --> <java.version>17</java.version> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> <maven.compiler.source>${java.version}</maven.compiler.source> <maven.compiler.target>${java.version}</maven.compiler.target> <!-- 核心依赖版本 --> <spring-boot.version>3.2.0</spring-boot.version> <spring-cloud.version>2023.0.0</spring-cloud.version> <spring-cloud-alibaba.version>2022.0.0.0</spring-cloud-alibaba.version> <!-- 数据库和缓存相关 --> <mysql.version>8.0.33</mysql.version> <mybatis-plus.version>3.5.4.1</mybatis-plus.version> <dynamic-datasource.version>4.2.0</dynamic-datasource.version> <redisson.version>3.24.3</redisson.version> <!-- 工具类 --> <hutool.version>5.8.23</hutool.version> <guava.version>32.1.3-jre</guava.version> <commons-lang3.version>3.13.0</commons-lang3.version> <mapstruct.version>1.5.5.Final</mapstruct.version> <!-- 接口文档 --> <knife4j.version>4.3.0</knife4j.version> <!-- 监控相关 --> <skywalking.version>8.16.0</skywalking.version> <prometheus.version>1.11.4</prometheus.version> </properties> <!-- 子模块管理 --> <modules> <module>mall-common</module> <!-- 公共模块 --> <module>mall-api</module> <!-- 接口模块 --> <module>mall-security</module> <!-- 安全模块 --> <module>mall-user</module> <!-- 用户服务 --> <module>mall-product</module> <!-- 商品服务 --> <module>mall-order</module> <!-- 订单服务 --> <module>mall-payment</module> <!-- 支付服务 --> <module>mall-gateway</module> <!-- 网关服务 --> </modules> <!-- 依赖管理 --> <dependencyManagement> <dependencies> <!-- Spring Boot 依赖 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>${spring-boot.version}</version> <type>pom</type> <scope>import</scope> </dependency> <!-- Spring Cloud 依赖 --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-dependencies</artifactId> <version>${spring-cloud.version}</version> <type>pom</type> <scope>import</scope> </dependency> <!-- Spring Cloud Alibaba 依赖 --> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-alibaba-dependencies</artifactId> <version>${spring-cloud-alibaba.version}</version> <type>pom</type> <scope>import</scope> </dependency> <!-- 数据库相关 --> <dependency> <groupId>com.mysql</groupId> <artifactId>mysql-connector-j</artifactId> <version>${mysql.version}</version> </dependency> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>${mybatis-plus.version}</version> </dependency> <dependency> <groupId>com.baomidou</groupId> <artifactId>dynamic-datasource-spring-boot-starter</artifactId> <version>${dynamic-datasource.version}</version> </dependency> <!-- Redis 相关 --> <dependency> <groupId>org.redisson</groupId> <artifactId>redisson-spring-boot-starter</artifactId> <version>${redisson.version}</version> </dependency> <!-- 工具类 --> <dependency> <groupId>cn.hutool</groupId> <artifactId>hutool-all</artifactId> <version>${hutool.version}</version> </dependency> <dependency> <groupId>com.google.guava</groupId> <artifactId>guava</artifactId> <version>${guava.version}</version> </dependency> <dependency> <groupId>org.apache.commons</groupId> <artifactId>commons-lang3</artifactId> <version>${commons-lang3.version}</version> </dependency> <dependency> <groupId>org.mapstruct</groupId> <artifactId>mapstruct</artifactId> <version>${mapstruct.version}</version> </dependency> <!-- 接口文档 --> <dependency> <groupId>com.github.xiaoymin</groupId> <artifactId>knife4j-openapi3-spring-boot-starter</artifactId> <version>${knife4j.version}</version> </dependency> <!-- 内部模块依赖 --> <dependency> <groupId>${project.groupId}</groupId> <artifactId>mall-common</artifactId> <version>${project.version}</version> </dependency> <!-- 其他内部模块... --> </dependencies> </dependencyManagement> <!-- 公共依赖 --> <dependencies> <!-- 开发工具 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <!-- 测试依赖 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> </dependencies> <!-- 多环境配置 --> <profiles> <profile> <id>dev</id> <properties> <env>dev</env> <nacos.addr>127.0.0.1:8848</nacos.addr> </properties> <activation> <activeByDefault>true</activeByDefault> </activation> </profile> <profile> <id>test</id> <properties> <env>test</env> <nacos.addr>test-nacos:8848</nacos.addr> </properties> </profile> <profile> <id>prod</id> <properties> <env>prod</env> <nacos.addr>prod-nacos:8848</nacos.addr> </properties> </profile> </profiles> <!-- 构建配置 --> <build> <pluginManagement> <plugins> <!-- Spring Boot Maven 插件 --> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>${spring-boot.version}</version> <configuration> <excludes> <exclude> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </exclude> </excludes> </configuration> </plugin> <!-- 编译插件 --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.11.0</version> <configuration> <source>${java.version}</source> <target>${java.version}</target> <encoding>UTF-8</encoding> <!-- mapstruct 配置 --> <annotationProcessorPaths> <path> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>${lombok.version}</version> </path> <path> <groupId>org.mapstruct</groupId> <artifactId>mapstruct-processor</artifactId> <version>${mapstruct.version}</version> </path> </annotationProcessorPaths> </configuration> </plugin> <!-- 源码插件 --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-source-plugin</artifactId> <version>3.3.0</version> </plugin> </plugins> </pluginManagement> <!-- 资源文件配置 --> <resources> <resource> <directory>src/main/resources</directory> <filtering>true</filtering> <includes> <include>application.yml</include> <include>application-${env}.yml</include> <include>bootstrap.yml</include> <include>bootstrap-${env}.yml</include> </includes> </resource> <resource> <directory>src/main/resources</directory> <filtering>false</filtering> <excludes> <exclude>application*.yml</exclude> <exclude>bootstrap*.yml</exclude> </excludes> </resource> </resources> </build> <!-- 仓库配置 --> <repositories> <repository> <id>aliyun</id> <url>https://maven.aliyun.com/repository/public</url> <releases> <enabled>true</enabled> </releases> <snapshots> <enabled>false</enabled> </snapshots> </repository> </repositories> </project>\",\"子模块商品服务模块的 POM\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <parent> <artifactId>mall-parent</artifactId> <groupId>com.van.mall</groupId> <version>1.0.0-SNAPSHOT</version> </parent> <modelVersion>4.0.0</modelVersion> <artifactId>mall-product</artifactId> <description>商品服务模块</description> <dependencies> <!-- 内部依赖 --> <dependency> <groupId>${project.groupId}</groupId> <artifactId>mall-common</artifactId> </dependency> <dependency> <groupId>${project.groupId}</groupId> <artifactId>mall-api</artifactId> </dependency> <!-- Spring Boot 依赖 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-validation</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> <!-- Spring Cloud 依赖 --> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-loadbalancer</artifactId> </dependency> <!-- 数据库相关 --> <dependency> <groupId>com.mysql</groupId> <artifactId>mysql-connector-j</artifactId> </dependency> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> </dependency> <dependency> <groupId>com.baomidou</groupId> <artifactId>dynamic-datasource-spring-boot-starter</artifactId> </dependency> <!-- 缓存相关 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> </dependency> <dependency> <groupId>org.redisson</groupId> <artifactId>redisson-spring-boot-starter</artifactId> </dependency> <!-- 工具类 --> <dependency> <groupId>cn.hutool</groupId> <artifactId>hutool-all</artifactId> </dependency> <dependency> <groupId>org.mapstruct</groupId> <artifactId>mapstruct</artifactId> </dependency> </dependencies> <build> <finalName>${project.artifactId}</finalName> <plugins> <!-- Spring Boot 打包插件 --> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <executions> <execution> <goals> <goal>repackage</goal> </goals> </execution> </executions> </plugin> </plugins> </build> </project>\",\"公共模块（mall-common）的 POM 配置\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <parent> <artifactId>mall-parent</artifactId> <groupId>com.van.mall</groupId> <version>1.0.0-SNAPSHOT</version> </parent> <modelVersion>4.0.0</modelVersion> <artifactId>mall-common</artifactId> <description>公共工具模块</description> <dependencies> <!-- Web 相关 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-validation</artifactId> <optional>true</optional> </dependency> <!-- 工具类 --> <dependency> <groupId>cn.hutool</groupId> <artifactId>hutool-all</artifactId> </dependency> <dependency> <groupId>org.apache.commons</groupId> <artifactId>commons-lang3</artifactId> </dependency> <dependency> <groupId>com.google.guava</groupId> <artifactId>guava</artifactId> </dependency> <!-- JSON 处理 --> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> </dependency> <!-- 对象转换 --> <dependency> <groupId>org.mapstruct</groupId> <artifactId>mapstruct</artifactId> </dependency> </dependencies> <!-- 只配置必要的插件 --> <build> <plugins> <!-- 源码插件，便于调试 --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-source-plugin</artifactId> <executions> <execution> <id>attach-sources</id> <phase>verify</phase> <goals> <goal>jar-no-fork</goal> </goals> </execution> </executions> </plugin> </plugins> </build> </build>\"]},\"75\":{\"h\":\"4. 依赖中 optional 标记和provided scope 的区别\"},\"76\":{\"h\":\"optional 标记\",\"t\":[\"optional 的作用是标记该依赖是可选的，主要用于避免依赖传递。\",\"当项目 A 依赖项目 B，项目 B 依赖项目 C（optional=true），此时项目 A 不会自动依赖项目 C\",\"如果项目 A 需要使用项目 C，需要在项目 A 中显式声明对项目 C 的依赖\",\"也就是说，该依赖对当前项目是可用的，依赖这个项目的其他项目如果需要这个依赖，需要显式声明\",\"<!-- mall-common 模块 --> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <optional>true</optional> <!-- 标记为可选依赖 --> </dependency> <!-- mall-product 模块 (依赖 mall-common) --> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <!-- 需要显式声明依赖，因为 mall-common 中的是可选依赖 --> </dependency>\"]},\"77\":{\"h\":\"scope 标记\",\"t\":[\"scope 用于控制依赖的使用范围，常见的值有：compile、provided、runtime、test。\",\"compile（默认值）\",\"编译、测试、运行阶段都有效\",\"依赖会传递\",\"会被打包到最终的 WAR/JAR 中\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> <scope>compile</scope> <!-- 默认值，可以省略 --> </dependency>\",\"provided\",\"编译和测试阶段有效\",\"运行时由 JDK 或容器提供\",\"不会被打包到最终的 WAR/JAR 中\",\"<dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> <scope>provided</scope> </dependency>\",\"runtime\",\"测试和运行阶段有效\",\"编译阶段不需要\",\"会被打包到最终的 WAR/JAR 中\",\"<dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> </dependency>\",\"test\",\"仅在测试阶段有效\",\"不会被打包到最终的 WAR/JAR 中\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency>\",\"特性\",\"optional=true\",\"scope=provided\",\"依赖传递\",\"阻止传递\",\"阻止传递\",\"编译时有效\",\"是\",\"是\",\"运行时有效\",\"是\",\"否（由容器提供）\",\"打包到最终制品\",\"是\",\"否\"]},\"78\":{\"h\":\"provided 的使用场景\",\"t\":[\"作用：\",\"编译和测试阶段有效\",\"运行时由 JDK 或容器提供\",\"不会被打包到最终的 WAR/JAR 中\",\"所以，当 SpringBoot 应用打包时，\",\"像 Lombok MapStruct 这类依赖只在编译时需要，运行时不需要的依赖就可以使用 <scope>provided</scope>\",\"而当我们打 WAR包进行部署时，外部 Tomcat 已提供运行环境，同时为了避免包冲突和重复，就需要移除 Springboot 内嵌的 Tomcat\",\"<!-- 1. 编译时工具 --> <!-- Lombok --> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <scope>provided</scope> </dependency> <!-- MapStruct 注解处理器 --> <dependency> <groupId>org.mapstruct</groupId> <artifactId>mapstruct-processor</artifactId> <scope>provided</scope> </dependency> <!-- 2. 运行环境已存在的依赖 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency>\"]},\"79\":{\"h\":\"optional=true 使用场景\",\"t\":[\"场景：在自定义一个数据库的 Springboot Starter 给其他项目用时，我不知道别人用的数据库是 MySQL 还是 PostgreSQL，但是我在这个 starter 中，都需要引入这两个数据库的依赖，这就是一个典型的 optional=true 使用场景\",\"自定义 starter 依赖配置：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>com.van</groupId> <artifactId>my-db-spring-boot-starter</artifactId> <version>1.0.0</version> <properties> <java.version>17</java.version> <spring-boot.version>3.2.0</spring-boot.version> </properties> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>${spring-boot.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <dependencies> <!-- Spring Boot 自动配置 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-autoconfigure</artifactId> </dependency> <!-- 配置处理器 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-configuration-processor</artifactId> <optional>true</optional> </dependency> <!-- JDBC 支持 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <!-- 数据库驱动 --> <!-- MySQL 驱动 --> <dependency> <groupId>com.mysql</groupId> <artifactId>mysql-connector-j</artifactId> <optional>true</optional> <!-- 标记为可选 --> </dependency> <!-- PostgreSQL 驱动 --> <dependency> <groupId>org.postgresql</groupId> <artifactId>postgresql</artifactId> <optional>true</optional> <!-- 标记为可选 --> </dependency> <!-- 工具类 --> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <scope>provided</scope> </dependency> </dependencies> </project>\",\"自动配置类：\",\"@Configuration @ConditionalOnClass(DataSource.class) @EnableConfigurationProperties(MyDbProperties.class) public class MyDbAutoConfiguration { @Bean @ConditionalOnMissingBean public DataSource dataSource(MyDbProperties properties) { // 根据配置创建对应的数据源 return createDataSource(properties); } private DataSource createDataSource(MyDbProperties properties) { String driverClassName = properties.getDriverClassName(); // 根据驱动类名判断数据库类型 if (driverClassName.contains(\\\"mysql\\\")) { // MySQL 配置 return createMySQLDataSource(properties); } else if (driverClassName.contains(\\\"postgresql\\\")) { // PostgreSQL 配置 return createPostgreSQLDataSource(properties); } throw new IllegalArgumentException(\\\"Unsupported database type\\\"); } }\",\"使用方的依赖配置：\",\"<!-- 使用方的 pom.xml --> <dependencies> <!-- 引入自定义 starter --> <dependency> <groupId>com.example</groupId> <artifactId>my-db-spring-boot-starter</artifactId> <version>1.0.0</version> </dependency> <!-- 明确声明需要使用的数据库驱动 --> <dependency> <groupId>com.mysql</groupId> <artifactId>mysql-connector-j</artifactId> </dependency> </dependencies>\"]},\"80\":{\"c\":[\"SpringBoot\"]},\"81\":{\"c\":[\"SpringBoot\",\"Maven\"]},\"82\":{\"h\":\"SpringBoot 基础特性\",\"t\":[\"基础特性\",\"Java -jar xx.jar\",\"命令行参数双横线和单横线分别什么情况下用\"]},\"83\":{\"c\":[\"SpringBoot\"]},\"84\":{\"h\":\"SpringBoot 整合 MyBatis 原理\"},\"85\":{\"h\":\"整合MyBatis实战\"},\"86\":{\"h\":\"1. 引入相关依赖\",\"t\":[\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.33</version> </dependency> <dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> <version>3.0.3</version> </dependency>\"]},\"87\":{\"h\":\"\",\"t\":[\"spring: # 配置数据源 datasource: url: jdbc:mysql://192.168.117.117:3306/test?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai driver-class-name: com.mysql.cj.jdbc.Driver username: root password: 666666 type: com.zaxxer.hikari.HikariDataSource\"]},\"88\":{\"h\":\"3. 配置MyBatis\",\"t\":[\"mybatis: #指定mapper映射文件位置 mapper-locations: classpath:mapper/*.xml configuration: # 开启驼峰命名转换 map-underscore-to-camel-case: true # 开启 SQL 日志 log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\"]},\"89\":{\"h\":\"4. CRUD编写\",\"t\":[\"编写Bean\",\"@Data public class Account { private Integer id; private String name; private Integer balance; private Integer version; }\",\"编写Mapper\",\"public interface AccountMapper { Account getAccountById(@Param(\\\"id\\\") Integer id); }\",\"使用mybatisx插件，快速生成MapperXML\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\" > <mapper namespace=\\\"com.van.mybatis.mapper.AccountMapper\\\"> <select id=\\\"getAccountById\\\" resultType=\\\"com.van.mybatis.entity.Account\\\"> select * from account where id = #{id} </select> </mapper>\",\"✅添加包扫描注解：@MapperScan(\\\"com.van.mybatis.mapper\\\")\",\"@SpringBootApplication @MapperScan(\\\"com.van.mybatis.mapper\\\") public class MyBatisApplication { public static void main(String[] args) { SpringApplication.run(MyBatisApplication.class, args); } }\",\"测试CRUD\",\"@RestController public class AccountController { @Autowired private AccountMapper accountMapper; @GetMapping(\\\"/user/{id}\\\") public Account getAccount(@PathVariable(\\\"id\\\") Integer id){ return accountMapper.getAccountById(id); } }\",\"MyBatis 整合总结\",\"导入 mybatis-spring-boot-starter\",\"配置数据源信息\",\"配置mybatis的mapper接口扫描与xml映射文件扫描\",\"编写bean，mapper，生成xml，编写 sql 进行crud\",\"效果： \",\"所有sql写在xml中\",\"所有mybatis配置写在application.properties/yml 中\"]},\"90\":{\"h\":\"自动装配的原理\"},\"91\":{\"h\":\"核心启动器分析\",\"t\":[\"SpringBoot 整合 MyBatis 的核心在于 mybatis-spring-boot-starter，它的主要组成：\",\"mybatis-spring-boot-autoconfigure：自动配置核心\",\"mybatis-spring：MyBatis 与 Spring 的整合支持\",\"mybatis：MyBatis 核心库\",\"spring-boot-starter-jdbc：JDBC 支持\"]},\"92\":{\"h\":\"JDBC 场景的自动配置\",\"t\":[\"通过查看 autoconfigure 包下面的 imports 文件，可以看到支持 JDBC 的自动配置类\",\"org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration\",\"数据源的自动配置\",\"所有和数据源有关的配置都绑定在DataSourceProperties\",\"默认使用 HikariDataSource\",\"org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration\",\"给容器中放了JdbcTemplate操作数据库\",\"org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration\",\"org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration\",\"基于XA二阶提交协议的分布式事务数据源\",\"org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration\",\"支持事务\",\"可以看到：JDBC 具有的底层能力：数据源、JdbcTemplate、事务\"]},\"93\":{\"h\":\"MyBatis 的自动配置类：MyBatisAutoConfiguration\",\"t\":[\"查看imports文件中的自动配置类：\",\"org.mybatis.spring.boot.autoconfigure.MybatisLanguageDriverAutoConfiguration org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration\",\"重点关注：MybatisAutoConfiguration\",\"自动配置生效前提：\",\"DataSourceAutoConfiguration 和 MybatisLanguageDriverAutoConfiguration 必须先配置好，必须在数据源配置好之后才配置\",\"必须要有 SqlSessionFactory 和 SqlSessionFactoryBean 类\",\"MyBatis 的所有配置绑定在 MybatisProperties\",\"@ConditionalOnClass({ SqlSessionFactory.class, SqlSessionFactoryBean.class }) @ConditionalOnSingleCandidate(DataSource.class) @EnableConfigurationProperties(MybatisProperties.class) @AutoConfigureAfter({ DataSourceAutoConfiguration.class, MybatisLanguageDriverAutoConfiguration.class }) public class MybatisAutoConfiguration implements InitializingBean { }\",\"SqlSessionFactory是MyBatis底层核心支撑，有了SqlSessionFactory就可以创建SqlSession，进而使用SqlSession的CRUD操作\",\"创建SqlSessionFactory的步骤就是把连接数据库的数据源、MyBatis原生的配置文件、相关插件、IOC 容器中注册的MyBatis拦截器等组件一一应用到SqlSessionFactoryBean对象中，并调用其``getObject方法实际构建SqlSessionFactory`对象。\",\"@Bean @ConditionalOnMissingBean public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception { SqlSessionFactoryBean factory = new SqlSessionFactoryBean(); // 设置数据源 factory.setDataSource(dataSource); factory.setVfs(SpringBootVFS.class); // 设置MyBatis原生配置文件 if (StringUtils.hasText(this.properties.getConfigLocation())) { factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation())); } // 应用配置文件 applyConfiguration(factory); if (this.properties.getConfigurationProperties() != null) { factory.setConfigurationProperties(this.properties.getConfigurationProperties()); } // 设置插件 if (!ObjectUtils.isEmpty(this.interceptors)) { factory.setPlugins(this.interceptors); } // 更多set操作 // 实际构建SqlSessionFactory return factory.getObject(); }\",\"继续查看factory.getObject()方法\",\"getObject方法中会调用afterPropertiesSet方法，该方法会在进行一些前置判断后调用buildSqlSessionFactory方法，以构建实际的SqlSessionFactory对象。\",\"SqlSessionFactoryBean.java @Override public SqlSessionFactory getObject() throws Exception { if (this.sqlSessionFactory == null) { afterPropertiesSet(); } return this.sqlSessionFactory; } @Override public void afterPropertiesSet() throws Exception { // 一些前置判断... this.sqlSessionFactory = buildSqlSessionFactory(); }\",\"buildSqlSessionFactory 方法是真正创建SqlSessionFactory对象的方法，而且方法内部步骤非常多。\",\"大致经过以下阶段：\",\"基础配置初始化\",\"配置文件解析\",\"环境配置\",\"数据源设置\",\"组件注册\",\"类型别名注册\",\"类型处理器注册\",\"插件注册\",\"对象工厂配置\",\"语言驱动配置\",\"映射文件处理\",\"XML 映射文件加载\",\"注解配置处理\",\"SQL 语句解析\",\"其他功能配置\",\"缓存配置\",\"数据库厂商标识\",\"事务工厂配置\",\"buildSqlSessionFactory方法执行完毕，SqlSessionFactory被成功创建，MyBatis的核心初始化完毕\"]},\"94\":{\"h\":\"Mapper 接口的注册机制\",\"t\":[\"编写 mapper 接口一般都需要在启动类或者配置类上加上注解 @MapperScan(\\\"com.xxx.xxx.mapper\\\")用来扫描对应的 mapper 接口路径，从而为mapper接口创建代理对象\",\"@Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) @Documented @Import(MapperScannerRegistrar.class) @Repeatable(MapperScans.class) public @interface MapperScan { }\",\"这个注解导入了 MapperScannerRegistrar 这个类，而这个类实现了 ImportBeanDefinitionRegistrar 接口，会进行 SpringBean 的扫描注册\",\" @Override public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) { AnnotationAttributes mapperScanAttrs = AnnotationAttributes .fromMap(importingClassMetadata.getAnnotationAttributes(MapperScan.class.getName())); if (mapperScanAttrs != null) { registerBeanDefinitions(importingClassMetadata, mapperScanAttrs, registry, generateBaseBeanName(importingClassMetadata, 0)); } }\",\"registerBeanDefinitions 会扫描 @MapperScan 注解，提取注解的属性信息，并调用 registerBeanDefinitions 方法进行注册\",\"// MapperScannerRegistrar.java void registerBeanDefinitions(AnnotationMetadata annoMeta, AnnotationAttributes annoAttrs, BeanDefinitionRegistry registry, String beanName) { // 构建 MapperScannerConfigurer 的 BeanDefinition BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(MapperScannerConfigurer.class); // 设置各种属性... // 注册 MapperScannerConfigurer 的 BeanDefinition registry.registerBeanDefinition(beanName, builder.getBeanDefinition()); }\",\"registerBeanDefinitions 方法\",\"首先会构建 MapperScannerConfigurer 的 BeanDefinition\",\"然后设置各种属性\",\"最后注册 MapperScannerConfigurer 的 BeanDefinition\",\"而MapperScannerConfigurer 类是实现了BeanDefinitionRegistryPostProcessor Bean工厂的后置处理器， Bean 实例化之前执行\",\"public class MapperScannerConfigurer implements BeanDefinitionRegistryPostProcessor, InitializingBean, ApplicationContextAware, BeanNameAware { }\",\"所以后续 MapperScannerConfigurer的 postProcessBeanDefinitionRegistry 方法会在 Spring 容器的 refresh 方法中的 invokeBeanFactoryPostProcessors方法进行回调执行\",\"这个方法的逻辑主要就是创建 ClassPathMapperScanner 扫描器，然后执行扫描工作\",\"// MapperScannerConfigurer.java public class MapperScannerConfigurer implements BeanDefinitionRegistryPostProcessor { @Override public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) { // 创建扫描器 ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry); // 配置扫描器... // 执行扫描 scanner.scan( StringUtils.tokenizeToStringArray(this.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS)); } }\",\"扫描器就会扫描 basePackages 然后进行注册\",\"将 beanClass 从 Mapper 接口改为 MapperFactoryBean\",\"将原始的 Mapper 接口类型作为构造参数\",\"配置其他属性...\",\"// ClassPathMapperScanner.java public class ClassPathMapperScanner extends ClassPathBeanDefinitionScanner { @Override public Set<BeanDefinitionHolder> doScan(String... basePackages) { // 调用父类扫描获取 BeanDefinitionHolder Set<BeanDefinitionHolder> beanDefinitions = super.doScan(basePackages); if (!beanDefinitions.isEmpty()) { // 处理扫描到的 BeanDefinition processBeanDefinitions(beanDefinitions); } return beanDefinitions; } private void processBeanDefinitions(Set<BeanDefinitionHolder> beanDefinitions) { for (BeanDefinitionHolder holder : beanDefinitions) { GenericBeanDefinition definition = (GenericBeanDefinition) holder.getBeanDefinition(); // 重要: 将 beanClass 从 Mapper 接口改为 MapperFactoryBean definition.setBeanClass(MapperFactoryBean.class); // 将原始的 Mapper 接口类型作为构造参数 definition.getConstructorArgumentValues() .addGenericArgumentValue(definition.getBeanClassName()); // 配置其他属性... } } }\",\"而 MapperFactoryBean 实现了 FactoryBean，是一个工厂 Bean\",\"它的 getObject() 方法返回的才是真正放入到 Spring 容器的对象\",\"// MapperFactoryBean.java public class MapperFactoryBean<T> extends SqlSessionDaoSupport implements FactoryBean<T> { private Class<T> mapperInterface; // Spring 会调用这个方法来获取实际的 bean 实例 @Override public T getObject() throws Exception { // 获取 SqlSession 并创建代理对象 return getSqlSession().getMapper(this.mapperInterface); } }\",\"后续将在 SqlSession 中获取 Mapper 时创建代理对象\",\"// DefaultSqlSession.java public class DefaultSqlSession implements SqlSession { @Override public <T> T getMapper(Class<T> type) { return configuration.getMapper(type, this); } } // Configuration.java public class Configuration { public <T> T getMapper(Class<T> type, SqlSession sqlSession) { return mapperRegistry.getMapper(type, sqlSession); } } // MapperRegistry.java public class MapperRegistry { @SuppressWarnings(\\\"unchecked\\\") public <T> T getMapper(Class<T> type, SqlSession sqlSession) { final MapperProxyFactory<T> mapperProxyFactory = (MapperProxyFactory<T>) knownMappers.get(type); if (mapperProxyFactory == null) { throw new BindingException(\\\"Type \\\" + type + \\\" is not known to the MapperRegistry.\\\"); } try { // 在这里创建代理对象 return mapperProxyFactory.newInstance(sqlSession); } catch (Exception e) { throw new BindingException(\\\"Error getting mapper instance. Cause: \\\" + e, e); } } }\",\"流程图：\"]},\"95\":{\"c\":[\"SpringBoot\",\"MyBatis\"]},\"96\":{\"h\":\"SpringBoot 整合日志系统\"},\"97\":{\"h\":\"\",\"t\":[\"SpringBoot 默认使用 Logback 作为日志框架的具体实现，使用 SLF4J 作为日志门面，实现了日志框架的解耦，并且提供开箱即用的默认配置\",\"同时也支持对其他日志框架的配置和扩展使用\",\"那么，SpringBoot 是怎么把日志默认配置好的？\",\"当我们引入某些 starter 场景启动器依赖时，例如spring-boot-starter-web 时，都会导入一个核心场景启动器spring-boot-starter\",\"核心场景引入了日志的所用功能spring-boot-starter-logging\",\"默认使用了logback + slf4j 组合作为默认底层日志\",\"日志是系统一启动就要用，xxxAutoConfiguration 是系统启动好了以后放好的组件，后来用的。\",\"所以日志是利用监听器机制配置好的。ApplicationListener\",\"日志所有的配置都可以通过修改配置文件实现。以logging开始的所有配置\"]},\"98\":{\"h\":\"SpringBoot 常见日志配置\"},\"99\":{\"h\":\"日志级别\",\"t\":[\"在application.properties/yaml中配置logging.level.<logger-name>=<level>指定日志级别\",\"level可取值范围：TRACE, DEBUG, INFO, WARN, ERROR, FATAL, or OFF，定义在 LogLevel类中\",\"root 的logger-name叫r oot，可以配置logging.level.root=warn，代表所有未指定日志级别都使用 root 的 warn 级别\",\"logging.level.root=warn logging.level.org.springframework.web=debug logging.level.org.hibernate=error\"]},\"100\":{\"h\":\"日志分组\",\"t\":[\"将相关的logger分组在一起，统一配置。SpringBoot 也支持。比如：Tomcat 相关的日志统一设置\",\"logging.group.tomcat=org.apache.catalina,org.apache.coyote,org.apache.tomcat logging.level.tomcat=trace\",\"SpringBoot 预定义两个组\"]},\"101\":{\"h\":\"文件输出\",\"t\":[\"SpringBoot 默认只把日志写在控制台，如果想额外记录到文件，可以在application.properties中添加logging.file.name\",\"一般不使用logging.file.path ，因为logging.file.name 即可以写文件名，也可以加指定路径\",\"logging.file.name=logs/app.log\"]},\"102\":{\"h\":\"最佳实践\",\"t\":[\"导入任何第三方框架，先排除它的日志包，因为Boot底层控制好了日志\",\"修改 application.properties 配置文件，就可以调整日志的所有行为。如果不够，可以编写日志框架自己的配置文件放在类路径下就行，比如logback-spring.xml，log4j2-spring.xml\",\"如需对接专业日志系统，也只需要把 logback 记录的日志灌倒 kafka之类的中间件，这和SpringBoot没关系，都是日志框架自己的配置，修改配置文件即可\"]},\"103\":{\"h\":\"logback-spring.xml 配置\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <!-- Configuration 节点 scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 scanPeriod：设置监测配置文件是否有修改的时间间隔，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --> <configuration scan=\\\"true\\\" scanPeriod=\\\"60 seconds\\\" debug=\\\"false\\\"> <!-- 定义全局变量 --> <springProperty scope=\\\"context\\\" name=\\\"APP_NAME\\\" source=\\\"spring.application.name\\\" defaultValue=\\\"logging-service\\\"/> <springProperty scope=\\\"context\\\" name=\\\"ACTIVE_PROFILE\\\" source=\\\"spring.profiles.active\\\" defaultValue=\\\"dev\\\"/> <!-- 定义日志存放路径 --> <property name=\\\"LOG_PATH\\\" value=\\\"logs/${APP_NAME}\\\"/> <!-- 定义日志输出格式 --> <property name=\\\"CONSOLE_LOG_PATTERN\\\" value=\\\"%red(%d{yyyy-MM-dd HH:mm:ss.SSS}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{50}) %cyan(%X{X-B3-TraceId:-}) - %msg%n\\\"/> <property name=\\\"FILE_LOG_PATTERN\\\" value=\\\"%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} %X{X-B3-TraceId:-} - %msg%n\\\"/> <!-- 控制台输出 --> <appender name=\\\"CONSOLE\\\" class=\\\"ch.qos.logback.core.ConsoleAppender\\\"> <encoder> <pattern>${CONSOLE_LOG_PATTERN}</pattern> <charset>UTF-8</charset> </encoder> </appender> <!-- 所有日志文件输出 --> <appender name=\\\"FILE_ALL\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <!-- 设置文件名 --> <file>${LOG_PATH}/all.log</file> <!-- 设置滚动策略 --> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\\"> <!-- 日志文件输出的文件名:根据日期命名,如all.2023-12-31.0.log --> <fileNamePattern>${LOG_PATH}/all.%d{yyyy-MM-dd}.%i.log</fileNamePattern> <!-- 单个日志文件最大大小 --> <maxFileSize>10MB</maxFileSize> <!-- 日志文件保留天数 --> <maxHistory>30</maxHistory> <!-- 所有日志文件的总大小上限 --> <totalSizeCap>10GB</totalSizeCap> </rollingPolicy> <encoder> <pattern>${FILE_LOG_PATTERN}</pattern> <charset>UTF-8</charset> </encoder> </appender> <!-- 错误日志文件输出 --> <appender name=\\\"FILE_ERROR\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <!-- 只记录ERROR级别日志 --> <filter class=\\\"ch.qos.logback.classic.filter.ThresholdFilter\\\"> <level>ERROR</level> </filter> <file>${LOG_PATH}/error.log</file> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\\"> <fileNamePattern>${LOG_PATH}/error.%d{yyyy-MM-dd}.%i.log</fileNamePattern> <maxFileSize>10MB</maxFileSize> <maxHistory>30</maxHistory> <totalSizeCap>5GB</totalSizeCap> </rollingPolicy> <encoder> <pattern>${FILE_LOG_PATTERN}</pattern> <charset>UTF-8</charset> </encoder> </appender> <!-- 异步日志配置 --> <appender name=\\\"ASYNC_ALL\\\" class=\\\"ch.qos.logback.classic.AsyncAppender\\\"> <!-- 不丢失日志，默认队列满了丢弃TRACE,DEBUG,INFO级别的日志 --> <discardingThreshold>0</discardingThreshold> <!-- 队列大小 --> <queueSize>1024</queueSize> <!-- 队列满时是否阻塞，默认为false --> <neverBlock>false</neverBlock> <!-- 引用前面定义的FILE_ALL appender --> <appender-ref ref=\\\"FILE_ALL\\\"/> </appender> <appender name=\\\"ASYNC_ERROR\\\" class=\\\"ch.qos.logback.classic.AsyncAppender\\\"> <discardingThreshold>0</discardingThreshold> <queueSize>512</queueSize> <appender-ref ref=\\\"FILE_ERROR\\\"/> </appender> <!-- SQL日志配置 --> <logger name=\\\"org.hibernate.SQL\\\" level=\\\"DEBUG\\\" additivity=\\\"false\\\"> <appender-ref ref=\\\"CONSOLE\\\"/> </logger> <!-- 开发环境配置 --> <springProfile name=\\\"dev\\\"> <!-- 应用程序包路径 --> <logger name=\\\"com.van.logging\\\" level=\\\"DEBUG\\\"/> <!-- 根日志级别 --> <root level=\\\"INFO\\\"> <appender-ref ref=\\\"CONSOLE\\\"/> <appender-ref ref=\\\"ASYNC_ALL\\\"/> <appender-ref ref=\\\"ASYNC_ERROR\\\"/> </root> </springProfile> <!-- 测试环境配置 --> <springProfile name=\\\"test\\\"> <logger name=\\\"com.van.logging\\\" level=\\\"INFO\\\"/> <root level=\\\"INFO\\\"> <appender-ref ref=\\\"CONSOLE\\\"/> <appender-ref ref=\\\"ASYNC_ALL\\\"/> <appender-ref ref=\\\"ASYNC_ERROR\\\"/> </root> </springProfile> <!-- 生产环境配置 --> <springProfile name=\\\"prod\\\"> <logger name=\\\"com.van.logging\\\" level=\\\"INFO\\\"/> <root level=\\\"WARN\\\"> <!-- 生产环境关闭控制台输出 --> <appender-ref ref=\\\"ASYNC_ALL\\\"/> <appender-ref ref=\\\"ASYNC_ERROR\\\"/> </root> </springProfile> </configuration>\"]},\"104\":{\"h\":\"核心实现原理\",\"t\":[\"首先我们看一张典型的日志系统架构图，可以看到：\",\"使用 SLF4J 作为日志门面，实现了日志框架的解耦，底层支持不同的具体日志框架\",\"自动配置：提供默认已经配置好的 spring-boot-starter-logging\",\"利用监听器机制实现日志系统的初始化\",\"简易实现步骤：\",\"日志系统自动配置类\",\"@Configuration(proxyBeanMethods = false) @ConditionalOnClass(LoggerContext.class) public class LogbackAutoConfiguration { @Bean @ConditionalOnMissingBean(LoggingSystem.class) public LoggingSystem loggingSystem() { // 创建默认的 Logback 日志系统 return new LogbackLoggingSystem(this.getClass().getClassLoader()); } }\",\"日志系统初始化监听器\",\"ublic class LoggingApplicationListener implements ApplicationListener<ApplicationEvent> { @Override public void onApplicationEvent(ApplicationEvent event) { if (event instanceof ApplicationStartingEvent) { // 初始化阶段：配置日志系统 onApplicationStartingEvent((ApplicationStartingEvent) event); } else if (event instanceof ApplicationEnvironmentPreparedEvent) { // 环境准备阶段：加载日志配置 onApplicationEnvironmentPreparedEvent((ApplicationEnvironmentPreparedEvent) event); } } private void onApplicationStartingEvent(ApplicationStartingEvent event) { // 初始化日志系统 LoggingSystem system = LoggingSystem.get(event.getSpringApplication().getClassLoader()); // 设置初始化日志级别 initializeEarlyLoggingLevel(system); } private void onApplicationEnvironmentPreparedEvent(ApplicationEnvironmentPreparedEvent event) { // 加载日志配置 Environment environment = event.getEnvironment(); // 设置日志配置路径 systemProperties.put(\\\"logging.config\\\", environment.getProperty(\\\"logging.config\\\", \\\"classpath:logback-spring.xml\\\")); } }\",\"自定义日志配置\",\"@Configuration public class CustomLoggingConfig { @Bean public LoggingSystemProperties loggingSystemProperties(Environment environment) { LoggingSystemProperties properties = new LoggingSystemProperties(environment); // 设置自定义日志属性 properties.setPattern(\\\"%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n\\\"); properties.setFile(\\\"logs/application.log\\\"); properties.setMaxFileSize(\\\"100MB\\\"); properties.setTotalSizeCAP(\\\"1GB\\\"); return properties; } }\",\"参考文章：\",\"https://www.pdai.tech/md/spring/springboot-data-logback.html\",\"https://cloud.tencent.com/developer/article/2322889\"]},\"105\":{\"c\":[\"SpringBoot\"]},\"106\":{\"c\":[\"SpringBoot\",\"日志\"]},\"107\":{\"h\":\"SpringBoot 是如何整合 Web MVC的\",\"t\":[\"Web 开发是我们平时开发中最常遇到的场景，当SpringBoot 项目整合 WebMVC 后，SpringBoot 自动装配到底自动配置了哪些规则呢？\"]},\"108\":{\"h\":\"自动配置\",\"t\":[\"导入依赖：\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency>\",\"每当引入一个场景启动器都会引入\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> </dependency>\",\"而spring-boot-starter中会引入自动配置的依赖autoconfigure\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-autoconfigure</artifactId> </dependency>\",\"@EnableAutoConfiguration注解使用 @Import(AutoConfigurationImportSelector.class)批量导入组件\",\"所以它会加载类路径下的META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports文件中配置的组件\",\"以下是关于SpringMVC的\",\"org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration ====以下是响应式web场景和现在的没关系====== org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration org.springframework.boot.autoconfigure.web.reactive.ReactiveMultipartAutoConfiguration org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration org.springframework.boot.autoconfigure.web.reactive.WebSessionIdResolverAutoConfiguration org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration ================以上没关系================= org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration\"]},\"109\":{\"h\":\"\",\"t\":[\"SpringBoot 默认配置好了 SpringMVC 常见的所有特性。而实现自动配置的关键类就是 WebMvcAutoConfiguration\"]},\"110\":{\"h\":\"生效条件\",\"t\":[\"先看这个类上面的注解：\",\"// 当前自动配置会在以下几个配置类解析后再处理 @AutoConfiguration(after = { DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class, ValidationAutoConfiguration.class }) //如果是web应用就生效，类型SERVLET、REACTIVE 响应式web @ConditionalOnWebApplication(type = Type.SERVLET) //当前运行环境必须有Servlet类、DispatcherServlet类、WebMvcConfigurer类 @ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class }) //容器中没有这个Bean，才生效。默认就是没有 @ConditionalOnMissingBean(WebMvcConfigurationSupport.class) // 优先级 @AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10) @ImportRuntimeHints(WebResourcesRuntimeHints.class) public class WebMvcAutoConfiguration { }\",\"由以上源码可知，WebMvcAutoConfiguration 自动配置类的生效需要满足以下条件：\",\"当前环境必须是WebMvc(Servlet)环境。引入spring-boot-starter-web依赖后，该条件默认生效。\",\"当前类路径下必须有Servlet类、DispatcherServlet类、WebMvcConfigurer类。\",\"项目中没有自定义的WebMvcConfigurationSupport类或子类，WebMvcAutoConfiguration才会生效。\",\"DispatcherServletAutoConfiguration、TaskExecutionAutoConfiguration、ValidationAutoConfiguration会先于WebMvcAutoConfiguration进行解析。\",\"而 DispatcherServletAutoConfiguration 是和前端控制器的自动配置有关\",\"@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE) @AutoConfiguration(after = ServletWebServerFactoryAutoConfiguration.class) @ConditionalOnWebApplication(type = Type.SERVLET) @ConditionalOnClass(DispatcherServlet.class) public class DispatcherServletAutoConfiguration { }\",\"可以看到，DispatcherServletAutoConfiguration 生效的前提是 ServletWebServerFactoryAutoConfiguration 先生效。\",\"所以大体上可以梳理出WebMVC场景的自动装配环节：Servlet容器的装配→DispatcherServlet的装配→WebMVC 核心组件的装配\"]},\"111\":{\"h\":\"核心类：WebMvcAutoConfigurationAdapter\",\"t\":[\"WebMvc的装配在 WebMvcAutoConfiguration中完成，核心是其中的两个内部类WebMvcAutoConfigurationAdapter和EnableWebMvcConfiguration\",\" @Configuration(proxyBeanMethods = false) @Import(EnableWebMvcConfiguration.class) @EnableConfigurationProperties({ WebMvcProperties.class, WebProperties.class }) @Order(0) public static class WebMvcAutoConfigurationAdapter implements WebMvcConfigurer, ServletContextAware { }\",\"首先这个类会导入 EnableWebMvcConfiguration 这个类\",\"同时这个类绑定了两个属性类：WebMvcProperties.class, WebProperties.class \",\"WebMvcProperties.class 配置对应：spring.mvc\",\"WebProperties.class 配置对应：spring.web\",\"其次这个类是实现了 WebMvcConfigurer 接口，重写了大量方法，并注册了一些新的Bean。这个接口定义了 MVC 底层的很多组件\",\"所以接下来我们重点关注 WebMvcAutoConfigurationAdapter 这个类到底注册了哪些组件配置了哪些 MVC的属性\"]},\"112\":{\"h\":\"✅1. 配置消息转换器（MessageConverter）\",\"t\":[\" /** * 1. 消息转换器配置 * 用于配置 HTTP 请求和响应的消息转换 * 默认支持：JSON, XML, String, Form 等格式 */ @Override public void configureMessageConverters(List<HttpMessageConverter<?>> converters) { this.messageConvertersProvider .ifAvailable((customConverters) -> converters.addAll(customConverters.getConverters())); }\",\"重写configureMessageConverters方法，目的是配置默认的消息转换器HttpMessageConverter\",\"消息转换器的作用对象是@RequestBody和@ResponseBody注解标注的Controller方法，分别完成请求体到参数对象的转换以及响应对象到响应体的转换。\",\"SpringBoot 默认自动配置了多个常用的消息转换器：\",\"MappingJackson2HttpMessageConverter: 处理 JSON\",\"StringHttpMessageConverter: 处理字符串\",\"ByteArrayHttpMessageConverter: 处理字节数组\",\"ResourceHttpMessageConverter: 处理静态资源\"]},\"113\":{\"h\":\"2. 异步请求处理\",\"t\":[\" /** * 2. 异步请求处理配置 * 配置异步请求的超时时间和任务执行器 */ @Override public void configureAsyncSupport(AsyncSupportConfigurer configurer) { // 设置默认的异步任务执行器 if (this.beanFactory.containsBean(TaskExecutionAutoConfiguration.APPLICATION_TASK_EXECUTOR_BEAN_NAME)) { Object taskExecutor = this.beanFactory .getBean(TaskExecutionAutoConfiguration.APPLICATION_TASK_EXECUTOR_BEAN_NAME); if (taskExecutor instanceof AsyncTaskExecutor asyncTaskExecutor) { configurer.setTaskExecutor(asyncTaskExecutor); } } // 设置异步请求超时时间 Duration timeout = this.mvcProperties.getAsync().getRequestTimeout(); if (timeout != null) { configurer.setDefaultTimeout(timeout.toMillis()); } }\",\"重写configureAsyncSupport方法，目的是配置异步请求的支持。\",\"SpringBoot在底层已经默认准备好了一个异步线程池，支持Controller层使用异步处理的方式接收请求。\",\"线程池在上文提到的TaskExecutionAutoConfiguration自动配置类中创建，bean名称是applicationTaskExecutor。\"]},\"114\":{\"h\":\"3. 内容协商配置\",\"t\":[\" /** * 3. 内容协商配置 * 配置客户端和服务器之间的内容协商策略 * 支持基于请求参数、请求头的内容协商 */ @Override public void configureContentNegotiation(ContentNegotiationConfigurer configurer) { WebMvcProperties.Contentnegotiation contentnegotiation = this.mvcProperties.getContentnegotiation(); // 是否启用参数方式的内容协商 configurer.favorParameter(contentnegotiation.isFavorParameter()); // 设置内容协商的参数名 if (contentnegotiation.getParameterName() != null) { configurer.parameterName(contentnegotiation.getParameterName()); } // 配置媒体类型映射 Map<String, MediaType> mediaTypes = this.mvcProperties.getContentnegotiation().getMediaTypes(); mediaTypes.forEach(configurer::mediaType); }\"]},\"115\":{\"h\":\"✅4. 静态资源处理配置\",\"t\":[\" /** * 4. 静态资源处理配置 * 配置静态资源的访问路径和缓存策略 */ @Override public void addResourceHandlers(ResourceHandlerRegistry registry) { if (!this.resourceProperties.isAddMappings()) { logger.debug(\\\"Default resource handling disabled\\\"); return; } // 配置 webjars 资源路径 addResourceHandler(registry, this.mvcProperties.getWebjarsPathPattern(), \\\"classpath:/META-INF/resources/webjars/\\\"); // 配置静态资源路径 addResourceHandler(registry, this.mvcProperties.getStaticPathPattern(), (registration) -> { registration.addResourceLocations(this.resourceProperties.getStaticLocations()); if (this.servletContext != null) { ServletContextResource resource = new ServletContextResource(this.servletContext, SERVLET_LOCATION); registration.addResourceLocations(resource); } }); }\",\"默认的静态资源路径：\",\"classpath:/static/\",\"classpath:/public/\",\"classpath:/resources/\",\"classpath:/META-INF/resources/\",\"默认的资源路径匹配：/**\"]},\"116\":{\"h\":\"5. 路径匹配配置\",\"t\":[\" /** * 5. 路径匹配配置 * 配置 URL 路径的匹配策略 * Spring 6.0 后默认使用 PathPatternParser，但也支持传统的 AntPathMatcher */ @Override public void configurePathMatch(PathMatchConfigurer configurer) { if (this.mvcProperties.getPathmatch() .getMatchingStrategy() == WebMvcProperties.MatchingStrategy.ANT_PATH_MATCHER) { configurer.setPathMatcher(new AntPathMatcher()); this.dispatcherServletPath.ifAvailable((dispatcherPath) -> { String servletUrlMapping = dispatcherPath.getServletUrlMapping(); if (servletUrlMapping.equals(\\\"/\\\") && singleDispatcherServlet()) { UrlPathHelper urlPathHelper = new UrlPathHelper(); urlPathHelper.setAlwaysUseFullPath(true); configurer.setUrlPathHelper(urlPathHelper); } }); } }\",\"Spring Boot 3.x 默认使用 PathPatternParser\",\"支持配置使用传统的 AntPathMatcher\"]},\"117\":{\"h\":\"6. 配置RequestContextHolder支持\",\"t\":[\"@Bean @ConditionalOnMissingBean({RequestContextListener.class, RequestContextFilter.class}) @ConditionalOnMissingFilterBean(RequestContextFilter.class) public static RequestContextFilter requestContextFilter() { return new OrderedRequestContextFilter(); }\",\"在实际开发中，我们可能会这样获取HttpServletRequest对象：\",\"HttpServletRequest request = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();\"]},\"118\":{\"h\":\"核心类：EnableWebMvcConfiguration\"},\"119\":{\"h\":\"✅1. 注册 HandlerMapping\",\"t\":[\" @Override protected RequestMappingHandlerMapping createRequestMappingHandlerMapping() { if (this.mvcRegistrations != null) { RequestMappingHandlerMapping mapping = this.mvcRegistrations.getRequestMappingHandlerMapping(); if (mapping != null) { return mapping; } } return super.createRequestMappingHandlerMapping(); }\",\"HandlerMapping 处理器映射器的作用是根据请求URL去匹配查找能处理的Handler。目前主流的WebMvc方式都是@RequestMapping注解定义的 Handler请求处理器，因此这里直接默认注册了一个RequestMappingHandlerMapping\",\"默认行为：\",\"负责建立请求 URL 与处理器方法的映射关系\",\"处理 @RequestMapping 注解的解析\",\"提供 URL 路径匹配的规则\"]},\"120\":{\"h\":\"✅2. 注册HandlerAdapter\",\"t\":[\" /** * 请求处理器适配器创建 * 负责执行处理器方法，处理参数绑定、返回值处理等 */ @Override protected RequestMappingHandlerAdapter createRequestMappingHandlerAdapter() { if (this.mvcRegistrations != null) { RequestMappingHandlerAdapter adapter = this.mvcRegistrations.getRequestMappingHandlerAdapter(); if (adapter != null) { return adapter; } } return super.createRequestMappingHandlerAdapter(); }\",\"处理器适配器HandlerAdapter会拿到HandlerMapping匹配成功的Handler，并用合适的方式执行Handler的逻辑。\",\"使用@RequestMapping注解定义的Handler，其底层负责执行的适配器就是RequestMappingHandlerAdapter。\",\"默认行为：\",\"负责执行处理器方法\",\"处理方法参数的解析和绑定\",\"处理方法返回值的转换\"]},\"121\":{\"h\":\"3. 欢迎页配置\",\"t\":[\"欢迎页功能支持（模板引擎目录、静态资源目录放index.html），项目访问/ 就默认展示这个页面\",\" @Bean public WelcomePageHandlerMapping welcomePageHandlerMapping( ApplicationContext applicationContext, FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider) { return createWelcomePageHandlerMapping(...); }\"]},\"122\":{\"h\":\"4. 配置国际化支持\",\"t\":[\" @Override @Bean @ConditionalOnMissingBean(name = DispatcherServlet.LOCALE_RESOLVER_BEAN_NAME) public LocaleResolver localeResolver() { if (this.webProperties.getLocaleResolver() == WebProperties.LocaleResolver.FIXED) { return new FixedLocaleResolver(this.webProperties.getLocale()); } AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver(); localeResolver.setDefaultLocale(this.webProperties.getLocale()); return localeResolver; }\",\"LocaleResolver是SpringWebMvc针对国际化支持的核心接口，作用解析请求中的语言标志参数或者请求头中的Accept-Language参数，并将解析的参数存放到指定的位置中，通常配合LocaleChangeInterceptor使用。\",\"注意，由该方法的注解@ConditionalOnProperty(prefix = “spring.mvc”, name = “locale”)可知，只有配置了spring.mvc.locale配置项后，LocaleResolver才会被创建。\"]},\"123\":{\"h\":\"✅5. 默认的异常解析器\",\"t\":[\" @Override protected ExceptionHandlerExceptionResolver createExceptionHandlerExceptionResolver() { if (this.mvcRegistrations != null) { ExceptionHandlerExceptionResolver resolver = this.mvcRegistrations .getExceptionHandlerExceptionResolver(); if (resolver != null) { return resolver; } } return super.createExceptionHandlerExceptionResolver(); }\"]},\"124\":{\"h\":\"条件注解：实现 SpringBoot 自动配置的关键\"},\"125\":{\"h\":\"1. 常见的条件注解\"},\"126\":{\"h\":\"@ConditionalOnProperty\",\"t\":[\"用于根据配置文件中的属性值来决定是否创建 Bean\",\"@Configuration public class OsConfiguration { /** * 当配置文件中 app.os.type=macos 时才创建这个 Bean * matchIfMissing = true 表示如果属性不存在，则条件为 true * havingValue 指定属性必须等于的值 */ @Bean @ConditionalOnProperty(prefix = \\\"app.os\\\",name=\\\"type\\\",havingValue = \\\"macos\\\",matchIfMissing = true) public MacOs macOs() { return new MacOs(); } /** * 根据条件创建LinuxOs bean * 该方法仅在配置属性'app.os.type'的值为'linux'时触发 * @return LinuxOs实例 */ @Bean @ConditionalOnProperty(prefix = \\\"app.os\\\",name=\\\"type\\\",havingValue = \\\"linux\\\") public LinuxOs linuxOs() { return new LinuxOs(); } }\",\"当 application.yml 配置文件中：\",\"app: os: type: linux\",\" ConfigurableApplicationContext applicationContext = SpringApplication.run(SampleSpringbootApplication.class, args); LinuxOs linuxOs = applicationContext.getBean(LinuxOs.class); System.out.println(\\\"linuxOs = \\\" + linuxOs);\",\"输出结果：\",\"linuxOs = com.van.boot.condition.LinuxOs@52bf7bf6\",\"当 application.yml 配置文件中：\",\"app: os: type: macos\",\" MacOs macOs = applicationContext.getBean(MacOs.class); System.out.println(\\\"macOs = \\\" + macOs);\",\"输出结果：\",\"macOs = com.van.boot.condition.MacOs@261db982\",\"当 application.yml 配置文件中不配置 app.os.type属性时，那么注解上设置 matchIfMissing = true 表示如果属性不存在，则条件为 true\",\"因为macOs 方法上@ConditionalOnProperty设置了该属性值为 true，所以该注解生效\",\" @Bean @ConditionalOnProperty(prefix = \\\"app.os\\\",name=\\\"type\\\",havingValue = \\\"macos\\\",matchIfMissing = true) public MacOs macOs() { return new MacOs(); }\"]},\"127\":{\"h\":\"@ConditonalOnClass\",\"t\":[\"当类路径下存在指定的类时，才会创建 Bean。这在处理可选依赖时特别有用。\",\"类路径（Classpath）的概念\",\"类路径指的是 JVM 或 Java 编译器寻找类或其他资源文件的路径。它包括：\",\"当前项目的编译输出目录（例如 target/classes）\",\"项目依赖的所有 JAR 包（包括直接依赖和传递依赖）\",\"JDK 的核心类库\",\"@Configuration public class SwaggerConfiguration { /** * 只有当项目中存在 OpenAPI 相关类时才创建 Swagger 配置 * 这样可以让 Swagger 相关依赖变成可选的 */ @Bean @ConditionalOnClass(name = \\\"io.swagger.v3.oas.models.OpenAPI\\\") public OpenAPI openAPI() { return new OpenAPI() .info(new Info() .title(\\\"API Documentation\\\") .version(\\\"1.0\\\")); } }\",\"使用建议\",\"推荐：使用 name 属性（运行时检查） @ConditionalOnClass(name = \\\"com.mysql.cj.jdbc.Driver\\\")\",\"不推荐：直接使用类引用（编译时需要类） @ConditionalOnClass(com.mysql.cj.jdbc.Driver.class)\"]},\"128\":{\"h\":\"@ConditionalOnMissingBean\",\"t\":[\"当容器中不存在指定的 Bean 时才创建。这对于提供默认实现但允许用户覆盖很有用。\",\"@Configuration public class ServiceConfiguration { /** * 提供默认的用户服务实现 * 只有当容器中没有 UserService 类型的 Bean 时才创建 * 这允许其他模块提供自定义实现来覆盖默认行为 */ @Bean @ConditionalOnMissingBean public UserService defaultUserService() { return new DefaultUserService(); } /** * 提供默认的缓存服务实现 * 如果用户没有自定义实现，就使用这个默认实现 */ @Bean @ConditionalOnMissingBean(CacheService.class) public CacheService defaultCacheService() { return new SimpleCacheService(); } }\"]},\"129\":{\"h\":\"@ConditionalOnExpression\",\"t\":[\"使用 SpEL 表达式来决定是否创建 Bean\",\"@Configuration public class MonitoringConfiguration { /** * 使用 SpEL 表达式组合多个条件 * 当处于开发环境且启用了监控时才创建监控 Bean */ @Bean @ConditionalOnExpression(\\\"${spring.profiles.active=='dev' and ${monitoring.enabled:true}}\\\") public PerformanceMonitor performanceMonitor() { return new PerformanceMonitor(); } }\"]},\"130\":{\"h\":\"2. 如何实现自定义条件注解\",\"t\":[\"SpringBoot 条件注解的实现是基于以下核心组件：\",\"Condition 接口：所有条件注解都会关联一个实现了Condition 接口的类\",\"public interface Condition { boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata); }\",\"例如：@ConditionalOnProperty注解关联了OnPropertyCondition类 @ConditionalOnClass 注解关联了OnClassCondition类 等等\",\"@Retention(RetentionPolicy.RUNTIME) @Target({ ElementType.TYPE, ElementType.METHOD }) @Documented @Conditional(OnPropertyCondition.class) public @interface ConditionalOnProperty { } @Target({ ElementType.TYPE, ElementType.METHOD }) @Retention(RetentionPolicy.RUNTIME) @Documented @Conditional(OnClassCondition.class) public @interface ConditionalOnClass { }\",\"ConditionContext：提供条件评估时需要的上下文信息\",\"下面我们实现一个自定义条件注解：@ConditionalOnTimeRange\",\"作用是：只在指定的时间范围内创建 Bean\",\"首先，我们创建一个自定义的条件注解\",\"/** * 自定义条件注解：只在指定的时间范围内创建 Bean */ @Target({ElementType.TYPE, ElementType.METHOD}) @Retention(RetentionPolicy.RUNTIME) @Conditional(TimeRangeCondition.class) public @interface ConditionalOnTimeRange { String start() default \\\"09:00\\\"; // 开始时间 String end() default \\\"18:00\\\"; // 结束时间 }\",\"根据前面知道，自定义条件注解需要关联一个实现了@Condition 接口的实现类\",\"所以我们还创建一个实现类 TimeRangeCondition\",\"/** * 条件注解的具体实现类 */ public class TimeRangeCondition implements Condition { @Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) { // 获取注解属性 Map<String, Object> attributes = metadata.getAnnotationAttributes( ConditionalOnTimeRange.class.getName()); String startTime = (String) attributes.get(\\\"start\\\"); String endTime = (String) attributes.get(\\\"end\\\"); // 获取当前时间 LocalTime now = LocalTime.now(); LocalTime start = LocalTime.parse(startTime); LocalTime end = LocalTime.parse(endTime); // 判断当前时间是否在范围内 return !now.isBefore(start) && !now.isAfter(end); } }\",\"最后在配置类中使用\",\"@Configuration public class WorkTimeConfiguration { /** * 只在工作时间内创建这个 Bean */ @Bean @ConditionalOnTimeRange(start = \\\"09:00\\\", end = \\\"18:00\\\") public WorkTimeService workTimeService() { return new WorkTimeService(); } }\",\"进行验证：\",\"String[] beanNamesForType = applicationContext.getBeanNamesForType(WorkTimeService.class); for (String beanName : beanNamesForType) { System.out.println(beanName); }\",\"实现自定义条件注解功能的步骤有：\",\"创建自定义条件注解\",\"在该注解上添加@Conditional注解，并关联 Condition 接口实现类\",\"在该实现类实现具体条件逻辑\",\"在配置类中使用该自定义条件注解\"]},\"131\":{\"h\":\"3. 条件注解的实现原理\",\"t\":[\"理解条件注解的实现原理主要是要知道 SpringBoot 条件注解的生效过程，即 SpringBoot 是如何让它内置的条件注解以及我们自定义的条件注解生效的\",\"条件注解处理入口：\",\"Spring 容器启动时，通过 ConfigurationClassPostProcessor 开始处理\",\"扫描配置类时会检查条件注解\",\"核心组件：\",\"Condition 接口：所有条件的顶层接口\",\"SpringBootCondition：Spring Boot 提供的条件基类\",\"具体条件实现：如 OnClassCondition、OnBeanCondition 等\",\"ConditionContext：提供条件评估所需的上下文信息\",\"执行流程：\",\"首先获取所有条件注解\",\"依次执行每个条件的 matches 方法\",\"根据条件评估结果决定是否创建 Bean\"]},\"132\":{\"h\":\"条件注解处理流程图：\"},\"133\":{\"h\":\"条件注解核心类图：\"},\"134\":{\"h\":\"条件注解执行时序图\"},\"135\":{\"c\":[\"SpringBoot\"]},\"136\":{\"c\":[\"SpringBoot\",\"注解\"]},\"137\":{\"h\":\"SpringBoot 组件注册的几种方式\"},\"138\":{\"h\":\"1. @Component注解方式\",\"t\":[\"最基础的组件注册方式\",\"包括@Component及其衍生注解：@Service、@Controller、@Repository\",\"需要配合@ComponentScan使用，扫描指定包路径\",\"@Component // 直接标注在类上，将类注册为Spring组件 public class UserService { // 业务逻辑 }\",\"原理：\",\"通过 @ComponentScan 扫描指定包路径\",\"解析@Component及其派生注解(@Service, @Controller等)\",\"将类转换为BeanDefinition\",\"注册到BeanFactory的beanDefinitionMap中\",\"源码流程：\",\"包扫描机制：核心实现类：ClassPathBeanDefinitionScanner.doScan \",\"确定扫描的包路径\",\"遍历包下的class文件\",\"通过ASM读取类的注解信息\",\"将符合条件的类转换为BeanDefinition\",\"注册到Spring容器\",\"注解解析过程：ConfigurationClassPostProcessor \",\"processConfigBeanDefinitions：处理配置类\",\"parse：解析配置类\",\"componentScan：执行包扫描\",\"BeanDefinition注册流程：DefaultListableBeanFactory.registerBeanDefinition: \",\"校验BeanDefinition\",\"存储到beanDefinitionMap\",\"更新beanDefinitionNames\"]},\"139\":{\"h\":\"2. @Bean注解方式\",\"t\":[\"常用于第三方类的注册，或需要定制化配置的Bean\",\"需要在@Configuration类中使用\",\"支持方法参数注入，体现依赖关系\",\"原理：\",\"解析@Configuration类\",\"通过ConfigurationClassPostProcessor处理@Bean方法\",\"将方法返回的对象注册为Bean\",\"支持方法参数依赖注入\",\"源码流程：\",\"@Configuration类处理： ConfigurationClassPostProcessor:\",\"识别@Configuration类\",\"通过CGLib增强配置类\",\"处理@Bean方法\",\"Bean方法解析：ConfigurationClassParser\",\"解析@Bean方法\",\"收集方法信息\",\"创建BeanDefinition\",\"代理增强机制：\",\"创建配置类的CGLib代理\",\"拦截@Bean方法调用\",\"确保单例Bean只被创建一次\",\"@Configuration public class DetailedConfig { // 基础Bean注册 @Bean public UserService userService() { return new UserService(); } // 依赖注入示例 @Bean public OrderService orderService(UserService userService) { return new OrderService(userService); } // 条件注册示例 @Bean @Conditional(DataSourceCondition.class) public DataSource dataSource() { return new DataSource(); } }\"]},\"140\":{\"h\":\"3. @Import注解方式\",\"t\":[\"直接导入指定类作为组件\",\"可以导入普通类、配置类\",\"简单直接，适合导入少量确定的类\",\"原理：Spring解析@Import注解，将指定类注册为Bean\",\"直接导入指定的类\",\"自动注册为Spring组件\",\"支持导入普通类、@Configuration类、ImportSelector和ImportBeanDefinitionRegistrar\",\"源码流程：\",\"处理流程： ConfigurationClassParser.processImports\",\"解析@Import注解\",\"获取导入的类\",\"递归处理导入的配置类\",\"注册BeanDefinition\",\"导入类型处理：\",\"普通类：直接注册为Bean\",\"配置类：递归处理其配置\",\"ImportSelector：调用selectImports\",\"ImportBeanDefinitionRegistrar：回调注册方法\",\"//直接导入类 @Import({UserService.class, OrderService.class}) @Configuration public class DirectImportConfig { } //导入配置类 @Import(OtherConfiguration.class) @Configuration public class ImportConfigClass { }\"]},\"141\":{\"h\":\"4. ImportSelector接口\",\"t\":[\"实现动态导入\",\"可以根据条件返回需要导入的类名数组（可以基于metadata进行条件判断）\",\"适合条件导入、批量导入场景\",\"原理：Spring 调用 selectImports 方法，将返回的类名对应的类注册为 Bean\",\"动态返回需要导入的类名\",\"支持条件筛选\",\"Spring内部通过反射将返回的类注册为Bean\",\"源码流程：\",\"执行时机\",\"常规 ImportSelector：配置类解析阶段执行\",\"DeferredImportSelector：所有配置类解析完成后执行\",\"处理流程： ConfigurationClassParser\",\"调用selectImports获取类名\",\"解析返回的类名\",\"递归处理导入的类\",\"public class MyImportSelector implements ImportSelector { @Override public String[] selectImports(AnnotationMetadata importingClassMetadata) { // 可以基于metadata进行条件判断 if (metadata.hasAnnotation(\\\"org.springframework.context.annotation.Configuration\\\")) { return new String[]{\\\"com.example.ConfigA\\\"}; } return new String[]{\\\"com.example.ConfigB\\\"}; } // DeferredImportSelector接口示例 public class DeferredSelector implements DeferredImportSelector { @Override public Class<? extends Group> getImportGroup() { return DefaultGroup.class; } } }\",\"@Import(MyImportSelector.class) @Configuration public class ImportSelectorConfig { // 配置类内容 }\"]},\"142\":{\"h\":\"5. ✅ImportBeanDefinitionRegistrar接口\",\"t\":[\"手动注册BeanDefinition\",\"提供最大的灵活性\",\"可以完全控制Bean的注册过程\",\"原理：Spring回调接口方法，允许直接操作BeanDefinitionRegistry\",\"手动注册BeanDefinition\",\"可以自定义Bean的注册逻辑\",\"灵活性最高，可以完全控制Bean的注册过程\",\"源码流程：\",\"配置类处理器调用 registerBeanDefinitions\",\"实现类完成自定义注册逻辑\",\"BeanDefinition注册到容器\",\"public class DetailedRegistrar implements ImportBeanDefinitionRegistrar { @Override public void registerBeanDefinitions( AnnotationMetadata metadata, BeanDefinitionRegistry registry, BeanNameGenerator nameGenerator) { // 自定义Bean定义 BeanDefinition beanDefinition = BeanDefinitionBuilder .genericBeanDefinition(UserService.class) .addPropertyValue(\\\"name\\\", \\\"van\\\") .getBeanDefinition(); // 注册Bean定义 registry.registerBeanDefinition( nameGenerator.generateBeanName(beanDefinition, registry), beanDefinition ); } }\",\"@Import(DetailedRegistrar.class) @Configuration public class RegistrarConfig { // 配置类内容 }\"]},\"143\":{\"h\":\"6. FactoryBean接口\",\"t\":[\"通过工厂模式创建Bean\",\"可以控制Bean的创建过程\",\"适合复杂的Bean创建场景\",\"原理：Spring通过getObject方法获取真正的Bean实例\",\"源码流程：AbstractBeanFactory.getObject \",\"检查是否是FactoryBean\",\"调用 getObject 获取实际对象\",\"处理缓存和作用域\",\"//实现FactoryBean接口 public class UserServiceFactoryBean implements FactoryBean<UserService> { @Override public UserService getObject() throws Exception { return new UserService(); } @Override public Class<?> getObjectType() { return UserService.class; } @Override public boolean isSingleton() { return true; } }\",\"@Configuration public class FactoryBeanConfig { @Bean public UserServiceFactoryBean userService() { return new UserServiceFactoryBean(); } }\"]},\"144\":{\"h\":\"使用场景总结：\"},\"145\":{\"h\":\"1. @Component适用场景：\",\"t\":[\"自己开发的业务组件\",\"简单的Bean注册\",\"标准的Spring Bean生命周期\"]},\"146\":{\"h\":\"2. @Bean适用场景：\",\"t\":[\"注册第三方库的类\",\"需要进行方法级别配置的Bean\",\"需要在方法中进行复杂初始化的Bean\",\"依赖注入的场景\"]},\"147\":{\"h\":\"3. @Import适用场景：\",\"t\":[\"导入配置类\",\"导入普通类做为Bean\",\"模块化配置\"]},\"148\":{\"h\":\"4. ImportSelector适用场景：\",\"t\":[\"条件导入\",\"批量导入\",\"动态导入\",\"需要推迟导入的场景（使用DeferredImportSelector）\"]},\"149\":{\"h\":\"5. ImportBeanDefinitionRegistrar适用场景：\",\"t\":[\"自定义Bean定义注册逻辑\",\"需要编程方式注册Bean\",\"复杂的Bean注册场景\",\"需要完全控制Bean定义的场景\"]},\"150\":{\"h\":\"6.FactoryBean适用场景：\",\"t\":[\"复杂对象的创建\",\"需要使用工厂模式的场景\",\"代理对象的创建\",\"需要控制对象实例化过程的场景\"]},\"151\":{\"h\":\"SpringBoot 统一结果&异常&日志处理\",\"t\":[\"参考链接：\",\"https://blog.csdn.net/zoroly/article/details/135672595\",\"https://mp.weixin.qq.com/s/xNqqkmPfUVpjAxHNy09B1w\",\"https://www.pdai.tech/md/spring/springboot/springboot-x-interface-response.html\"]},\"152\":{\"c\":[\"SpringBoot\"]},\"153\":{\"h\":\"SpringBoot 高级特性与源码解析指南\"},\"154\":{\"h\":\"一、核心启动原理\"},\"155\":{\"h\":\"1. SpringBoot 启动流程源码分析\",\"t\":[\"SpringBoot 的启动过程主要包含以下关键步骤：\",\"@SpringBootApplication public class DemoApplication { public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); } }\",\"核心流程解析：\",\"创建 SpringApplication 对象\",\"public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) { // 设置资源加载器 this.resourceLoader = resourceLoader; // 判断是否是 Web 环境 this.webApplicationType = WebApplicationType.deduceFromClasspath(); // 设置初始化器 setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class)); // 设置监听器 setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class)); // 推断主启动类 this.mainApplicationClass = deduceMainApplicationClass(); }\",\"运行 SpringApplication\",\"public ConfigurableApplicationContext run(String... args) { // 计时器启动 StopWatch stopWatch = new StopWatch(); stopWatch.start(); ConfigurableApplicationContext context = null; // 准备环境 ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments); // 创建 ApplicationContext context = createApplicationContext(); // 刷新上下文 refreshContext(context); stopWatch.stop(); return context; }\"]},\"156\":{\"h\":\"2. 自动配置原理\",\"t\":[\"@SpringBootApplication 注解是一个组合注解，包含：\",\"@SpringBootConfiguration\",\"@EnableAutoConfiguration\",\"@ComponentScan\",\"重点关注 @EnableAutoConfiguration 的工作原理：\",\"@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Inherited @AutoConfigurationPackage @Import(AutoConfigurationImportSelector.class) public @interface EnableAutoConfiguration { }\",\"核心逻辑在 AutoConfigurationImportSelector 类中：\",\"public String[] selectImports(AnnotationMetadata annotationMetadata) { // 加载自动配置类 List<String> configurations = getCandidateConfigurations(annotationMetadata, attributes); // 排除重复配置 configurations = removeDuplicates(configurations); // 排除指定的配置 Set<String> exclusions = getExclusions(annotationMetadata, attributes); configurations.removeAll(exclusions); return configurations.toArray(new String[configurations.size()]); }\"]},\"157\":{\"h\":\"二、高级特性实战\"},\"158\":{\"h\":\"1. 自定义 Starter 开发\",\"t\":[\"创建一个简单的日志记录 starter：\",\"@Configuration @ConditionalOnClass(LogService.class) @EnableConfigurationProperties(LogProperties.class) public class LogAutoConfiguration { @Bean @ConditionalOnMissingBean public LogService logService(LogProperties properties) { return new LogService(properties); } }\",\"配置文件：\",\"# application.properties custom.log.enabled=true custom.log.prefix=SYSTEM\"]},\"159\":{\"h\":\"2. 自定义条件注解\",\"t\":[\"创建一个基于特定条件的配置：\",\"@Target({ElementType.TYPE, ElementType.METHOD}) @Retention(RetentionPolicy.RUNTIME) @Conditional(OnCustomCondition.class) public @interface ConditionalOnCustom { String value() default \\\"\\\"; } public class OnCustomCondition implements Condition { @Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) { // 自定义条件逻辑 return true; } }\"]},\"160\":{\"h\":\"3. 事件监听机制\",\"t\":[\"自定义事件和监听器：\",\"// 自定义事件 public class CustomEvent extends ApplicationEvent { public CustomEvent(Object source) { super(source); } } // 事件监听器 @Component public class CustomEventListener implements ApplicationListener<CustomEvent> { @Override public void onApplicationEvent(CustomEvent event) { // 处理事件 } } // 发布事件 @Autowired private ApplicationEventPublisher publisher; public void doSomething() { publisher.publishEvent(new CustomEvent(this)); }\"]},\"161\":{\"h\":\"三、性能调优实战\"},\"162\":{\"h\":\"1. Spring Boot Actuator 高级运用\",\"t\":[\"@Configuration public class ActuatorConfig { @Bean public HealthIndicator customHealthIndicator() { return () -> { // 自定义健康检查逻辑 return Health.up() .withDetail(\\\"customKey\\\", \\\"customValue\\\") .build(); }; } }\"]},\"163\":{\"h\":\"2. 自定义线程池配置\",\"t\":[\"@Configuration public class ThreadPoolConfig { @Bean public ThreadPoolTaskExecutor asyncThreadPoolTaskExecutor() { ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor(); executor.setCorePoolSize(10); executor.setMaxPoolSize(20); executor.setQueueCapacity(200); executor.setKeepAliveSeconds(60); executor.setThreadNamePrefix(\\\"Async-Service-\\\"); executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy()); executor.initialize(); return executor; } }\"]},\"164\":{\"h\":\"3. 缓存优化\",\"t\":[\"@Configuration @EnableCaching public class CacheConfig { @Bean public CacheManager cacheManager() { SimpleCacheManager cacheManager = new SimpleCacheManager(); ConcurrentMapCache usersCache = new ConcurrentMapCache(\\\"users\\\"); cacheManager.setCaches(Arrays.asList(usersCache)); return cacheManager; } } @Service public class UserService { @Cacheable(value = \\\"users\\\", key = \\\"#id\\\") public User getUser(Long id) { // 数据库查询逻辑 } }\"]},\"165\":{\"h\":\"四、源码解析案例\"},\"166\":{\"h\":\"1. Spring Boot 配置加载源码分析\",\"t\":[\"配置优先级：\",\"命令行参数\",\"java:comp/env 中的 JNDI 属性\",\"Java 系统属性（System.getProperties()）\",\"操作系统环境变量\",\"RandomValuePropertySource 配置的 random.* 属性值\",\"JAR 包外部的 application-{profile}.properties 或 application.yml 文件\",\"JAR 包内部的 application-{profile}.properties 或 application.yml 文件\",\"@Configuration 注解类上的 @PropertySource\",\"通过 SpringApplication.setDefaultProperties 指定的默认属性\",\"关键源码：\",\"public class StandardEnvironment extends AbstractEnvironment { /** 系统属性 */ public static final String SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME = \\\"systemProperties\\\"; /** 系统环境 */ public static final String SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME = \\\"systemEnvironment\\\"; @Override protected void customizePropertySources(MutablePropertySources propertySources) { propertySources.addLast( new MapPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties())); propertySources.addLast( new SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment())); } }\"]},\"167\":{\"h\":\"2. Spring Boot 异常处理机制\",\"t\":[\"全局异常处理：\",\"@ControllerAdvice public class GlobalExceptionHandler { @ExceptionHandler(Exception.class) public ResponseEntity<ErrorResponse> handleException(Exception e) { ErrorResponse error = new ErrorResponse( HttpStatus.INTERNAL_SERVER_ERROR.value(), e.getMessage() ); return new ResponseEntity<>(error, HttpStatus.INTERNAL_SERVER_ERROR); } @ExceptionHandler(CustomException.class) public ResponseEntity<ErrorResponse> handleCustomException(CustomException e) { ErrorResponse error = new ErrorResponse( e.getStatus().value(), e.getMessage() ); return new ResponseEntity<>(error, e.getStatus()); } }\"]},\"168\":{\"h\":\"五、面试要点\",\"t\":[\"SpringBoot 自动配置原理\",\"@SpringBootApplication 注解的组成\",\"@EnableAutoConfiguration 的工作机制\",\"Spring Factories 加载机制\",\"Spring Boot 启动流程\",\"SpringApplication 的初始化过程\",\"run 方法的执行流程\",\"事件监听机制\",\"条件注解工作原理\",\"@ConditionalOnClass\",\"@ConditionalOnMissingBean\",\"@ConditionalOnProperty\",\"自定义条件注解的实现\",\"自定义 Starter\",\"基本组成部分\",\"自动配置类的编写\",\"配置属性类的定义\",\"Spring Factories 的配置\",\"性能优化\",\"线程池配置\",\"缓存使用策略\",\"JVM 参数调优\",\"数据库优化\"]},\"169\":{\"h\":\"六、实战案例\"},\"170\":{\"h\":\"1. 分布式限流实现\",\"t\":[\"@Aspect @Component public class RateLimiterAspect { private final RedisTemplate<String, String> redisTemplate; @Around(\\\"@annotation(rateLimiter)\\\") public Object rateLimit(ProceedingJoinPoint point, RateLimiter rateLimiter) throws Throwable { String key = rateLimiter.key(); int count = rateLimiter.count(); int time = rateLimiter.time(); String countKey = \\\"rate_limit:\\\" + key; String lockKey = \\\"lock:\\\" + key; try { // 获取计数器 Integer currentCount = redisTemplate.opsForValue().get(countKey) != null ? Integer.valueOf(redisTemplate.opsForValue().get(countKey)) : 0; if (currentCount >= count) { throw new RuntimeException(\\\"访问太频繁，请稍后再试\\\"); } // 计数器加1 redisTemplate.opsForValue().increment(countKey); // 设置过期时间 redisTemplate.expire(countKey, time, TimeUnit.SECONDS); return point.proceed(); } finally { redisTemplate.delete(lockKey); } } }\"]},\"171\":{\"h\":\"2. 分布式事务实现\",\"t\":[\"@Service public class OrderService { @Autowired private OrderMapper orderMapper; @Autowired private ProductMapper productMapper; @Transactional @GlobalTransactional public void createOrder(Order order) { // 创建订单 orderMapper.insert(order); // 扣减库存 productMapper.decreaseStock(order.getProductId(), order.getQuantity()); // 可能的异常 if (someCondition) { throw new RuntimeException(\\\"创建订单失败\\\"); } } }\"]},\"172\":{\"h\":\"总结\",\"t\":[\"以上内容涵盖了 SpringBoot 的核心原理、高级特性、性能优化、源码分析等方面。建议：\",\"先掌握基础原理\",\"动手实践案例\",\"深入源码学习\",\"结合实际项目经验\",\"注重性能调优\",\"持续学习和实践是提升的关键。如有任何问题，欢迎随时讨论。\"]},\"173\":{\"h\":\"SpringBoot 可执行 jar 的打包问题\"},\"174\":{\"h\":\"单系统打包问题\",\"t\":[\"在 SpringBoot 项目中，如果继承了 spring-boot-starter-parent，它已经默认配置了 spring-boot-maven-plugin 并启用了 repackage 功能。\",\"所以，当前的项目也自动获得 repackage 功能，而在多模块系统使用 dependencyManagement 管理的项目，需要手动配置 repackage\",\"spring-boot-starter-parent 的默认配置\",\"<!-- spring-boot-starter-parent/pom.xml --> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <executions> <execution> <id>repackage</id> <goals> <goal>repackage</goal> </goals> </execution> </executions> <configuration> <mainClass>${start-class}</mainClass> </configuration> </plugin> </plugins> </build>\"]},\"175\":{\"h\":\"多模块系统打包规范\",\"t\":[\"在一个电商多模块系统中，一般像商品模块、订单模块等进行打包时都是需要打包成的 jar 是可执行文件，即可以通过 java -jar xxx.jar 运行\",\"而像公共模块以及 API 模块进行打包时，是不需要打包为可执行的 jar 文件\",\"A. 可执行 jar（product 模块）：\",\"需要配置 spring-boot-maven-plugin\",\"需要配置 repackage goal\",\"需要指定 mainClass（如果有多个主类）\",\"B. 非可执行 jar（common/api 模块）：\",\"不需要 spring-boot-maven-plugin\",\"建议打包源码（使用 maven-source-plugin）\",\"使用基础的 maven-compiler-plugin 即可\"]},\"176\":{\"h\":\"为什么可执行 jar 需要配置 功能\",\"t\":[\"Maven 默认打包生成的 jar 是无法直接运行的，因为：\",\"依赖的 jar 包不会被包含在最终的 jar 包中\",\"MANIFEST.MF 文件缺少必要的信息（如 Main-Class、Class-Path 等）\",\"repackage 是将普通 jar 转换为可执行 jar 的关键\",\"打包过程详解：\",\"Maven 默认打包：\",\"mvn package\",\"生成普通的 jar 包\",\"只包含项目的类文件\",\"不包含依赖\",\"Spring Boot 重新打包：\",\"# repackage 目标会在 Maven 默认打包后执行 mvn spring-boot:repackage\",\"将原始 jar 重命名为 *.original\",\"创建可执行的 fat jar\",\"包含所有依赖\",\"添加 Spring Boot 启动相关类\",\"原始jar包结构： mall-order.jar ├── com/ │ └── van/ │ └── mall/ │ └── order/ │ └── *.class └── META-INF/ └── MANIFEST.MF 重新打包后的结构： mall-order.jar ├── BOOT-INF/ │ ├── classes/ │ │ └── com/ │ │ └── van/ │ │ └── mall/ │ │ └── order/ │ │ └── *.class │ └── lib/ │ ├── spring-boot-2.x.x.jar │ ├── spring-core-5.x.x.jar │ └── 其他依赖jar包 ├── META-INF/ │ ├── MANIFEST.MF │ └── maven/ └── org/ └── springframework/ └── boot/ └── loader/ └── *.class\",\"MANIFEST.MF 内容示例：\",\"Manifest-Version: 1.0 Implementation-Title: mall-order Implementation-Version: 1.0.0-SNAPSHOT Start-Class: com.van.mall.order.OrderApplication Spring-Boot-Classes: BOOT-INF/classes/ Spring-Boot-Lib: BOOT-INF/lib/ Spring-Boot-Version: 3.2.0 Main-Class: org.springframework.boot.loader.JarLauncher\"]},\"177\":{\"h\":\"父 POM 配置\",\"t\":[\"<project> <!-- 1. 统一版本管理 --> <properties> <spring-boot.version>3.2.0</spring-boot.version> <java.version>17</java.version> <!-- 其他版本属性... --> </properties> <!-- 2. 依赖管理 --> <dependencyManagement> <dependencies> <!-- Spring Boot 依赖管理 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>${spring-boot.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <!-- 3. 插件管理 --> <build> <pluginManagement> <plugins> <!-- 编译插件 --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.11.0</version> <configuration> <source>${java.version}</source> <target>${java.version}</target> <encoding>UTF-8</encoding> </configuration> </plugin> <!-- Spring Boot 插件 --> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>${spring-boot.version}</version> </plugin> <!-- 源码插件 --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-source-plugin</artifactId> <version>3.3.0</version> </plugin> </plugins> </pluginManagement> </build> </project>\"]},\"178\":{\"h\":\"非可执行模块（如 common、api 模块）\",\"t\":[\"<project> <!-- 1. 将大部分依赖标记为 optional --> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> <optional>true</optional> </dependency> </dependencies> <!-- 2. 只配置必要的插件 --> <build> <plugins> <!-- 源码插件，便于调试 --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-source-plugin</artifactId> <executions> <execution> <id>attach-sources</id> <phase>verify</phase> <goals> <goal>jar-no-fork</goal> </goals> </execution> </executions> </plugin> </plugins> </build> </project>\"]},\"179\":{\"h\":\"可执行模块（如 product 模块）\",\"t\":[\"<project> <!-- 1. 正常引入依赖 --> <dependencies> <!-- 内部模块依赖 --> <dependency> <groupId>${project.groupId}</groupId> <artifactId>common</artifactId> </dependency> <!-- Spring Boot 依赖 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> </dependencies> <!-- 2. 配置打包插件 --> <build> <finalName>${project.artifactId}</finalName> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <executions> <execution> <goals> <goal>repackage</goal> </goals> </execution> </executions> </plugin> </plugins> </build> </project>\"]},\"180\":{\"h\":\"总结\",\"t\":[\"在父 POM 使用 pluginManagement 统一管理插件\",\"子模块按需配置特定插件\",\"可执行模块配置 spring-boot-maven-plugin\",\"非可执行模块使用基础插件\"]},\"181\":{\"c\":[\"SpringBoot\"]},\"182\":{\"c\":[\"SpringBoot\",\"Maven\"]},\"183\":{\"h\":\"属性绑定-@ConfigurationProperties\"},\"184\":{\"h\":\"属性绑定的使用\",\"t\":[\"什么是 SpringBoot 的属性绑定：就是将配置文件（如 application.properties/yml）中的配置项自动映射到 Java 对象中。从而简化了配置管理。\",\"yaml文件的配置项：\",\"database: mysql: host: localhost port: 3306 username: root password: 123456 connections: - name: master poolSize: 10 - name: slave poolSize: 5 settings: timeout: 5000 enableSsl: true\",\"xxxProperties 属性类定义：\",\"@ConfigurationProperties(prefix = \\\"database.mysql\\\") @Component @Data public class DatabaseProperties { private String host; private int port; private String username; private String password; private List<ConnectionConfig> connections; private Settings settings; // 内部类 - 连接配置 @Data public static class ConnectionConfig { private String name; private int poolSize; } // 内部类 - 设置 @Data public static class Settings { private long timeout; private boolean enableSsl; } }\",\"配置属性元数据：这会生成 JSON 元数据，提供 IDE 提示\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-configuration-processor</artifactId> <optional>true</optional> </dependency>\",\"使用属性类：使用构造注入的方式而非字段注入\",\"@Service public class DatabaseService { private final DatabaseProperties dbProperties; @Autowired // 构造函数注入（在 Spring 4.3+ 中，如果只有一个构造函数，@Autowired 可以省略） public DatabaseService(DatabaseProperties dbProperties) { this.dbProperties = dbProperties; } public void printDatabaseInfo(){ String host = dbProperties.getHost(); int port = dbProperties.getPort(); List<DatabaseProperties.ConnectionConfig> connections = dbProperties.getConnections(); DatabaseProperties.ConnectionConfig masterConfig = connections.get(0); int masterPoolSize = masterConfig.getPoolSize(); long timeout = dbProperties.getSettings().getTimeout(); System.out.println(dbProperties); } }\"]},\"185\":{\"h\":\"为什么使用属性类的时候采用构造注入而非字段注入\",\"t\":[\"简而言之，就是为了代码的健壮性\"]},\"186\":{\"h\":\"字段注入 vs 构造注入\",\"t\":[\"字段注入：\",\"@Service public class DatabaseService { @Autowired private DatabaseProperties dbProperties; // private final DatabaseProperties dbProperties; // //// @Autowired // public DatabaseService(DatabaseProperties dbProperties) { // this.dbProperties = dbProperties; // } public void printDatabaseInfo(){ String host = dbProperties.getHost(); int port = dbProperties.getPort(); // 获取主从连接配置 List<DatabaseProperties.ConnectionConfig> connections = dbProperties.getConnections(); DatabaseProperties.ConnectionConfig masterConfig = connections.get(0); int masterPoolSize = masterConfig.getPoolSize(); // 获取其他设置 long timeout = dbProperties.getSettings().getTimeout(); System.out.println(dbProperties); } }\",\"构造注入：\",\"@Service public class DatabaseService { private final DatabaseProperties dbProperties; // @Autowired 构造函数注入（在 Spring 4.3+ 中，如果只有一个构造函数，@Autowired 可以省略） public DatabaseService(DatabaseProperties dbProperties) { this.dbProperties = dbProperties; } public void printDatabaseInfo() { String host = dbProperties.getHost(); int port = dbProperties.getPort(); // 获取主从连接配置 List<DatabaseProperties.ConnectionConfig> connections = dbProperties.getConnections(); DatabaseProperties.ConnectionConfig masterConfig = connections.get(0); int masterPoolSize = masterConfig.getPoolSize(); // 获取其他设置 long timeout = dbProperties.getSettings().getTimeout(); System.out.println(dbProperties); } }\"]},\"187\":{\"h\":\"\",\"t\":[\"添加 @RequiredArgsConstructor ，Lombok 会为所有 final 字段生成构造函数\",\"@Service @RequiredArgsConstructor // Lombok 会为所有 final 字段生成构造函数 public class DatabaseService { private final DatabaseProperties dbProperties; // @Autowired // public DatabaseService(DatabaseProperties dbProperties) { // this.dbProperties = dbProperties; // } public void printDatabaseInfo() { String host = dbProperties.getHost(); int port = dbProperties.getPort(); // 获取主从连接配置 List<DatabaseProperties.ConnectionConfig> connections = dbProperties.getConnections(); DatabaseProperties.ConnectionConfig masterConfig = connections.get(0); int masterPoolSize = masterConfig.getPoolSize(); // 获取其他设置 long timeout = dbProperties.getSettings().getTimeout(); System.out.println(dbProperties); } }\"]},\"188\":{\"h\":\"为什么使用构造注入\",\"t\":[\"不变性保证：\",\"使用 final 字段\",\"确保依赖不会被修改\",\"线程安全\",\"依赖明确：\",\"清楚地知道类需要什么依赖\",\"避免循环依赖\",\"容易发现设计问题\",\"测试友好：\",\"易于进行单元测试\",\"可以轻松模拟依赖\",\"构造函数参数清晰表明依赖关系\",\"强制依赖：\",\"必要的依赖无法被忽略\",\"编译时检查\",\"避免 NullPointerException\"]},\"189\":{\"h\":\"字段注入的问题\",\"t\":[\"隐藏依赖：\",\"无法从外部看出类的依赖\",\"可能导致过多依赖\",\"不可变性：\",\"无法使用 final 修饰\",\"可能在运行时被修改\",\"测试困难：\",\"需要反射注入依赖\",\"测试代码复杂\",\"容器耦合：\",\"强依赖于 IoC 容器\",\"无法在容器外使用\"]},\"190\":{\"h\":\"SpringBoot 是如何实现属性绑定的\"},\"191\":{\"h\":\"属性绑定流程图：\"},\"192\":{\"h\":\"绑定过程时序图：\"},\"193\":{\"c\":[\"SpringBoot\"]},\"194\":{\"c\":[\"SpringBoot\"]},\"195\":{\"h\":\"属性绑定-@EnableConfigurationProperties\"},\"196\":{\"h\":\"关于@EnableConfigurationProperties 的常见使用场景\",\"t\":[\"@EnableConfigurationProperties 注解是配合 @ConfigurationProperties 使用的，但是我们知道，在属性类上使用@ConfigurationProperties仅仅只是进行属性绑定的第一步，此时配置文件中的值还没有和属性类绑定生效，而生效的条件是需要将@ConfigurationProperties`标注的属性类加入到 Spring 的容器中\",\"其中一种用法就是在@ConfigurationProperties注解的属性类上加上@Component 注解就能将其注册为 Bean\",\"那么为什么还要提供另一种用法： 在@EnableConfigurationProperties中添加被@ConfigurationProperties标注的属性类，将其注入到 Spring 容器中？\",\"场景：SpringBoot 默认只扫描自己主程序所在的包。如果导入第三方包，即使组件上标注了 @Component、@ConfigurationProperties 注解，也没用。因为组件都扫描不进来，此时使用这个注解就可以快速进行属性绑定并把组件注册进容器\",\"所以，使用@EnableConfigurationProperties 常用于集成第三方库或者自定义 starter 开发，并且不依赖于主程序的组件扫描机制\"]},\"197\":{\"h\":\"使用案例：\"},\"198\":{\"h\":\"1. appplication.yml 配置\",\"t\":[\"app: email: host: smtp.qq.com port: 587 from: 1223@qq.com retry-config: max-attempts: 3 retry-interval: 2000\"]},\"199\":{\"h\":\"2. 定义配置属性类\",\"t\":[\"@ConfigurationProperties(prefix = \\\"app.email\\\") @Validated // 可以添加校验 public class EmailProperties { /** * SMTP服务器地址 */ @NotEmpty private String host; /** * SMTP服务器端口 */ @Range(min = 1, max = 65535) private int port = 25; // 提供默认值 /** * 发件人邮箱 */ @Email private String from; /** * 重试配置 */ private RetryConfig retryConfig = new RetryConfig(); // getter/setter 省略 /** * 内部静态类，用于嵌套配置 */ public static class RetryConfig { private int maxAttempts = 3; private long retryInterval = 1000; // getter/setter 省略 } }\"]},\"200\":{\"h\":\"3. 配置类：创建配置类来启用属性绑定\",\"t\":[\"@Configuration @EnableConfigurationProperties(EmailProperties.class) @RequiredArgsConstructor //使用构造函数的方式注入 public class EmailConfiguration { private final EmailProperties emailProperties; @Bean public EmailService emailService() { return new EmailService(emailProperties); } }\"]},\"201\":{\"h\":\"4. 使用配置的服务类\",\"t\":[\"@Service @Slf4j public class EmailService { private final EmailProperties properties; public EmailService(EmailProperties properties) { this.properties = properties; } public void sendEmail(String to, String subject, String content) { log.info(\\\"Sending email using configuration: host={}, port={}\\\", properties.getHost(), properties.getPort()); // 实现发送邮件逻辑 } }\"]},\"202\":{\"h\":\"@EnableConfigurationProperties 注解的原理\"},\"203\":{\"c\":[\"SpringBoot\"]},\"204\":{\"c\":[\"SpringBoot\"]},\"205\":{\"h\":\"SpringBoot 是如何实现自动配置的\"},\"206\":{\"h\":\"自动配置的流程\"},\"207\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"省略\",{\"1\":{\"199\":2}}],[\"绑定过程时序图\",{\"0\":{\"192\":1}}],[\"强依赖于\",{\"1\":{\"189\":1}}],[\"强制依赖\",{\"1\":{\"188\":1}}],[\"修饰\",{\"1\":{\"189\":1}}],[\"修改配置文件即可\",{\"1\":{\"102\":1}}],[\"修改\",{\"1\":{\"102\":1}}],[\"无法在容器外使用\",{\"1\":{\"189\":1}}],[\"无法使用\",{\"1\":{\"189\":1}}],[\"无法从外部看出类的依赖\",{\"1\":{\"189\":1}}],[\"无需指定版本\",{\"1\":{\"72\":1}}],[\"隐藏依赖\",{\"1\":{\"189\":1}}],[\"必要的依赖无法被忽略\",{\"1\":{\"188\":1}}],[\"必须要有\",{\"1\":{\"93\":1}}],[\"必须在数据源配置好之后才配置\",{\"1\":{\"93\":1}}],[\"必须先配置好\",{\"1\":{\"93\":1}}],[\"易于进行单元测试\",{\"1\":{\"188\":1}}],[\"清楚地知道类需要什么依赖\",{\"1\":{\"188\":1}}],[\"字段\",{\"1\":{\"188\":1}}],[\"字段生成构造函数\",{\"1\":{\"187\":2}}],[\"字段注入的问题\",{\"0\":{\"189\":1}}],[\"字段注入\",{\"0\":{\"186\":1},\"1\":{\"186\":1}}],[\"为什么使用构造注入\",{\"0\":{\"188\":1}}],[\"为什么使用属性类的时候采用构造注入而非字段注入\",{\"0\":{\"185\":1}}],[\"为什么可执行\",{\"0\":{\"176\":1}}],[\"构造函数参数清晰表明依赖关系\",{\"1\":{\"188\":1}}],[\"构造函数注入\",{\"1\":{\"184\":1,\"186\":1}}],[\"构造注入\",{\"0\":{\"186\":1},\"1\":{\"186\":1}}],[\"构建\",{\"1\":{\"94\":1}}],[\"构建配置\",{\"1\":{\"74\":1}}],[\"元数据\",{\"1\":{\"184\":1}}],[\"连接配置\",{\"1\":{\"184\":1}}],[\"什么是\",{\"1\":{\"184\":1}}],[\"什么时候不使用\",{\"1\":{\"73\":1}}],[\"正常引入依赖\",{\"1\":{\"179\":1}}],[\"正交性\",{\"1\":{\"3\":1}}],[\"│\",{\"1\":{\"176\":21}}],[\"原始jar包结构\",{\"1\":{\"176\":1}}],[\"原理\",{\"0\":{\"84\":1},\"1\":{\"138\":1,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":1}}],[\"启动相关类\",{\"1\":{\"176\":1}}],[\"启动流程\",{\"1\":{\"168\":1}}],[\"启动流程源码分析\",{\"0\":{\"155\":1}}],[\"非可执行模块使用基础插件\",{\"1\":{\"180\":1}}],[\"非可执行模块\",{\"0\":{\"178\":1}}],[\"非可执行\",{\"1\":{\"175\":1}}],[\"订单模块等进行打包时都是需要打包成的\",{\"1\":{\"175\":1}}],[\"订单服务\",{\"1\":{\"74\":1}}],[\"功能\",{\"0\":{\"176\":1},\"1\":{\"174\":2}}],[\"单系统打包问题\",{\"0\":{\"174\":1}}],[\"单个日志文件最大大小\",{\"1\":{\"103\":1}}],[\"深入源码学习\",{\"1\":{\"172\":1}}],[\"深入理解java虚拟机\",{\"1\":{\"18\":1}}],[\"动手实践案例\",{\"1\":{\"172\":1}}],[\"动态导入\",{\"1\":{\"148\":1}}],[\"动态返回需要导入的类名\",{\"1\":{\"141\":1}}],[\"扣减库存\",{\"1\":{\"171\":1}}],[\"计数器加1\",{\"1\":{\"170\":1}}],[\"计时器启动\",{\"1\":{\"155\":1}}],[\"访问太频繁\",{\"1\":{\"170\":1}}],[\"访问静态资源路径就需要加\",{\"1\":{\"57\":2}}],[\"性能优化\",{\"1\":{\"168\":1,\"172\":1}}],[\"性能调优实战\",{\"0\":{\"161\":1}}],[\"全局异常处理\",{\"1\":{\"167\":1}}],[\"关于\",{\"0\":{\"196\":1}}],[\"关键源码\",{\"1\":{\"166\":1}}],[\"关注技术发展趋势\",{\"1\":{\"16\":1}}],[\"操作系统环境变量\",{\"1\":{\"166\":1}}],[\"命令行参数\",{\"1\":{\"166\":1}}],[\"命令行参数双横线和单横线分别什么情况下用\",{\"1\":{\"82\":1}}],[\"事件监听器\",{\"1\":{\"160\":1}}],[\"事件监听机制\",{\"0\":{\"160\":1},\"1\":{\"168\":1}}],[\"事务工厂配置\",{\"1\":{\"93\":1}}],[\"事务\",{\"1\":{\"92\":1}}],[\"排除指定的配置\",{\"1\":{\"156\":1}}],[\"排除重复配置\",{\"1\":{\"156\":1}}],[\"加载机制\",{\"1\":{\"168\":1}}],[\"加载自动配置类\",{\"1\":{\"156\":1}}],[\"加载日志配置\",{\"1\":{\"104\":2}}],[\"刷新上下文\",{\"1\":{\"155\":1}}],[\"判断是否是\",{\"1\":{\"155\":1}}],[\"判断当前时间是否在范围内\",{\"1\":{\"130\":1}}],[\"复杂对象的创建\",{\"1\":{\"150\":1}}],[\"复杂的bean注册场景\",{\"1\":{\"149\":1}}],[\"条件导入\",{\"1\":{\"148\":1}}],[\"条件注册示例\",{\"1\":{\"139\":1}}],[\"条件注解工作原理\",{\"1\":{\"168\":1}}],[\"条件注解执行时序图\",{\"0\":{\"134\":1}}],[\"条件注解核心类图\",{\"0\":{\"133\":1}}],[\"条件注解处理流程图\",{\"0\":{\"132\":1}}],[\"条件注解处理入口\",{\"1\":{\"131\":1}}],[\"条件注解的生效过程\",{\"1\":{\"131\":1}}],[\"条件注解的实现原理\",{\"0\":{\"131\":1}}],[\"条件注解的实现是基于以下核心组件\",{\"1\":{\"130\":1}}],[\"条件注解的具体实现类\",{\"1\":{\"130\":1}}],[\"条件注解\",{\"0\":{\"124\":1}}],[\"检查是否是factorybean\",{\"1\":{\"143\":1}}],[\"灵活性最高\",{\"1\":{\"142\":1}}],[\"允许直接操作beandefinitionregistry\",{\"1\":{\"142\":1}}],[\"手动注册beandefinition\",{\"1\":{\"142\":2}}],[\"批量导入\",{\"1\":{\"148\":1}}],[\"批量导入场景\",{\"1\":{\"141\":1}}],[\"批量导入组件\",{\"1\":{\"108\":1}}],[\"适合复杂的bean创建场景\",{\"1\":{\"143\":1}}],[\"适合条件导入\",{\"1\":{\"141\":1}}],[\"适合导入少量确定的类\",{\"1\":{\"140\":1}}],[\"回调注册方法\",{\"1\":{\"140\":1}}],[\"调用\",{\"1\":{\"141\":1,\"143\":1}}],[\"调用selectimports获取类名\",{\"1\":{\"141\":1}}],[\"调用selectimports\",{\"1\":{\"140\":1}}],[\"调用父类扫描获取\",{\"1\":{\"94\":1}}],[\"递归处理导入的类\",{\"1\":{\"141\":1}}],[\"递归处理导入的配置类\",{\"1\":{\"140\":1}}],[\"递归处理其配置\",{\"1\":{\"140\":1}}],[\"普通类\",{\"1\":{\"140\":1}}],[\"拦截\",{\"1\":{\"139\":1}}],[\"收集方法信息\",{\"1\":{\"139\":1}}],[\"识别\",{\"1\":{\"139\":1}}],[\"体现依赖关系\",{\"1\":{\"139\":1}}],[\"存储到beandefinitionmap\",{\"1\":{\"138\":1}}],[\"存放最新代码\",{\"1\":{\"33\":1}}],[\"校验beandefinition\",{\"1\":{\"138\":1}}],[\"遍历包下的class文件\",{\"1\":{\"138\":1}}],[\"确保依赖不会被修改\",{\"1\":{\"188\":1}}],[\"确保单例bean只被创建一次\",{\"1\":{\"139\":1}}],[\"确保在正确的分支上工作\",{\"1\":{\"33\":1}}],[\"确保在\",{\"1\":{\"33\":1}}],[\"确定扫描的包路径\",{\"1\":{\"138\":1}}],[\"源码分析等方面\",{\"1\":{\"172\":1}}],[\"源码解析案例\",{\"0\":{\"165\":1}}],[\"源码流程\",{\"1\":{\"138\":1,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":1}}],[\"源码插件\",{\"1\":{\"74\":2,\"177\":1,\"178\":1}}],[\"解析返回的类名\",{\"1\":{\"141\":1}}],[\"解析配置类\",{\"1\":{\"138\":1}}],[\"解析\",{\"1\":{\"138\":1,\"139\":2,\"140\":1}}],[\"解决实际技术难题\",{\"1\":{\"16\":1}}],[\"依次执行每个条件的\",{\"1\":{\"131\":1}}],[\"依赖明确\",{\"1\":{\"188\":1}}],[\"依赖的\",{\"1\":{\"176\":1}}],[\"依赖注入的场景\",{\"1\":{\"146\":1}}],[\"依赖注入示例\",{\"1\":{\"139\":1}}],[\"依赖配置\",{\"1\":{\"79\":1}}],[\"依赖传递\",{\"1\":{\"77\":1}}],[\"依赖会传递\",{\"1\":{\"77\":1}}],[\"依赖这个项目的其他项目如果需要这个依赖\",{\"1\":{\"76\":1}}],[\"依赖项目\",{\"1\":{\"76\":2}}],[\"依赖中\",{\"0\":{\"75\":1}}],[\"依赖\",{\"1\":{\"74\":5,\"76\":1,\"179\":1}}],[\"依赖管理\",{\"1\":{\"72\":1,\"73\":1,\"74\":1,\"177\":2}}],[\"依赖倒置\",{\"1\":{\"3\":1}}],[\"执行时机\",{\"1\":{\"141\":1}}],[\"执行包扫描\",{\"1\":{\"138\":1}}],[\"执行流程\",{\"1\":{\"131\":1}}],[\"执行扫描\",{\"1\":{\"94\":1}}],[\"扫描指定包路径\",{\"1\":{\"138\":2}}],[\"扫描配置类时会检查条件注解\",{\"1\":{\"131\":1}}],[\"扫描器就会扫描\",{\"1\":{\"94\":1}}],[\"扫描器\",{\"1\":{\"94\":1}}],[\"理解条件注解的实现原理主要是要知道\",{\"1\":{\"131\":1}}],[\"理论基础的介绍\",{\"1\":{\"35\":1}}],[\"理论基础\",{\"0\":{\"35\":1}}],[\"结合实际项目经验\",{\"1\":{\"172\":1}}],[\"结束时间\",{\"1\":{\"130\":1}}],[\"结构型模式\",{\"1\":{\"3\":1}}],[\"下面我们实现一个自定义条件注解\",{\"1\":{\"130\":1}}],[\"下面我会通过图片来给你阿里云\",{\"1\":{\"33\":1}}],[\"等\",{\"1\":{\"131\":1,\"176\":1}}],[\"等等\",{\"1\":{\"130\":1}}],[\"等格式\",{\"1\":{\"112\":1}}],[\"表达式组合多个条件\",{\"1\":{\"129\":1}}],[\"表达式来决定是否创建\",{\"1\":{\"129\":1}}],[\"表示如果属性不存在\",{\"1\":{\"126\":2}}],[\"表示小写字母\",{\"1\":{\"60\":1}}],[\"表示字符集合\",{\"1\":{\"60\":1}}],[\"表示一个命名的模式占位符\",{\"1\":{\"60\":1}}],[\"表示任意数量的目录\",{\"1\":{\"60\":1}}],[\"表示任意数量的字符\",{\"1\":{\"60\":1}}],[\"表示任意一个字符\",{\"1\":{\"60\":1}}],[\"属性类定义\",{\"1\":{\"184\":1}}],[\"属性绑定流程图\",{\"0\":{\"191\":1}}],[\"属性绑定的使用\",{\"0\":{\"184\":1}}],[\"属性绑定\",{\"0\":{\"183\":1,\"195\":1}}],[\"属性值\",{\"1\":{\"166\":1}}],[\"属性\",{\"1\":{\"127\":1,\"166\":1}}],[\"推断主启动类\",{\"1\":{\"155\":1}}],[\"推荐\",{\"1\":{\"127\":1}}],[\"推送到远程\",{\"1\":{\"33\":3}}],[\"输出结果\",{\"1\":{\"126\":2}}],[\"则条件为\",{\"1\":{\"126\":2}}],[\"则需要转义为\",{\"1\":{\"60\":2}}],[\"可能在运行时被修改\",{\"1\":{\"189\":1}}],[\"可能导致过多依赖\",{\"1\":{\"189\":1}}],[\"可能的异常\",{\"1\":{\"171\":1}}],[\"可执行模块配置\",{\"1\":{\"180\":1}}],[\"可执行模块\",{\"0\":{\"179\":1}}],[\"可执行\",{\"0\":{\"173\":1},\"1\":{\"175\":1}}],[\"可知\",{\"1\":{\"122\":1}}],[\"可以添加校验\",{\"1\":{\"199\":1}}],[\"可以轻松模拟依赖\",{\"1\":{\"188\":1}}],[\"可以控制bean的创建过程\",{\"1\":{\"143\":1}}],[\"可以自定义bean的注册逻辑\",{\"1\":{\"142\":1}}],[\"可以完全控制bean的注册过程\",{\"1\":{\"142\":2}}],[\"可以基于metadata进行条件判断\",{\"1\":{\"141\":2}}],[\"可以根据条件返回需要导入的类名数组\",{\"1\":{\"141\":1}}],[\"可以导入普通类\",{\"1\":{\"140\":1}}],[\"可以编写日志框架自己的配置文件放在类路径下就行\",{\"1\":{\"102\":1}}],[\"可以在application\",{\"1\":{\"101\":1}}],[\"可以配置logging\",{\"1\":{\"99\":1}}],[\"可以看到\",{\"1\":{\"92\":1,\"104\":1,\"110\":1}}],[\"可以看到支持\",{\"1\":{\"92\":1}}],[\"可以省略\",{\"1\":{\"77\":1,\"184\":1,\"186\":1}}],[\"可以写出为xml文档\",{\"1\":{\"66\":1}}],[\"可以返回\",{\"1\":{\"66\":1}}],[\"通常配合localechangeinterceptor使用\",{\"1\":{\"122\":1}}],[\"通过工厂模式创建bean\",{\"1\":{\"143\":1}}],[\"通过cglib增强配置类\",{\"1\":{\"139\":1}}],[\"通过configurationclasspostprocessor处理\",{\"1\":{\"139\":1}}],[\"通过asm读取类的注解信息\",{\"1\":{\"138\":1}}],[\"通过\",{\"1\":{\"131\":1,\"138\":1,\"166\":1}}],[\"通过查看\",{\"1\":{\"92\":1}}],[\"通过这种方式统一管理依赖版本\",{\"1\":{\"72\":2}}],[\"负责执行处理器方法\",{\"1\":{\"120\":2}}],[\"负责建立请求\",{\"1\":{\"119\":1}}],[\"负载均衡\",{\"1\":{\"5\":1}}],[\"因此这里直接默认注册了一个requestmappinghandlermapping\",{\"1\":{\"119\":1}}],[\"因为组件都扫描不进来\",{\"1\":{\"196\":1}}],[\"因为macos\",{\"1\":{\"126\":1}}],[\"因为boot底层控制好了日志\",{\"1\":{\"102\":1}}],[\"因为logging\",{\"1\":{\"101\":1}}],[\"因为\",{\"1\":{\"76\":1,\"176\":1}}],[\"目标会在\",{\"1\":{\"176\":1}}],[\"目前主流的webmvc方式都是\",{\"1\":{\"119\":1}}],[\"目的是配置异步请求的支持\",{\"1\":{\"113\":1}}],[\"目的是配置默认的消息转换器httpmessageconverter\",{\"1\":{\"112\":1}}],[\"目录下的文件\",{\"1\":{\"60\":1}}],[\"✅importbeandefinitionregistrar接口\",{\"0\":{\"142\":1}}],[\"✅5\",{\"0\":{\"123\":1}}],[\"✅2\",{\"0\":{\"120\":1}}],[\"✅4\",{\"0\":{\"115\":1}}],[\"✅1\",{\"0\":{\"112\":1,\"119\":1}}],[\"✅添加包扫描注解\",{\"1\":{\"89\":1}}],[\"底层的很多组件\",{\"1\":{\"111\":1}}],[\"底层支持不同的具体日志框架\",{\"1\":{\"104\":1}}],[\"其中一种用法就是在\",{\"1\":{\"196\":1}}],[\"其底层负责执行的适配器就是requestmappinghandleradapter\",{\"1\":{\"120\":1}}],[\"其次这个类是实现了\",{\"1\":{\"111\":1}}],[\"其他版本属性\",{\"1\":{\"177\":1}}],[\"其他依赖jar包\",{\"1\":{\"176\":1}}],[\"其他功能配置\",{\"1\":{\"93\":1}}],[\"其他内部模块\",{\"1\":{\"74\":1}}],[\"由该方法的注解\",{\"1\":{\"122\":1}}],[\"由以上源码可知\",{\"1\":{\"110\":1}}],[\"由容器提供\",{\"1\":{\"77\":1}}],[\"优先级\",{\"1\":{\"110\":1}}],[\"优先返回\",{\"1\":{\"65\":2}}],[\"才会创建\",{\"1\":{\"127\":1}}],[\"才会交给boot进行处理\",{\"1\":{\"68\":1}}],[\"才生效\",{\"1\":{\"110\":1}}],[\"响应式web\",{\"1\":{\"110\":1}}],[\"响应页面或json数据\",{\"1\":{\"68\":1}}],[\"参数调优\",{\"1\":{\"168\":1}}],[\"参考链接\",{\"1\":{\"151\":1}}],[\"参考文章\",{\"1\":{\"104\":1}}],[\"参与技术社区交流\",{\"1\":{\"16\":1}}],[\"参与重要项目架构设计\",{\"1\":{\"16\":1}}],[\"环境\",{\"1\":{\"110\":1,\"155\":1}}],[\"环境准备阶段\",{\"1\":{\"104\":1}}],[\"环境配置\",{\"1\":{\"93\":1}}],[\"初始化日志系统\",{\"1\":{\"104\":1}}],[\"初始化阶段\",{\"1\":{\"104\":1}}],[\"初始化器创建一个\",{\"1\":{\"72\":1}}],[\"简而言之\",{\"1\":{\"185\":1}}],[\"简单的bean注册\",{\"1\":{\"145\":1}}],[\"简单直接\",{\"1\":{\"140\":1}}],[\"简易实现步骤\",{\"1\":{\"104\":1}}],[\"简历修改\",{\"1\":{\"33\":1}}],[\"利用监听器机制实现日志系统的初始化\",{\"1\":{\"104\":1}}],[\"生效的前提是\",{\"1\":{\"110\":1}}],[\"生效条件\",{\"0\":{\"110\":1}}],[\"生产环境关闭控制台输出\",{\"1\":{\"103\":1}}],[\"生产环境配置\",{\"1\":{\"103\":1}}],[\"生成普通的\",{\"1\":{\"176\":1}}],[\"生成xml\",{\"1\":{\"89\":1}}],[\"生成的介绍\",{\"1\":{\"27\":1}}],[\"根日志级别\",{\"1\":{\"103\":1}}],[\"根据条件评估结果决定是否创建\",{\"1\":{\"131\":1}}],[\"根据条件创建linuxos\",{\"1\":{\"126\":1}}],[\"根据前面知道\",{\"1\":{\"130\":1}}],[\"根据日期命名\",{\"1\":{\"103\":1}}],[\"根据驱动类名判断数据库类型\",{\"1\":{\"79\":1}}],[\"根据配置创建对应的数据源\",{\"1\":{\"79\":1}}],[\"根据springboot的错误页面规则\",{\"1\":{\"69\":1}}],[\"根据参数协商\",{\"1\":{\"65\":1}}],[\"引用前面定义的file\",{\"1\":{\"103\":1}}],[\"引入spring\",{\"1\":{\"110\":1}}],[\"引入相关依赖\",{\"0\":{\"86\":1}}],[\"引入自定义\",{\"1\":{\"79\":1}}],[\"引入支持写出xml内容依赖\",{\"1\":{\"66\":1}}],[\"队列满时是否阻塞\",{\"1\":{\"103\":1}}],[\"队列大小\",{\"1\":{\"103\":1}}],[\"qq\",{\"1\":{\"151\":1,\"198\":2}}],[\"queuesize>\",{\"1\":{\"103\":2}}],[\"qos\",{\"1\":{\"103\":8}}],[\"异常处理机制\",{\"0\":{\"167\":1}}],[\"异常\",{\"0\":{\"151\":1}}],[\"异步请求处理配置\",{\"1\":{\"113\":1}}],[\"异步请求处理\",{\"0\":{\"113\":1}}],[\"异步日志配置\",{\"1\":{\"103\":1}}],[\"异地多活\",{\"1\":{\"7\":1}}],[\"只包含项目的类文件\",{\"1\":{\"176\":1}}],[\"只在工作时间内创建这个\",{\"1\":{\"130\":1}}],[\"只在指定的时间范围内创建\",{\"1\":{\"130\":2}}],[\"只有当容器中没有\",{\"1\":{\"128\":1}}],[\"只有当项目中存在\",{\"1\":{\"127\":1}}],[\"只有配置了spring\",{\"1\":{\"122\":1}}],[\"只记录error级别日志\",{\"1\":{\"103\":1}}],[\"只配置必要的插件\",{\"1\":{\"74\":1,\"178\":1}}],[\"错误日志文件输出\",{\"1\":{\"103\":1}}],[\"错误处理的自动配置都在errormvcautoconfiguration中\",{\"1\":{\"68\":1}}],[\"错误处理\",{\"0\":{\"67\":1}}],[\"控制台输出\",{\"1\":{\"103\":1}}],[\"此时使用这个注解就可以快速进行属性绑定并把组件注册进容器\",{\"1\":{\"196\":1}}],[\"此时配置文件中的值还没有和属性类绑定生效\",{\"1\":{\"196\":1}}],[\"此时项目\",{\"1\":{\"76\":1}}],[\"此属性生效\",{\"1\":{\"103\":1}}],[\"节点\",{\"1\":{\"103\":1}}],[\"记录的日志灌倒\",{\"1\":{\"102\":1}}],[\"记住\",{\"1\":{\"25\":1}}],[\"先掌握基础原理\",{\"1\":{\"172\":1}}],[\"先生效\",{\"1\":{\"110\":1}}],[\"先看这个类上面的注解\",{\"1\":{\"110\":1}}],[\"先排除它的日志包\",{\"1\":{\"102\":1}}],[\"先深化java核心技能\",{\"1\":{\"16\":1}}],[\"预定义两个组\",{\"1\":{\"100\":1}}],[\"级别\",{\"1\":{\"99\":1}}],[\"代理对象的创建\",{\"1\":{\"150\":1}}],[\"代理增强机制\",{\"1\":{\"139\":1}}],[\"代表所有未指定日志级别都使用\",{\"1\":{\"99\":1}}],[\"代码方式\",{\"0\":{\"58\":1}}],[\"代码\",{\"1\":{\"33\":1}}],[\"组合作为默认底层日志\",{\"1\":{\"97\":1}}],[\"组件注册的几种方式\",{\"0\":{\"137\":1}}],[\"组件注册\",{\"1\":{\"93\":1}}],[\"那么为什么还要提供另一种用法\",{\"1\":{\"196\":1}}],[\"那么注解上设置\",{\"1\":{\"126\":1}}],[\"那么\",{\"1\":{\"97\":1}}],[\"那么依赖\",{\"1\":{\"71\":1}}],[\"作为日志门面\",{\"1\":{\"97\":1,\"104\":1}}],[\"作为日志框架的具体实现\",{\"1\":{\"97\":1}}],[\"作用是\",{\"1\":{\"130\":1}}],[\"作用解析请求中的语言标志参数或者请求头中的accept\",{\"1\":{\"122\":1}}],[\"作用\",{\"1\":{\"78\":1}}],[\"流程图\",{\"1\":{\"94\":1}}],[\"时才创建\",{\"1\":{\"128\":2}}],[\"时才创建这个\",{\"1\":{\"126\":1}}],[\"时触发\",{\"1\":{\"126\":1}}],[\"时\",{\"1\":{\"97\":1}}],[\"时创建代理对象\",{\"1\":{\"94\":1}}],[\"时间戳格式\",{\"1\":{\"70\":1}}],[\"获取其他设置\",{\"1\":{\"186\":2,\"187\":1}}],[\"获取主从连接配置\",{\"1\":{\"186\":2,\"187\":1}}],[\"获取计数器\",{\"1\":{\"170\":1}}],[\"获取实际对象\",{\"1\":{\"143\":1}}],[\"获取导入的类\",{\"1\":{\"140\":1}}],[\"获取当前时间\",{\"1\":{\"130\":1}}],[\"获取注解属性\",{\"1\":{\"130\":1}}],[\"获取\",{\"1\":{\"94\":1}}],[\"获取请求路径\",{\"1\":{\"61\":1}}],[\"重试配置\",{\"1\":{\"199\":1}}],[\"重命名为\",{\"1\":{\"176\":1}}],[\"重新打包后的结构\",{\"1\":{\"176\":1}}],[\"重新打包\",{\"1\":{\"176\":1}}],[\"重写configureasyncsupport方法\",{\"1\":{\"113\":1}}],[\"重写configuremessageconverters方法\",{\"1\":{\"112\":1}}],[\"重写了大量方法\",{\"1\":{\"111\":1}}],[\"重要\",{\"1\":{\"94\":1}}],[\"重点关注\",{\"1\":{\"93\":1,\"156\":1}}],[\"提示\",{\"1\":{\"184\":1}}],[\"提取注解的属性信息\",{\"1\":{\"94\":1}}],[\"提供最大的灵活性\",{\"1\":{\"142\":1}}],[\"提供条件评估所需的上下文信息\",{\"1\":{\"131\":1}}],[\"提供条件评估时需要的上下文信息\",{\"1\":{\"130\":1}}],[\"提供默认值\",{\"1\":{\"199\":1}}],[\"提供默认的缓存服务实现\",{\"1\":{\"128\":1}}],[\"提供默认的用户服务实现\",{\"1\":{\"128\":1}}],[\"提供默认已经配置好的\",{\"1\":{\"104\":1}}],[\"提供\",{\"1\":{\"119\":1,\"184\":1}}],[\"提供了一组预定义的依赖版本\",{\"1\":{\"72\":1}}],[\"提供了统一的源码编码格式\",{\"1\":{\"72\":1}}],[\"提供了统一的\",{\"1\":{\"72\":1}}],[\"提供的条件基类\",{\"1\":{\"131\":1}}],[\"提供的\",{\"1\":{\"61\":1}}],[\"语句解析\",{\"1\":{\"93\":1}}],[\"语言驱动配置\",{\"1\":{\"93\":1}}],[\"映射文件加载\",{\"1\":{\"93\":1}}],[\"映射文件处理\",{\"1\":{\"93\":1}}],[\"对象中\",{\"1\":{\"184\":1}}],[\"对象\",{\"1\":{\"155\":1}}],[\"对象工厂配置\",{\"1\":{\"93\":1}}],[\"对象转换\",{\"1\":{\"74\":1}}],[\"大致经过以下阶段\",{\"1\":{\"93\":1}}],[\"以上内容涵盖了\",{\"1\":{\"172\":1}}],[\"以下是关于springmvc的\",{\"1\":{\"108\":1}}],[\"以logging开始的所有配置\",{\"1\":{\"97\":1}}],[\"以构建实际的sqlsessionfactory对象\",{\"1\":{\"93\":1}}],[\"以前只支持\",{\"1\":{\"59\":1}}],[\"该方法仅在配置属性\",{\"1\":{\"126\":1}}],[\"该方法会在进行一些前置判断后调用buildsqlsessionfactory方法\",{\"1\":{\"93\":1}}],[\"该条件默认生效\",{\"1\":{\"110\":1}}],[\"该依赖对当前项目是可用的\",{\"1\":{\"76\":1}}],[\"继续查看factory\",{\"1\":{\"93\":1}}],[\"继承公司的父\",{\"1\":{\"73\":1}}],[\"应用程序包路径\",{\"1\":{\"103\":1}}],[\"应用配置文件\",{\"1\":{\"93\":1}}],[\"应用打包时\",{\"1\":{\"78\":1}}],[\"设置\",{\"1\":{\"184\":1}}],[\"设置过期时间\",{\"1\":{\"170\":1}}],[\"设置监听器\",{\"1\":{\"155\":1}}],[\"设置监测配置文件是否有修改的时间间隔\",{\"1\":{\"103\":1}}],[\"设置初始化器\",{\"1\":{\"155\":1}}],[\"设置初始化日志级别\",{\"1\":{\"104\":1}}],[\"设置资源加载器\",{\"1\":{\"155\":1}}],[\"设置内容协商的参数名\",{\"1\":{\"114\":1}}],[\"设置异步请求超时时间\",{\"1\":{\"113\":1}}],[\"设置默认的异步任务执行器\",{\"1\":{\"113\":1}}],[\"设置自定义日志属性\",{\"1\":{\"104\":1}}],[\"设置日志配置路径\",{\"1\":{\"104\":1}}],[\"设置滚动策略\",{\"1\":{\"103\":1}}],[\"设置文件名\",{\"1\":{\"103\":1}}],[\"设置各种属性\",{\"1\":{\"94\":1}}],[\"设置插件\",{\"1\":{\"93\":1}}],[\"设置mybatis原生配置文件\",{\"1\":{\"93\":1}}],[\"设置数据源\",{\"1\":{\"93\":1}}],[\"设计模式的深入理解与实践\",{\"1\":{\"3\":1}}],[\"设计思维提升\",{\"0\":{\"3\":1}}],[\"进而使用sqlsession的crud操作\",{\"1\":{\"93\":1}}],[\"进行验证\",{\"1\":{\"130\":1}}],[\"进行crud\",{\"1\":{\"89\":1}}],[\"进行统一异常处理\",{\"1\":{\"69\":1}}],[\"进行开发\",{\"1\":{\"33\":1}}],[\"具体条件实现\",{\"1\":{\"131\":1}}],[\"具有的底层能力\",{\"1\":{\"92\":1}}],[\"具备技术选型和评估能力\",{\"1\":{\"22\":1}}],[\"给容器中放了jdbctemplate操作数据库\",{\"1\":{\"92\":1}}],[\"给其他项目用时\",{\"1\":{\"79\":1}}],[\"文件缺少必要的信息\",{\"1\":{\"176\":1}}],[\"文件输出\",{\"0\":{\"101\":1}}],[\"文件\",{\"1\":{\"92\":1,\"166\":2,\"175\":1}}],[\"核心逻辑在\",{\"1\":{\"156\":1}}],[\"核心流程解析\",{\"1\":{\"155\":1}}],[\"核心启动原理\",{\"0\":{\"154\":1}}],[\"核心启动器分析\",{\"0\":{\"91\":1}}],[\"核心实现类\",{\"1\":{\"138\":1}}],[\"核心实现原理\",{\"0\":{\"104\":1}}],[\"核心组件\",{\"1\":{\"131\":1}}],[\"核心组件的装配\",{\"1\":{\"110\":1}}],[\"核心是其中的两个内部类webmvcautoconfigurationadapter和enablewebmvcconfiguration\",{\"1\":{\"111\":1}}],[\"核心类\",{\"0\":{\"111\":1,\"118\":1}}],[\"核心场景引入了日志的所用功能spring\",{\"1\":{\"97\":1}}],[\"核心库\",{\"1\":{\"91\":1}}],[\"核心依赖版本\",{\"1\":{\"74\":1}}],[\"导入普通类做为bean\",{\"1\":{\"147\":1}}],[\"导入配置类\",{\"1\":{\"140\":1,\"147\":1}}],[\"导入类型处理\",{\"1\":{\"140\":1}}],[\"导入依赖\",{\"1\":{\"108\":1}}],[\"导入任何第三方框架\",{\"1\":{\"102\":1}}],[\"导入\",{\"1\":{\"89\":1}}],[\"快速生成mapperxml\",{\"1\":{\"89\":1}}],[\"编写\",{\"1\":{\"89\":1,\"94\":1}}],[\"编写mapper\",{\"1\":{\"89\":1}}],[\"编写bean\",{\"1\":{\"89\":2}}],[\"编译器寻找类或其他资源文件的路径\",{\"1\":{\"127\":1}}],[\"编译时检查\",{\"1\":{\"188\":1}}],[\"编译时需要类\",{\"1\":{\"127\":1}}],[\"编译时工具\",{\"1\":{\"78\":1}}],[\"编译时有效\",{\"1\":{\"77\":1}}],[\"编译阶段不需要\",{\"1\":{\"77\":1}}],[\"编译和测试阶段有效\",{\"1\":{\"77\":1,\"78\":1}}],[\"编译\",{\"1\":{\"77\":1}}],[\"编译插件\",{\"1\":{\"74\":1,\"177\":1}}],[\"日志处理\",{\"0\":{\"151\":1}}],[\"日志系统初始化监听器\",{\"1\":{\"104\":1}}],[\"日志系统\",{\"1\":{\"104\":1}}],[\"日志系统自动配置类\",{\"1\":{\"104\":1}}],[\"日志文件保留天数\",{\"1\":{\"103\":1}}],[\"日志文件输出的文件名\",{\"1\":{\"103\":1}}],[\"日志分组\",{\"0\":{\"100\":1}}],[\"日志级别\",{\"0\":{\"99\":1}}],[\"日志所有的配置都可以通过修改配置文件实现\",{\"1\":{\"97\":1}}],[\"日志是系统一启动就要用\",{\"1\":{\"97\":1}}],[\"日志\",{\"1\":{\"88\":1},\"2\":{\"106\":1}}],[\"日常开发\",{\"1\":{\"33\":1}}],[\"日常开发流程建议\",{\"1\":{\"33\":1}}],[\"指定的默认属性\",{\"1\":{\"166\":1}}],[\"指定属性必须等于的值\",{\"1\":{\"126\":1}}],[\"指定mapper映射文件位置\",{\"1\":{\"88\":1}}],[\"指定内容协商时使用的参数名\",{\"1\":{\"66\":1}}],[\"65535\",{\"1\":{\"199\":1}}],[\"6\",{\"0\":{\"117\":1,\"143\":1,\"150\":1},\"1\":{\"116\":1}}],[\"60\",{\"1\":{\"103\":1,\"163\":1}}],[\"666666\",{\"1\":{\"87\":1}}],[\"6~8\",{\"1\":{\"61\":1}}],[\"整合日志系统\",{\"0\":{\"96\":1}}],[\"整合总结\",{\"1\":{\"89\":1}}],[\"整合mybatis实战\",{\"0\":{\"85\":1}}],[\"整合\",{\"0\":{\"84\":1},\"1\":{\"91\":1}}],[\"明确声明需要使用的数据库驱动\",{\"1\":{\"79\":1}}],[\"驱动\",{\"1\":{\"79\":2}}],[\"驱动的版本\",{\"1\":{\"72\":1}}],[\"支持条件筛选\",{\"1\":{\"141\":1}}],[\"支持导入普通类\",{\"1\":{\"140\":1}}],[\"支持方法参数依赖注入\",{\"1\":{\"139\":1}}],[\"支持方法参数注入\",{\"1\":{\"139\":1}}],[\"支持配置使用传统的\",{\"1\":{\"116\":1}}],[\"支持基于请求参数\",{\"1\":{\"114\":1}}],[\"支持controller层使用异步处理的方式接收请求\",{\"1\":{\"113\":1}}],[\"支持事务\",{\"1\":{\"92\":1}}],[\"支持\",{\"1\":{\"79\":1,\"91\":1}}],[\"支付服务\",{\"1\":{\"74\":1}}],[\"都是日志框架自己的配置\",{\"1\":{\"102\":1}}],[\"都会导入一个核心场景启动器spring\",{\"1\":{\"97\":1}}],[\"都会有一个父项目\",{\"1\":{\"72\":1}}],[\"都需要引入这两个数据库的依赖\",{\"1\":{\"79\":1}}],[\"还是\",{\"1\":{\"79\":1}}],[\"我们创建一个自定义的条件注解\",{\"1\":{\"130\":1}}],[\"我们可能会这样获取httpservletrequest对象\",{\"1\":{\"117\":1}}],[\"我不知道别人用的数据库是\",{\"1\":{\"79\":1}}],[\"我来解释一下分支管理策略和工作流程\",{\"1\":{\"33\":1}}],[\"我来修改一下再看看\",{\"1\":{\"33\":1}}],[\"我来修改一下看看\",{\"1\":{\"33\":1}}],[\"已提供运行环境\",{\"1\":{\"78\":1}}],[\"外部\",{\"1\":{\"78\":1}}],[\"像\",{\"1\":{\"78\":1}}],[\"打包过程详解\",{\"1\":{\"176\":1}}],[\"打包到最终制品\",{\"1\":{\"77\":1}}],[\"打包插件\",{\"1\":{\"74\":1}}],[\"否\",{\"1\":{\"77\":2}}],[\"阻止传递\",{\"1\":{\"77\":2}}],[\"特性\",{\"1\":{\"77\":1}}],[\"仅在测试阶段有效\",{\"1\":{\"77\":1}}],[\"或需要定制化配置的bean\",{\"1\":{\"139\":1}}],[\"或\",{\"1\":{\"127\":1,\"166\":2}}],[\"或容器提供\",{\"1\":{\"77\":1,\"78\":1}}],[\"或者没有配置spring\",{\"1\":{\"33\":2}}],[\"运行\",{\"1\":{\"155\":1,\"175\":1}}],[\"运行环境已存在的依赖\",{\"1\":{\"78\":1}}],[\"运行时检查\",{\"1\":{\"127\":1}}],[\"运行时不需要的依赖就可以使用\",{\"1\":{\"78\":1}}],[\"运行时有效\",{\"1\":{\"77\":1}}],[\"运行时由\",{\"1\":{\"77\":1,\"78\":1}}],[\"运行阶段都有效\",{\"1\":{\"77\":1}}],[\"会为所有\",{\"1\":{\"187\":2}}],[\"会调用这个方法来获取实际的\",{\"1\":{\"94\":1}}],[\"会扫描\",{\"1\":{\"94\":1}}],[\"会进行\",{\"1\":{\"94\":1}}],[\"会被打包到最终的\",{\"1\":{\"77\":2}}],[\"会自动使用父项目中定义的版本\",{\"1\":{\"72\":1}}],[\"会自适应处理错误\",{\"1\":{\"68\":1}}],[\"模板引擎目录\",{\"1\":{\"121\":1}}],[\"模块进行打包时\",{\"1\":{\"175\":1}}],[\"模块化配置\",{\"1\":{\"147\":1}}],[\"模块\",{\"0\":{\"178\":1,\"179\":1},\"1\":{\"76\":2,\"175\":2}}],[\"模式切换\",{\"0\":{\"61\":1}}],[\"标准的spring\",{\"1\":{\"145\":1}}],[\"标记为可选\",{\"1\":{\"79\":2}}],[\"标记为可选依赖\",{\"1\":{\"76\":1}}],[\"标记\",{\"0\":{\"76\":1,\"77\":1}}],[\"标记和provided\",{\"0\":{\"75\":1}}],[\"标注注解\",{\"1\":{\"66\":1}}],[\"便于调试\",{\"1\":{\"74\":1,\"178\":1}}],[\"便于回滚和维护\",{\"1\":{\"33\":1}}],[\"子模块按需配置特定插件\",{\"1\":{\"180\":1}}],[\"子模块商品服务模块的\",{\"1\":{\"74\":1}}],[\"子模块管理\",{\"1\":{\"74\":1}}],[\"仓库配置\",{\"1\":{\"74\":1}}],[\"$\",{\"1\":{\"74\":2,\"103\":1,\"129\":2}}],[\"插件管理\",{\"1\":{\"177\":1}}],[\"插件注册\",{\"1\":{\"93\":1}}],[\"插件\",{\"1\":{\"74\":1,\"177\":1}}],[\"测试代码复杂\",{\"1\":{\"189\":1}}],[\"测试困难\",{\"1\":{\"189\":1}}],[\"测试友好\",{\"1\":{\"188\":1}}],[\"测试环境配置\",{\"1\":{\"103\":1}}],[\"测试crud\",{\"1\":{\"89\":1}}],[\"测试和运行阶段有效\",{\"1\":{\"77\":1}}],[\"测试\",{\"1\":{\"77\":1}}],[\"测试依赖\",{\"1\":{\"74\":1}}],[\"测试一下\",{\"1\":{\"33\":1}}],[\"测试一下这个容器\",{\"1\":{\"33\":1}}],[\"相关依赖变成可选的\",{\"1\":{\"127\":1}}],[\"相关类时才创建\",{\"1\":{\"127\":1}}],[\"相关的日志统一设置\",{\"1\":{\"100\":1}}],[\"相关插件\",{\"1\":{\"93\":1}}],[\"相关\",{\"1\":{\"74\":2}}],[\"网关服务\",{\"1\":{\"74\":1}}],[\"商品服务\",{\"1\":{\"74\":1}}],[\"用来扫描对应的\",{\"1\":{\"94\":1}}],[\"用于嵌套配置\",{\"1\":{\"199\":1}}],[\"用于根据配置文件中的属性值来决定是否创建\",{\"1\":{\"126\":1}}],[\"用于配置\",{\"1\":{\"112\":1}}],[\"用于控制依赖的使用范围\",{\"1\":{\"77\":1}}],[\"用于网站部署\",{\"1\":{\"33\":1}}],[\"用户服务\",{\"1\":{\"74\":1}}],[\"公共依赖\",{\"1\":{\"74\":1}}],[\"公共模块\",{\"1\":{\"74\":2}}],[\"公共插件管理\",{\"1\":{\"73\":1}}],[\"监控相关\",{\"1\":{\"74\":1}}],[\"监控告警\",{\"1\":{\"7\":1}}],[\"xnqqkmpfuvpjaxhny09b1w\",{\"1\":{\"151\":1}}],[\"x\",{\"1\":{\"103\":4,\"116\":1,\"151\":1,\"176\":4}}],[\"xadatasourceautoconfiguration\",{\"1\":{\"92\":1}}],[\"xxxproperties\",{\"1\":{\"184\":1}}],[\"xxxautoconfiguration\",{\"1\":{\"97\":1}}],[\"xxx\",{\"1\":{\"94\":2,\"175\":1}}],[\"xx\",{\"1\":{\"82\":1}}],[\"xiaoymin<\",{\"1\":{\"74\":1}}],[\"xsd\",{\"1\":{\"74\":6,\"79\":2}}],[\"xsi\",{\"1\":{\"74\":3,\"79\":1}}],[\"xsi=\",{\"1\":{\"74\":3,\"79\":1}}],[\"xmlschema\",{\"1\":{\"74\":3,\"79\":1}}],[\"xmlns\",{\"1\":{\"74\":3,\"79\":1}}],[\"xmlns=\",{\"1\":{\"74\":3,\"79\":1}}],[\"xml<\",{\"1\":{\"66\":1}}],[\"xml\",{\"0\":{\"103\":1},\"1\":{\"64\":1,\"65\":1,\"66\":1,\"73\":1,\"74\":4,\"79\":2,\"88\":1,\"89\":1,\"93\":1,\"102\":2,\"103\":1,\"104\":1,\"112\":1,\"174\":1}}],[\"包中\",{\"1\":{\"176\":1}}],[\"包不会被包含在最终的\",{\"1\":{\"176\":1}}],[\"包内部的\",{\"1\":{\"166\":1}}],[\"包外部的\",{\"1\":{\"166\":1}}],[\"包含所有依赖\",{\"1\":{\"176\":1}}],[\"包含\",{\"1\":{\"156\":1}}],[\"包含多个模块\",{\"1\":{\"74\":1}}],[\"包扫描机制\",{\"1\":{\"138\":1}}],[\"包括\",{\"1\":{\"138\":1}}],[\"包括直接依赖和传递依赖\",{\"1\":{\"127\":1}}],[\"包括远程\",{\"1\":{\"33\":1}}],[\"包\",{\"1\":{\"127\":1,\"176\":1}}],[\"包下面的\",{\"1\":{\"92\":1}}],[\"假设以一个电商系统为例\",{\"1\":{\"74\":1}}],[\"比如logback\",{\"1\":{\"102\":1}}],[\"比如\",{\"1\":{\"100\":1}}],[\"比如公司统一的父\",{\"1\":{\"73\":1}}],[\"比较一下使用和不使用\",{\"1\":{\"73\":1}}],[\"父\",{\"0\":{\"177\":1}}],[\"父工程\",{\"1\":{\"73\":1}}],[\"父项目中已经定义了\",{\"1\":{\"72\":1}}],[\"直接导入类\",{\"1\":{\"140\":1}}],[\"直接导入指定的类\",{\"1\":{\"140\":1}}],[\"直接导入指定类作为组件\",{\"1\":{\"140\":1}}],[\"直接注册为bean\",{\"1\":{\"140\":1}}],[\"直接标注在类上\",{\"1\":{\"138\":1}}],[\"直接使用类引用\",{\"1\":{\"127\":1}}],[\"直接在依赖中指定版本号\",{\"1\":{\"72\":1}}],[\"直接去找对应的映射路径\",{\"1\":{\"57\":1}}],[\"它已经默认配置了\",{\"1\":{\"174\":1}}],[\"它包括\",{\"1\":{\"127\":1}}],[\"它的\",{\"1\":{\"94\":1}}],[\"它的主要组成\",{\"1\":{\"91\":1}}],[\"它把所有常见的jar的依赖版本都声明好了\",{\"1\":{\"72\":1}}],[\"它在\",{\"1\":{\"72\":2}}],[\"版本仲裁中心\",{\"1\":{\"72\":1}}],[\"版本配置\",{\"1\":{\"72\":1}}],[\"避免\",{\"1\":{\"188\":1}}],[\"避免循环依赖\",{\"1\":{\"188\":1}}],[\"避免版本冲突\",{\"1\":{\"72\":2}}],[\"避免精度丢失\",{\"1\":{\"70\":1}}],[\"也没用\",{\"1\":{\"196\":1}}],[\"也只需要把\",{\"1\":{\"102\":1}}],[\"也可以加指定路径\",{\"1\":{\"101\":1}}],[\"也支持\",{\"1\":{\"100\":1}}],[\"也就是说\",{\"1\":{\"76\":1}}],[\"也称之为\",{\"1\":{\"72\":1}}],[\"也有一个父项目\",{\"1\":{\"72\":1}}],[\"也会开启spring\",{\"1\":{\"33\":1}}],[\"而生效的条件是需要将\",{\"1\":{\"196\":1}}],[\"而像公共模块以及\",{\"1\":{\"175\":1}}],[\"而在多模块系统使用\",{\"1\":{\"174\":1}}],[\"而实现自动配置的关键类就是\",{\"1\":{\"109\":1}}],[\"而spring\",{\"1\":{\"108\":1}}],[\"而mapperscannerconfigurer\",{\"1\":{\"94\":1}}],[\"而这个类实现了\",{\"1\":{\"94\":1}}],[\"而这个父项目\",{\"1\":{\"72\":1}}],[\"而且方法内部步骤非常多\",{\"1\":{\"93\":1}}],[\"而当我们打\",{\"1\":{\"78\":1}}],[\"而如果需要使用不同于\",{\"1\":{\"72\":1}}],[\"而\",{\"1\":{\"72\":2,\"94\":1,\"110\":1}}],[\"8848<\",{\"1\":{\"74\":3}}],[\"8<\",{\"1\":{\"74\":3,\"103\":3,\"177\":1}}],[\"8\",{\"1\":{\"72\":1,\"74\":4,\"79\":1,\"87\":1,\"89\":1,\"103\":1}}],[\"当处于开发环境且启用了监控时才创建监控\",{\"1\":{\"129\":1}}],[\"当容器中不存在指定的\",{\"1\":{\"128\":1}}],[\"当类路径下存在指定的类时\",{\"1\":{\"127\":1}}],[\"当配置文件中\",{\"1\":{\"126\":1}}],[\"当前的项目也自动获得\",{\"1\":{\"174\":1}}],[\"当前项目的编译输出目录\",{\"1\":{\"127\":1}}],[\"当前类路径下必须有servlet类\",{\"1\":{\"110\":1}}],[\"当前环境必须是webmvc\",{\"1\":{\"110\":1}}],[\"当前运行环境必须有servlet类\",{\"1\":{\"110\":1}}],[\"当前自动配置会在以下几个配置类解析后再处理\",{\"1\":{\"110\":1}}],[\"当springboot\",{\"1\":{\"107\":1}}],[\"当scan为true时\",{\"1\":{\"103\":1}}],[\"当此属性设置为true时\",{\"1\":{\"103\":2}}],[\"当\",{\"1\":{\"78\":1,\"126\":3}}],[\"当项目\",{\"1\":{\"76\":1}}],[\"当我们引入某些\",{\"1\":{\"97\":1}}],[\"当我们构建一个多模块项目时\",{\"1\":{\"73\":1}}],[\"当我们使用\",{\"1\":{\"72\":1}}],[\"当依赖\",{\"1\":{\"71\":1}}],[\"管理的项目\",{\"1\":{\"174\":1}}],[\"管理\",{\"0\":{\"72\":1,\"73\":1}}],[\"管理等多个维度不断成长\",{\"1\":{\"25\":1}}],[\"中的配置项自动映射到\",{\"1\":{\"184\":1}}],[\"中的\",{\"1\":{\"166\":1}}],[\"中的是可选依赖\",{\"1\":{\"76\":1}}],[\"中获取\",{\"1\":{\"94\":1}}],[\"中\",{\"1\":{\"77\":4,\"78\":1,\"79\":1,\"89\":1,\"184\":1,\"186\":1}}],[\"中显式声明对项目\",{\"1\":{\"76\":1}}],[\"中覆盖版本属性\",{\"1\":{\"72\":1}}],[\"中定义了几百个依赖的版本号\",{\"1\":{\"72\":2}}],[\"中包含依赖\",{\"1\":{\"71\":2}}],[\"中进行了定义\",{\"1\":{\"53\":1,\"54\":1}}],[\"首先获取所有条件注解\",{\"1\":{\"131\":1}}],[\"首先这个类会导入\",{\"1\":{\"111\":1}}],[\"首先我们看一张典型的日志系统架构图\",{\"1\":{\"104\":1}}],[\"首先会构建\",{\"1\":{\"94\":1}}],[\"首先是根项目的\",{\"1\":{\"74\":1}}],[\"首先\",{\"1\":{\"71\":1,\"130\":1}}],[\"格式化的日期\",{\"1\":{\"70\":1}}],[\"添加\",{\"1\":{\"176\":1,\"187\":1}}],[\"添加后的效果\",{\"1\":{\"70\":1}}],[\"添加自定义消息转换器\",{\"1\":{\"70\":1}}],[\"将其注入到\",{\"1\":{\"196\":1}}],[\"将大部分依赖标记为\",{\"1\":{\"178\":1}}],[\"将原始\",{\"1\":{\"176\":1}}],[\"将原始的\",{\"1\":{\"94\":2}}],[\"将返回的类名对应的类注册为\",{\"1\":{\"141\":1}}],[\"将指定类注册为bean\",{\"1\":{\"140\":1}}],[\"将方法返回的对象注册为bean\",{\"1\":{\"139\":1}}],[\"将符合条件的类转换为beandefinition\",{\"1\":{\"138\":1}}],[\"将类转换为beandefinition\",{\"1\":{\"138\":1}}],[\"将类注册为spring组件\",{\"1\":{\"138\":1}}],[\"将打印出logback内部日志信息\",{\"1\":{\"103\":1}}],[\"将会被重新加载\",{\"1\":{\"103\":1}}],[\"将相关的logger分组在一起\",{\"1\":{\"100\":1}}],[\"将\",{\"1\":{\"94\":2}}],[\"将自定义的转换器添加到首位\",{\"1\":{\"70\":1}}],[\"将更改合并到\",{\"1\":{\"33\":1}}],[\"withdetail\",{\"1\":{\"162\":1}}],[\"worktimeservice\",{\"1\":{\"130\":4}}],[\"worktimeconfiguration\",{\"1\":{\"130\":1}}],[\"where\",{\"1\":{\"89\":1}}],[\"warn\",{\"1\":{\"99\":2,\"103\":1}}],[\"war包进行部署时\",{\"1\":{\"78\":1}}],[\"war\",{\"1\":{\"77\":4,\"78\":1}}],[\"w3\",{\"1\":{\"74\":3,\"79\":1}}],[\"www\",{\"1\":{\"74\":3,\"79\":1,\"104\":1,\"151\":1}}],[\"write\",{\"1\":{\"70\":1}}],[\"weixin\",{\"1\":{\"151\":1}}],[\"welcomepagehandlermapping\",{\"1\":{\"121\":2}}],[\"webapplicationtype\",{\"1\":{\"155\":2}}],[\"webproperties\",{\"1\":{\"111\":3,\"122\":4}}],[\"web依赖后\",{\"1\":{\"110\":1}}],[\"webresourcesruntimehints\",{\"1\":{\"110\":1}}],[\"webclientautoconfiguration\",{\"1\":{\"108\":1}}],[\"websessionidresolverautoconfiguration\",{\"1\":{\"108\":1}}],[\"webfluxautoconfiguration\",{\"1\":{\"108\":1}}],[\"web=debug\",{\"1\":{\"99\":1}}],[\"web<\",{\"1\":{\"74\":2,\"77\":1,\"86\":1,\"108\":1,\"178\":1,\"179\":1}}],[\"webmvcproperties\",{\"1\":{\"111\":3,\"114\":1,\"116\":1}}],[\"webmvc的装配在\",{\"1\":{\"111\":1}}],[\"webmvcconfigurationsupport\",{\"1\":{\"110\":1}}],[\"webmvcconfigurer类\",{\"1\":{\"110\":2}}],[\"webmvcconfigurer\",{\"1\":{\"58\":1,\"70\":1,\"110\":1,\"111\":2}}],[\"webmvc\",{\"1\":{\"107\":1}}],[\"webmvcautoconfiguration中完成\",{\"1\":{\"111\":1}}],[\"webmvcautoconfigurationadapter\",{\"0\":{\"111\":1},\"1\":{\"111\":2}}],[\"webmvcautoconfiguration才会生效\",{\"1\":{\"110\":1}}],[\"webmvcautoconfiguration\",{\"1\":{\"53\":1,\"54\":1,\"108\":1,\"109\":1,\"110\":2}}],[\"webjars\",{\"1\":{\"53\":2,\"115\":2}}],[\"web\",{\"0\":{\"51\":1,\"107\":1},\"1\":{\"57\":2,\"74\":1,\"97\":1,\"107\":1,\"108\":16,\"111\":1,\"155\":1}}],[\"weaver\",{\"1\":{\"33\":1}}],[\"禁用时间戳功能\",{\"1\":{\"70\":1}}],[\"型数据序列化为字符串\",{\"1\":{\"70\":1}}],[\"yml\",{\"0\":{\"198\":1},\"1\":{\"89\":1,\"126\":3,\"166\":2,\"184\":1}}],[\"yml<\",{\"1\":{\"74\":6}}],[\"yyyy\",{\"1\":{\"70\":1,\"103\":4,\"104\":1}}],[\"yaml文件的配置项\",{\"1\":{\"184\":1}}],[\"yaml中配置logging\",{\"1\":{\"99\":1}}],[\"yaml\",{\"1\":{\"64\":1}}],[\"转换为可执行\",{\"1\":{\"176\":1}}],[\"转换器\",{\"1\":{\"70\":1}}],[\"转发给\",{\"1\":{\"68\":1}}],[\"lib\",{\"1\":{\"176\":3}}],[\"limit\",{\"1\":{\"170\":1}}],[\"list<databaseproperties\",{\"1\":{\"184\":1,\"186\":2,\"187\":1}}],[\"list<connectionconfig>\",{\"1\":{\"184\":1}}],[\"list<string>\",{\"1\":{\"156\":1}}],[\"list<httpmessageconverter<\",{\"1\":{\"70\":1,\"112\":1}}],[\"listeners\",{\"1\":{\"155\":1}}],[\"linuxos\",{\"1\":{\"126\":10}}],[\"linuxos实例\",{\"1\":{\"126\":1}}],[\"linux\",{\"1\":{\"126\":3}}],[\"language参数\",{\"1\":{\"122\":1}}],[\"lang3<\",{\"1\":{\"74\":2}}],[\"lang3\",{\"1\":{\"74\":3}}],[\"level=\",{\"1\":{\"103\":7}}],[\"level>\",{\"1\":{\"103\":1}}],[\"level可取值范围\",{\"1\":{\"99\":1}}],[\"level\",{\"1\":{\"99\":5,\"100\":1}}],[\"loader\",{\"1\":{\"176\":2}}],[\"loadbalancer<\",{\"1\":{\"74\":1}}],[\"lock\",{\"1\":{\"170\":1}}],[\"lockkey\",{\"1\":{\"170\":2}}],[\"localtime\",{\"1\":{\"130\":6}}],[\"locale配置项后\",{\"1\":{\"122\":1}}],[\"localeresolver才会被创建\",{\"1\":{\"122\":1}}],[\"localeresolver是springwebmvc针对国际化支持的核心接口\",{\"1\":{\"122\":1}}],[\"localeresolver\",{\"1\":{\"122\":6}}],[\"locale\",{\"1\":{\"122\":2}}],[\"localhost\",{\"1\":{\"55\":1,\"184\":1}}],[\"location\",{\"1\":{\"94\":1,\"115\":1}}],[\"locations\",{\"1\":{\"88\":1}}],[\"locations=classpath\",{\"1\":{\"57\":1}}],[\"lombok\",{\"1\":{\"74\":1,\"78\":2,\"187\":2}}],[\"long型转为字符串\",{\"1\":{\"70\":1}}],[\"long型数据精度丢失\",{\"1\":{\"70\":1}}],[\"long型数据可能精度丢失\",{\"1\":{\"70\":1}}],[\"long\",{\"1\":{\"66\":1,\"70\":4,\"164\":1,\"184\":2,\"186\":2,\"187\":1,\"199\":1}}],[\"logautoconfiguration\",{\"1\":{\"158\":1}}],[\"logproperties\",{\"1\":{\"158\":2}}],[\"log<\",{\"1\":{\"103\":4}}],[\"loggercontext\",{\"1\":{\"104\":1}}],[\"logger>\",{\"1\":{\"103\":1}}],[\"logger\",{\"1\":{\"103\":2,\"104\":1,\"115\":1}}],[\"loggingapplicationlistener\",{\"1\":{\"104\":1}}],[\"loggingsystemproperties\",{\"1\":{\"104\":4}}],[\"loggingsystem\",{\"1\":{\"104\":5}}],[\"logging\",{\"1\":{\"88\":1,\"97\":1,\"99\":3,\"100\":2,\"101\":1,\"103\":4,\"104\":3}}],[\"logservice\",{\"1\":{\"158\":4}}],[\"logs\",{\"1\":{\"103\":1,\"104\":1}}],[\"log4j2\",{\"1\":{\"102\":1}}],[\"loglevel类中\",{\"1\":{\"99\":1}}],[\"logbackloggingsystem\",{\"1\":{\"104\":1}}],[\"logbackautoconfiguration\",{\"1\":{\"104\":1}}],[\"logback\",{\"0\":{\"103\":1},\"1\":{\"97\":1,\"102\":1,\"103\":8,\"104\":3}}],[\"log\",{\"1\":{\"61\":1,\"88\":1,\"101\":1,\"103\":11,\"104\":1,\"158\":2,\"201\":1}}],[\"场景启动器依赖时\",{\"1\":{\"97\":1}}],[\"场景的自动配置\",{\"0\":{\"92\":1}}],[\"场景\",{\"1\":{\"70\":1,\"79\":1,\"196\":1}}],[\"空值被忽略\",{\"1\":{\"70\":1}}],[\"空值处理等问题\",{\"1\":{\"70\":1}}],[\"空值也会返回\",{\"1\":{\"70\":1}}],[\"空间分配率\",{\"1\":{\"61\":1}}],[\"张三\",{\"1\":{\"70\":2}}],[\"处理事件\",{\"1\":{\"160\":1}}],[\"处理缓存和作用域\",{\"1\":{\"143\":1}}],[\"处理流程\",{\"1\":{\"140\":1,\"141\":1}}],[\"处理配置类\",{\"1\":{\"138\":1}}],[\"处理方法返回值的转换\",{\"1\":{\"120\":1}}],[\"处理方法参数的解析和绑定\",{\"1\":{\"120\":1}}],[\"处理器适配器handleradapter会拿到handlermapping匹配成功的handler\",{\"1\":{\"120\":1}}],[\"处理器映射器的作用是根据请求url去匹配查找能处理的handler\",{\"1\":{\"119\":1}}],[\"处理参数绑定\",{\"1\":{\"120\":1}}],[\"处理静态资源\",{\"1\":{\"112\":1}}],[\"处理字节数组\",{\"1\":{\"112\":1}}],[\"处理字符串\",{\"1\":{\"112\":1}}],[\"处理扫描到的\",{\"1\":{\"94\":1}}],[\"处理\",{\"1\":{\"74\":1,\"112\":1,\"119\":1,\"139\":1}}],[\"处理特殊字符编码\",{\"1\":{\"70\":1}}],[\"处理前端精度丢失问题\",{\"1\":{\"70\":1}}],[\"统一管理插件\",{\"1\":{\"180\":1}}],[\"统一管理版本号\",{\"1\":{\"74\":1}}],[\"统一版本管理\",{\"1\":{\"177\":1}}],[\"统一结果\",{\"0\":{\"151\":1}}],[\"统一配置\",{\"1\":{\"100\":1}}],[\"统一空值处理\",{\"1\":{\"70\":1}}],[\"统一日期格式\",{\"1\":{\"70\":1}}],[\"常规\",{\"1\":{\"141\":1}}],[\"常用于集成第三方库或者自定义\",{\"1\":{\"196\":1}}],[\"常用于第三方类的注册\",{\"1\":{\"139\":1}}],[\"常用于解决\",{\"1\":{\"70\":1}}],[\"常见的条件注解\",{\"0\":{\"125\":1}}],[\"常见的所有特性\",{\"1\":{\"109\":1}}],[\"常见的值有\",{\"1\":{\"77\":1}}],[\"常见日志配置\",{\"0\":{\"98\":1}}],[\"常见性能问题诊断与调优\",{\"1\":{\"2\":1}}],[\"方式\",{\"1\":{\"73\":2}}],[\"方法的执行流程\",{\"1\":{\"168\":1}}],[\"方法上\",{\"1\":{\"126\":1}}],[\"方法返回的才是真正放入到\",{\"1\":{\"94\":1}}],[\"方法中的\",{\"1\":{\"94\":1}}],[\"方法会在\",{\"1\":{\"94\":1}}],[\"方法进行注册\",{\"1\":{\"94\":1}}],[\"方法是真正创建sqlsessionfactory对象的方法\",{\"1\":{\"93\":1}}],[\"方法\",{\"1\":{\"70\":1,\"93\":1,\"94\":1,\"131\":1,\"141\":1}}],[\"方便管理开发和部署版本\",{\"1\":{\"33\":1}}],[\"然后进行注册\",{\"1\":{\"94\":1}}],[\"然后执行扫描工作\",{\"1\":{\"94\":1}}],[\"然后设置各种属性\",{\"1\":{\"94\":1}}],[\"然后重写\",{\"1\":{\"70\":1}}],[\"然后提交\",{\"1\":{\"33\":1}}],[\"接口实现类\",{\"1\":{\"130\":1}}],[\"接口的实现类\",{\"1\":{\"130\":1}}],[\"接口的类\",{\"1\":{\"130\":1}}],[\"接口的注册机制\",{\"0\":{\"94\":1}}],[\"接口类型作为构造参数\",{\"1\":{\"94\":2}}],[\"接口改为\",{\"1\":{\"94\":2}}],[\"接口路径\",{\"1\":{\"94\":1}}],[\"接口一般都需要在启动类或者配置类上加上注解\",{\"1\":{\"94\":1}}],[\"接口模块\",{\"1\":{\"74\":1}}],[\"接口文档\",{\"1\":{\"74\":2}}],[\"接口需要统一处理日期格式\",{\"1\":{\"70\":1}}],[\"接口\",{\"1\":{\"70\":1,\"94\":1,\"111\":1,\"130\":1,\"131\":1}}],[\"587\",{\"1\":{\"198\":1}}],[\"52bf7bf6\",{\"1\":{\"126\":1}}],[\"5000\",{\"1\":{\"184\":1}}],[\"50\",{\"1\":{\"103\":2,\"104\":1}}],[\"503\",{\"1\":{\"68\":1}}],[\"5level\",{\"1\":{\"103\":2,\"104\":1}}],[\"5\",{\"0\":{\"116\":1,\"142\":1,\"149\":1},\"1\":{\"72\":1,\"74\":3,\"116\":1,\"176\":1,\"184\":1}}],[\"5<\",{\"1\":{\"72\":2}}],[\"5xx\",{\"1\":{\"68\":2}}],[\"4<\",{\"1\":{\"74\":1}}],[\"4\",{\"0\":{\"75\":1,\"89\":1,\"122\":1,\"141\":1,\"148\":1,\"201\":1},\"1\":{\"74\":10,\"79\":3,\"115\":1,\"184\":1,\"186\":1}}],[\"49<\",{\"1\":{\"72\":2}}],[\"4xx\",{\"1\":{\"68\":1}}],[\"403\",{\"1\":{\"68\":1}}],[\"404\",{\"1\":{\"68\":1,\"207\":1}}],[\"就是为了代码的健壮性\",{\"1\":{\"185\":1}}],[\"就是将配置文件\",{\"1\":{\"184\":1}}],[\"就使用这个默认实现\",{\"1\":{\"128\":1}}],[\"就默认展示这个页面\",{\"1\":{\"121\":1}}],[\"就可以调整日志的所有行为\",{\"1\":{\"102\":1}}],[\"就需要移除\",{\"1\":{\"78\":1}}],[\"就同时拥有依赖\",{\"1\":{\"71\":1}}],[\"就直接渲染\",{\"1\":{\"68\":1}}],[\"就去找5xx\",{\"1\":{\"68\":1}}],[\"就会缓存一段时间\",{\"1\":{\"53\":1}}],[\"精确码\",{\"1\":{\"68\":2}}],[\"返回值处理等\",{\"1\":{\"120\":1}}],[\"返回\",{\"1\":{\"68\":1}}],[\"返回html\",{\"1\":{\"68\":1}}],[\"vs\",{\"0\":{\"186\":1}}],[\"v3\",{\"1\":{\"127\":1}}],[\"version\",{\"1\":{\"74\":20,\"79\":1,\"89\":1,\"127\":1,\"176\":3,\"177\":4}}],[\"version=\",{\"1\":{\"74\":3,\"79\":1,\"89\":1,\"103\":1}}],[\"version>1\",{\"1\":{\"74\":2}}],[\"version>17<\",{\"1\":{\"74\":1,\"79\":1,\"177\":1}}],[\"version>4\",{\"1\":{\"74\":2}}],[\"version>5\",{\"1\":{\"72\":1,\"74\":1}}],[\"version>2022\",{\"1\":{\"74\":1}}],[\"version>2023\",{\"1\":{\"74\":1}}],[\"version>2\",{\"1\":{\"72\":1}}],[\"version>8\",{\"1\":{\"72\":1,\"74\":2}}],[\"version>32\",{\"1\":{\"74\":1}}],[\"version>3\",{\"1\":{\"72\":1,\"74\":4,\"79\":1,\"177\":1}}],[\"version>\",{\"1\":{\"72\":7,\"73\":7,\"74\":36,\"79\":5,\"86\":2,\"177\":6}}],[\"validated\",{\"1\":{\"199\":1}}],[\"validationautoconfiguration会先于webmvcautoconfiguration进行解析\",{\"1\":{\"110\":1}}],[\"validationautoconfiguration\",{\"1\":{\"110\":1}}],[\"validation<\",{\"1\":{\"74\":2}}],[\"valueof\",{\"1\":{\"170\":1}}],[\"value=\",{\"1\":{\"103\":3}}],[\"value\",{\"1\":{\"68\":2,\"159\":1,\"164\":1,\"167\":2}}],[\"van\",{\"1\":{\"74\":3,\"89\":4,\"103\":3,\"126\":2,\"142\":1,\"176\":3}}],[\"van<\",{\"1\":{\"73\":2,\"79\":1}}],[\"void\",{\"1\":{\"58\":1,\"70\":1,\"89\":1,\"93\":1,\"94\":4,\"104\":3,\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"142\":1,\"155\":1,\"160\":2,\"166\":1,\"171\":1,\"184\":1,\"186\":2,\"187\":1,\"201\":1}}],[\"专门处理这个请求\",{\"1\":{\"68\":1}}],[\"专为面试打造\",{\"1\":{\"33\":1}}],[\"发件人邮箱\",{\"1\":{\"199\":1}}],[\"发布事件\",{\"1\":{\"160\":1}}],[\"发生错误以后\",{\"1\":{\"68\":1}}],[\"发送请求\",{\"1\":{\"65\":2}}],[\"两大核心机制\",{\"1\":{\"68\":1}}],[\"效果\",{\"1\":{\"66\":1,\"89\":1}}],[\"效果演示\",{\"0\":{\"66\":1}}],[\"equals\",{\"1\":{\"116\":1}}],[\"embeddedwebserverfactorycustomizerautoconfiguration\",{\"1\":{\"108\":1}}],[\"embedded\",{\"1\":{\"108\":1}}],[\"emailservice\",{\"1\":{\"200\":3,\"201\":2}}],[\"emailconfiguration\",{\"1\":{\"200\":1}}],[\"emailproperties\",{\"1\":{\"199\":1,\"200\":4,\"201\":2}}],[\"email\",{\"1\":{\"66\":1,\"198\":1,\"199\":2,\"201\":1}}],[\"event\",{\"1\":{\"104\":9,\"160\":1}}],[\"e\",{\"1\":{\"94\":3,\"167\":6}}],[\"elementtype\",{\"1\":{\"94\":1,\"130\":6,\"156\":1,\"159\":2}}],[\"else\",{\"1\":{\"79\":1,\"104\":1}}],[\"expire\",{\"1\":{\"170\":1}}],[\"example\",{\"1\":{\"141\":2}}],[\"example<\",{\"1\":{\"79\":1}}],[\"executor\",{\"1\":{\"113\":2,\"163\":9}}],[\"executions>\",{\"1\":{\"74\":2,\"174\":1,\"178\":1,\"179\":1}}],[\"execution>\",{\"1\":{\"74\":2,\"174\":1,\"178\":1,\"179\":1}}],[\"extends\",{\"1\":{\"94\":2,\"141\":1,\"160\":1,\"166\":1}}],[\"exclusions\",{\"1\":{\"156\":2}}],[\"excludes>\",{\"1\":{\"74\":2}}],[\"exclude>\",{\"1\":{\"74\":3}}],[\"exception\",{\"1\":{\"93\":3,\"94\":2,\"143\":1,\"167\":2}}],[\"exceptionhandlerexceptionresolver\",{\"1\":{\"123\":2}}],[\"exceptionhandler\",{\"1\":{\"69\":1,\"167\":2}}],[\"endtime\",{\"1\":{\"130\":2}}],[\"end\",{\"1\":{\"130\":5}}],[\"encoder>\",{\"1\":{\"103\":3}}],[\"encoding>\",{\"1\":{\"74\":1,\"177\":1}}],[\"encoding=\",{\"1\":{\"74\":3,\"79\":1,\"89\":1,\"103\":1}}],[\"entity\",{\"1\":{\"89\":1}}],[\"en\",{\"1\":{\"89\":1}}],[\"environment\",{\"1\":{\"104\":6,\"155\":1,\"166\":2}}],[\"env\",{\"1\":{\"74\":2,\"166\":1}}],[\"env>\",{\"1\":{\"74\":3}}],[\"enablessl\",{\"1\":{\"184\":2}}],[\"enablecaching\",{\"1\":{\"164\":1}}],[\"enableconfigurationproperties中添加被\",{\"1\":{\"196\":1}}],[\"enableconfigurationproperties\",{\"0\":{\"195\":1,\"196\":1,\"202\":1},\"1\":{\"79\":1,\"93\":1,\"111\":1,\"158\":1,\"196\":2,\"200\":1}}],[\"enabled=true\",{\"1\":{\"158\":1}}],[\"enabled\",{\"1\":{\"129\":1}}],[\"enabled>\",{\"1\":{\"74\":2}}],[\"enablewebmvcconfiguration\",{\"0\":{\"118\":1},\"1\":{\"111\":2}}],[\"enablewebmvc注解\",{\"1\":{\"58\":1}}],[\"enableautoconfiguration\",{\"1\":{\"156\":3,\"168\":1}}],[\"enableautoconfiguration注解使用\",{\"1\":{\"108\":1}}],[\"enableaspectjautoproxy会注册annotationawareaspectjautoproxycreator\",{\"1\":{\"33\":1}}],[\"enableaspectjautoproxy\",{\"1\":{\"33\":2}}],[\"errorresponse\",{\"1\":{\"167\":4}}],[\"errormvcautoconfiguration\",{\"1\":{\"108\":1}}],[\"errorwebfluxautoconfiguration\",{\"1\":{\"108\":1}}],[\"error\",{\"1\":{\"68\":5,\"94\":1,\"99\":1,\"103\":8,\"108\":2,\"167\":6}}],[\"errorhtml\",{\"1\":{\"68\":1}}],[\"error路径\",{\"1\":{\"68\":1}}],[\"和依赖\",{\"1\":{\"71\":1}}],[\"和\",{\"1\":{\"66\":1,\"93\":2}}],[\"类中\",{\"1\":{\"156\":1}}],[\"类路径指的是\",{\"1\":{\"127\":1}}],[\"类路径\",{\"1\":{\"127\":1}}],[\"类是实现了beandefinitionregistrypostprocessor\",{\"1\":{\"94\":1}}],[\"类型的\",{\"1\":{\"128\":1}}],[\"类型servlet\",{\"1\":{\"110\":1}}],[\"类型处理器注册\",{\"1\":{\"93\":1}}],[\"类型别名注册\",{\"1\":{\"93\":1}}],[\"类型数据\",{\"1\":{\"65\":2}}],[\"类\",{\"1\":{\"93\":1}}],[\"类加载机制\",{\"0\":{\"46\":1},\"1\":{\"2\":1}}],[\"携带http标准的\",{\"1\":{\"64\":1}}],[\"客户端向服务端发送请求\",{\"1\":{\"64\":1}}],[\"内容示例\",{\"1\":{\"176\":1}}],[\"内容协商配置\",{\"0\":{\"114\":1},\"1\":{\"114\":1}}],[\"内容协商\",{\"0\":{\"62\":1}}],[\"内嵌的\",{\"1\":{\"78\":1}}],[\"内部静态类\",{\"1\":{\"199\":1}}],[\"内部类\",{\"1\":{\"184\":2}}],[\"内部依赖\",{\"1\":{\"74\":1}}],[\"内部模块依赖\",{\"1\":{\"74\":1,\"179\":1}}],[\"内存模型与垃圾回收机制\",{\"1\":{\"2\":1}}],[\"替换成ant风格路径\",{\"1\":{\"61\":1}}],[\"是将普通\",{\"1\":{\"176\":1}}],[\"是无法直接运行的\",{\"1\":{\"176\":1}}],[\"是不需要打包为可执行的\",{\"1\":{\"175\":1}}],[\"是可执行文件\",{\"1\":{\"175\":1}}],[\"是否启用参数方式的内容协商\",{\"1\":{\"114\":1}}],[\"是否使用lastmodified头\",{\"1\":{\"53\":1}}],[\"是和前端控制器的自动配置有关\",{\"1\":{\"110\":1}}],[\"是如何实现自动配置的\",{\"0\":{\"205\":1}}],[\"是如何实现属性绑定的\",{\"0\":{\"190\":1}}],[\"是如何让它内置的条件注解以及我们自定义的条件注解生效的\",{\"1\":{\"131\":1}}],[\"是如何整合\",{\"0\":{\"107\":1}}],[\"是如何进行依赖管理的\",{\"0\":{\"71\":1}}],[\"是系统启动好了以后放好的组件\",{\"1\":{\"97\":1}}],[\"是怎么把日志默认配置好的\",{\"1\":{\"97\":1}}],[\"是一个工厂\",{\"1\":{\"94\":1}}],[\"是\",{\"1\":{\"77\":4}}],[\"是由\",{\"1\":{\"61\":1}}],[\"新版策略\",{\"1\":{\"61\":1}}],[\"老版策略\",{\"1\":{\"61\":1}}],[\"改变路径匹配策略\",{\"1\":{\"61\":1}}],[\"using\",{\"1\":{\"201\":1}}],[\"useunicode=true\",{\"1\":{\"87\":1}}],[\"users\",{\"1\":{\"164\":2}}],[\"userscache\",{\"1\":{\"164\":2}}],[\"userservicefactorybean\",{\"1\":{\"143\":3}}],[\"userservice\",{\"1\":{\"70\":1,\"128\":2,\"138\":1,\"139\":6,\"140\":1,\"142\":1,\"143\":4,\"164\":1}}],[\"user<\",{\"1\":{\"74\":1}}],[\"user\",{\"1\":{\"70\":1,\"89\":1,\"164\":1}}],[\"username\",{\"1\":{\"66\":1,\"87\":1,\"184\":2}}],[\"uselastmodified\",{\"1\":{\"53\":1}}],[\"up\",{\"1\":{\"162\":1}}],[\"ublic\",{\"1\":{\"104\":1}}],[\"unchecked\",{\"1\":{\"94\":1}}],[\"underscore\",{\"1\":{\"88\":1}}],[\"unsupported\",{\"1\":{\"79\":1}}],[\"unmodifiablemap\",{\"1\":{\"68\":1}}],[\"urlpathhelper\",{\"1\":{\"116\":5}}],[\"url\",{\"1\":{\"87\":1,\"116\":1,\"119\":2}}],[\"url>\",{\"1\":{\"74\":1}}],[\"uri\",{\"1\":{\"61\":2}}],[\"utf\",{\"1\":{\"72\":1,\"74\":3,\"79\":1,\"89\":1,\"103\":1}}],[\"路径的匹配策略\",{\"1\":{\"116\":1}}],[\"路径变量p1\",{\"1\":{\"61\":1}}],[\"路径匹配的规则\",{\"1\":{\"119\":1}}],[\"路径匹配配置\",{\"0\":{\"116\":1},\"1\":{\"116\":1}}],[\"路径匹配\",{\"0\":{\"59\":1}}],[\"+\",{\"1\":{\"61\":1,\"69\":1,\"94\":3,\"97\":1,\"110\":1,\"126\":2,\"170\":2}}],[\"多模块系统打包规范\",{\"0\":{\"175\":1}}],[\"多环境配置\",{\"1\":{\"74\":1}}],[\"多端适配默认规则\",{\"0\":{\"63\":1}}],[\"多段匹配的支持仅允许在模式末尾使用\",{\"1\":{\"61\":1}}],[\"多级缓存架构\",{\"1\":{\"6\":1}}],[\"兼容\",{\"1\":{\"61\":1}}],[\"~40\",{\"1\":{\"61\":1}}],[\"倍吞吐量提升\",{\"1\":{\"61\":1}}],[\"基本组成部分\",{\"1\":{\"168\":1}}],[\"基本信息\",{\"1\":{\"74\":1}}],[\"基于xa二阶提交协议的分布式事务数据源\",{\"1\":{\"92\":1}}],[\"基于多模块项目的最佳实践\",{\"0\":{\"74\":1}}],[\"基于\",{\"0\":{\"72\":1,\"73\":1}}],[\"基于请求参数内容协商\",{\"0\":{\"65\":1}}],[\"基于请求头内容协商\",{\"0\":{\"64\":1}}],[\"基准测试下\",{\"1\":{\"61\":1}}],[\"基础bean注册\",{\"1\":{\"139\":1}}],[\"基础特性\",{\"0\":{\"82\":1},\"1\":{\"82\":1}}],[\"基础配置初始化\",{\"1\":{\"93\":1}}],[\"基础配置\",{\"1\":{\"74\":1}}],[\"基础\",{\"0\":{\"49\":1}}],[\"基础技能进阶\",{\"0\":{\"1\":1}}],[\"与处理器方法的映射关系\",{\"1\":{\"119\":1}}],[\"与\",{\"1\":{\"61\":1,\"91\":1}}],[\"要匹配文件路径中的问号\",{\"1\":{\"60\":1}}],[\"要匹配文件路径中的星号\",{\"1\":{\"60\":1}}],[\"匹配到\",{\"1\":{\"65\":1}}],[\"匹配任意文件名为\",{\"1\":{\"60\":1}}],[\"匹配任意名称\",{\"1\":{\"60\":1}}],[\"匹配在folder2目录下任意目录深度的\",{\"1\":{\"60\":1}}],[\"匹配在folder1目录下的任意两级目录下的\",{\"1\":{\"60\":1}}],[\"扩展名为\",{\"1\":{\"60\":1}}],[\"zoroly\",{\"1\":{\"151\":1}}],[\"zaxxer\",{\"1\":{\"87\":1}}],[\"z\",{\"1\":{\"60\":1}}],[\"例如spring\",{\"1\":{\"97\":1}}],[\"例如\",{\"1\":{\"60\":2,\"72\":1,\"127\":1,\"130\":1}}],[\"风格的路径模式语法中的特殊字符需要转义\",{\"1\":{\"60\":1}}],[\"风格的路径模式语法具有以下规则\",{\"1\":{\"60\":1}}],[\"风险控制\",{\"1\":{\"13\":1}}],[\"现在提供了\",{\"1\":{\"59\":1}}],[\"策略\",{\"1\":{\"59\":2}}],[\"之后加入了更多的请求路径匹配的实现策略\",{\"1\":{\"59\":1}}],[\"自己开发的业务组件\",{\"1\":{\"145\":1}}],[\"自己写新的规则\",{\"1\":{\"58\":1}}],[\"自动注册为spring组件\",{\"1\":{\"140\":1}}],[\"自动装配到底自动配置了哪些规则呢\",{\"1\":{\"107\":1}}],[\"自动装配的原理\",{\"0\":{\"90\":1}}],[\"自动配置的流程\",{\"0\":{\"206\":1}}],[\"自动配置的关键\",{\"0\":{\"124\":1}}],[\"自动配置原理\",{\"0\":{\"156\":1},\"1\":{\"168\":1}}],[\"自动配置生效前提\",{\"1\":{\"93\":1}}],[\"自动配置核心\",{\"1\":{\"91\":1}}],[\"自动配置类的编写\",{\"1\":{\"168\":1}}],[\"自动配置类的生效需要满足以下条件\",{\"1\":{\"110\":1}}],[\"自动配置类\",{\"1\":{\"79\":1}}],[\"自动配置\",{\"0\":{\"108\":1},\"1\":{\"79\":1,\"104\":1}}],[\"自定义线程池配置\",{\"0\":{\"163\":1}}],[\"自定义健康检查逻辑\",{\"1\":{\"162\":1}}],[\"自定义事件\",{\"1\":{\"160\":1}}],[\"自定义事件和监听器\",{\"1\":{\"160\":1}}],[\"自定义条件逻辑\",{\"1\":{\"159\":1}}],[\"自定义条件注解的实现\",{\"1\":{\"168\":1}}],[\"自定义条件注解需要关联一个实现了\",{\"1\":{\"130\":1}}],[\"自定义条件注解\",{\"0\":{\"159\":1},\"1\":{\"130\":1}}],[\"自定义bean定义注册逻辑\",{\"1\":{\"149\":1}}],[\"自定义bean定义\",{\"1\":{\"142\":1}}],[\"自定义日志配置\",{\"1\":{\"104\":1}}],[\"自定义\",{\"0\":{\"158\":1},\"1\":{\"79\":1,\"168\":1}}],[\"自定义页面模板\",{\"1\":{\"69\":1}}],[\"自定义页面响应\",{\"1\":{\"69\":1}}],[\"自定义json响应\",{\"1\":{\"69\":1}}],[\"自定义错误响应\",{\"0\":{\"69\":1}}],[\"自定义静态资源规则\",{\"0\":{\"56\":1}}],[\"保留以前规则\",{\"1\":{\"58\":1}}],[\"保持代码版本的清晰性\",{\"1\":{\"33\":1}}],[\"保持良好的提交信息习惯\",{\"1\":{\"33\":1}}],[\"保持与线上部署版本一致\",{\"1\":{\"33\":1}}],[\"保持与\",{\"1\":{\"33\":1}}],[\"定义配置属性类\",{\"0\":{\"199\":1}}],[\"定义日志输出格式\",{\"1\":{\"103\":1}}],[\"定义日志存放路径\",{\"1\":{\"103\":1}}],[\"定义全局变量\",{\"1\":{\"103\":1}}],[\"定义在\",{\"1\":{\"99\":1}}],[\"定义一个配置类\",{\"1\":{\"58\":1}}],[\"定期将\",{\"1\":{\"33\":2}}],[\"所以我们还创建一个实现类\",{\"1\":{\"130\":1}}],[\"所以我们配置一个静态资源路径前缀来区分\",{\"1\":{\"57\":1}}],[\"所以该注解生效\",{\"1\":{\"126\":1}}],[\"所以接下来我们重点关注\",{\"1\":{\"111\":1}}],[\"所以大体上可以梳理出webmvc场景的自动装配环节\",{\"1\":{\"110\":1}}],[\"所以它会加载类路径下的meta\",{\"1\":{\"108\":1}}],[\"所以日志是利用监听器机制配置好的\",{\"1\":{\"97\":1}}],[\"所以后续\",{\"1\":{\"94\":1}}],[\"所以\",{\"1\":{\"72\":1,\"78\":1,\"174\":1,\"196\":1}}],[\"所有配置类解析完成后执行\",{\"1\":{\"141\":1}}],[\"所有条件的顶层接口\",{\"1\":{\"131\":1}}],[\"所有条件注解都会关联一个实现了condition\",{\"1\":{\"130\":1}}],[\"所有日志文件的总大小上限\",{\"1\":{\"103\":1}}],[\"所有日志文件输出\",{\"1\":{\"103\":1}}],[\"所有和数据源有关的配置都绑定在datasourceproperties\",{\"1\":{\"92\":1}}],[\"所有mybatis配置写在application\",{\"1\":{\"89\":1}}],[\"所有sql写在xml中\",{\"1\":{\"89\":1}}],[\"所有静态资源都定义了缓存规则\",{\"1\":{\"53\":1}}],[\"所有新功能开发和修改都在\",{\"1\":{\"33\":1}}],[\"后默认使用\",{\"1\":{\"116\":1}}],[\"后来用的\",{\"1\":{\"97\":1}}],[\"后续将在\",{\"1\":{\"94\":1}}],[\"后才能映射对应的资源路径\",{\"1\":{\"57\":2}}],[\"后\",{\"1\":{\"57\":2,\"107\":1}}],[\"配置属性元数据\",{\"1\":{\"184\":1}}],[\"配置属性类的定义\",{\"1\":{\"168\":1}}],[\"配置打包插件\",{\"1\":{\"179\":1}}],[\"配置的\",{\"1\":{\"166\":1}}],[\"配置优先级\",{\"1\":{\"166\":1}}],[\"配置加载源码分析\",{\"0\":{\"166\":1}}],[\"配置国际化支持\",{\"0\":{\"122\":1}}],[\"配置requestcontextholder支持\",{\"0\":{\"117\":1}}],[\"配置静态资源路径\",{\"1\":{\"115\":1}}],[\"配置静态资源的访问路径和缓存策略\",{\"1\":{\"115\":1}}],[\"配置媒体类型映射\",{\"1\":{\"114\":1}}],[\"配置客户端和服务器之间的内容协商策略\",{\"1\":{\"114\":1}}],[\"配置异步请求的超时时间和任务执行器\",{\"1\":{\"113\":1}}],[\"配置消息转换器\",{\"0\":{\"112\":1}}],[\"配置对应\",{\"1\":{\"111\":2}}],[\"配置日志系统\",{\"1\":{\"104\":1}}],[\"配置日期格式\",{\"1\":{\"70\":1}}],[\"配置文件中不配置\",{\"1\":{\"126\":1}}],[\"配置文件中\",{\"1\":{\"126\":2}}],[\"配置文件如果发生改变\",{\"1\":{\"103\":1}}],[\"配置文件\",{\"1\":{\"102\":1,\"158\":1}}],[\"配置文件解析\",{\"1\":{\"93\":1}}],[\"配置其他属性\",{\"1\":{\"94\":2}}],[\"配置扫描器\",{\"1\":{\"94\":1}}],[\"配置mybatis的mapper接口扫描与xml映射文件扫描\",{\"1\":{\"89\":1}}],[\"配置mybatis\",{\"0\":{\"88\":1}}],[\"配置数据源信息\",{\"1\":{\"89\":1}}],[\"配置数据源\",{\"1\":{\"87\":1}}],[\"配置处理器\",{\"1\":{\"79\":1}}],[\"配置空值处理\",{\"1\":{\"70\":1}}],[\"配置\",{\"0\":{\"103\":1,\"177\":1,\"198\":1},\"1\":{\"70\":1,\"74\":2,\"79\":2,\"115\":1,\"116\":1,\"127\":1}}],[\"配置类处理器调用\",{\"1\":{\"142\":1}}],[\"配置类内容\",{\"1\":{\"141\":1,\"142\":1}}],[\"配置类解析阶段执行\",{\"1\":{\"141\":1}}],[\"配置类\",{\"0\":{\"200\":1},\"1\":{\"58\":1,\"140\":2}}],[\"配置方式\",{\"0\":{\"57\":1}}],[\"配合\",{\"1\":{\"33\":1}}],[\"09\",{\"1\":{\"130\":2}}],[\"0<\",{\"1\":{\"73\":7,\"74\":12,\"79\":4,\"177\":3}}],[\"00\",{\"1\":{\"70\":2,\"130\":4}}],[\"003\",{\"1\":{\"55\":1}}],[\"05\",{\"1\":{\"70\":1}}],[\"0\",{\"1\":{\"70\":1,\"72\":1,\"73\":4,\"74\":36,\"79\":10,\"86\":2,\"89\":2,\"94\":1,\"103\":2,\"111\":1,\"116\":1,\"127\":1,\"170\":1,\"176\":4,\"184\":1,\"186\":2,\"187\":1}}],[\"0s\",{\"1\":{\"53\":1}}],[\"浏览器输入\",{\"1\":{\"55\":1}}],[\"如有任何问题\",{\"1\":{\"172\":1}}],[\"如何实现自定义条件注解\",{\"0\":{\"130\":1}}],[\"如何解析一个错误页\",{\"1\":{\"68\":1}}],[\"如all\",{\"1\":{\"103\":1}}],[\"如需对接专业日志系统\",{\"1\":{\"102\":1}}],[\"如long类型id\",{\"1\":{\"70\":1}}],[\"如果导入第三方包\",{\"1\":{\"196\":1}}],[\"如果只有一个构造函数\",{\"1\":{\"184\":1,\"186\":1}}],[\"如果继承了\",{\"1\":{\"174\":1}}],[\"如果用户没有自定义实现\",{\"1\":{\"128\":1}}],[\"如果是web应用就生效\",{\"1\":{\"110\":1}}],[\"如果不够\",{\"1\":{\"102\":1}}],[\"如果想额外记录到文件\",{\"1\":{\"101\":1}}],[\"如果项目\",{\"1\":{\"76\":1}}],[\"如果模板引擎路径templates下有\",{\"1\":{\"68\":1}}],[\"如果都匹配不到\",{\"1\":{\"68\":1}}],[\"如果匹配不到精确码\",{\"1\":{\"68\":1}}],[\"如果没有模板引擎\",{\"1\":{\"68\":2}}],[\"如果有多个主类\",{\"1\":{\"175\":1}}],[\"如果有模板引擎\",{\"1\":{\"68\":2}}],[\"如果有配置文件的改动\",{\"1\":{\"33\":1}}],[\"如果发生了500\",{\"1\":{\"68\":1}}],[\"如果路径中间需要有\",{\"1\":{\"61\":1}}],[\"如\",{\"0\":{\"178\":1,\"179\":1},\"1\":{\"60\":1,\"131\":1,\"176\":1,\"184\":1}}],[\"如下图的静态资源可以通过路径直接访问\",{\"1\":{\"55\":1}}],[\"没有就在\",{\"1\":{\"54\":1}}],[\"没有aspectj的依赖\",{\"1\":{\"33\":1}}],[\"host=\",{\"1\":{\"201\":1}}],[\"host\",{\"1\":{\"184\":3,\"186\":2,\"187\":1,\"198\":1,\"199\":1}}],[\"holder\",{\"1\":{\"94\":2}}],[\"health\",{\"1\":{\"162\":1}}],[\"healthindicator\",{\"1\":{\"162\":1}}],[\"hello\",{\"1\":{\"61\":1}}],[\"highest\",{\"1\":{\"110\":2}}],[\"highlight\",{\"1\":{\"103\":1}}],[\"hibernate\",{\"1\":{\"103\":1}}],[\"hibernate=error\",{\"1\":{\"99\":1}}],[\"hikaridatasource\",{\"1\":{\"87\":1,\"92\":1}}],[\"hikari\",{\"1\":{\"87\":1}}],[\"hasannotation\",{\"1\":{\"141\":1}}],[\"hastext\",{\"1\":{\"93\":1}}],[\"handlecustomexception\",{\"1\":{\"167\":1}}],[\"handleexception\",{\"1\":{\"167\":1}}],[\"handler请求处理器\",{\"1\":{\"119\":1}}],[\"handlermapping\",{\"0\":{\"119\":1},\"1\":{\"119\":1}}],[\"handling\",{\"1\":{\"115\":1}}],[\"havingvalue\",{\"1\":{\"33\":4,\"126\":4}}],[\"hutool<\",{\"1\":{\"74\":3}}],[\"hutool\",{\"1\":{\"74\":2}}],[\"hh\",{\"1\":{\"70\":1,\"103\":2,\"104\":1}}],[\"httpencodingautoconfiguration\",{\"1\":{\"108\":1}}],[\"httphandlerautoconfiguration\",{\"1\":{\"108\":1}}],[\"https\",{\"1\":{\"104\":2,\"151\":3}}],[\"httpstatus\",{\"1\":{\"68\":3,\"167\":2}}],[\"httpservletresponse\",{\"1\":{\"68\":1}}],[\"httpservletrequest\",{\"1\":{\"61\":1,\"68\":2,\"117\":1}}],[\"http\",{\"1\":{\"55\":1,\"74\":12,\"79\":4,\"89\":1,\"112\":1}}],[\"html页面\",{\"1\":{\"68\":1}}],[\"html模糊匹配\",{\"1\":{\"68\":1}}],[\"html这些精确的错误页\",{\"1\":{\"68\":1}}],[\"html的文件\",{\"1\":{\"60\":1}}],[\"html\",{\"1\":{\"54\":1,\"60\":3,\"68\":7,\"104\":1,\"121\":1,\"151\":1}}],[\"欢迎随时讨论\",{\"1\":{\"172\":1}}],[\"欢迎页功能支持\",{\"1\":{\"121\":1}}],[\"欢迎页配置\",{\"0\":{\"121\":1}}],[\"欢迎页规则在\",{\"1\":{\"54\":1}}],[\"欢迎页\",{\"0\":{\"54\":1}}],[\"欢迎加入\",{\"1\":{\"33\":1}}],[\"默认只扫描自己主程序所在的包\",{\"1\":{\"196\":1}}],[\"默认只把日志写在控制台\",{\"1\":{\"101\":1}}],[\"默认打包后执行\",{\"1\":{\"176\":1}}],[\"默认打包\",{\"1\":{\"176\":1}}],[\"默认打包生成的\",{\"1\":{\"176\":1}}],[\"默认行为\",{\"1\":{\"119\":1,\"120\":1}}],[\"默认自动配置了多个常用的消息转换器\",{\"1\":{\"112\":1}}],[\"默认支持\",{\"1\":{\"112\":1}}],[\"默认就是没有\",{\"1\":{\"110\":1}}],[\"默认配置好了\",{\"1\":{\"109\":1}}],[\"默认为false\",{\"1\":{\"103\":1}}],[\"默认队列满了丢弃trace\",{\"1\":{\"103\":1}}],[\"默认的异常解析器\",{\"0\":{\"123\":1}}],[\"默认的资源路径匹配\",{\"1\":{\"115\":1}}],[\"默认的静态资源路径\",{\"1\":{\"115\":1}}],[\"默认的时间间隔为1分钟\",{\"1\":{\"103\":1}}],[\"默认的版本\",{\"1\":{\"72\":1}}],[\"默认单位是毫秒\",{\"1\":{\"103\":1}}],[\"默认使用了logback\",{\"1\":{\"97\":1}}],[\"默认使用\",{\"1\":{\"92\":1,\"97\":1,\"116\":1}}],[\"默认值为false\",{\"1\":{\"103\":1}}],[\"默认值为true\",{\"1\":{\"103\":1}}],[\"默认值\",{\"1\":{\"77\":2}}],[\"默认在\",{\"1\":{\"68\":2}}],[\"默认机制\",{\"0\":{\"68\":1},\"1\":{\"68\":1}}],[\"默认是\",{\"1\":{\"66\":1}}],[\"默认此功能不开启\",{\"1\":{\"66\":1}}],[\"默认参数名\",{\"1\":{\"66\":1}}],[\"默认开启\",{\"0\":{\"64\":1}}],[\"默认无\",{\"1\":{\"53\":1}}],[\"默认\",{\"1\":{\"53\":2}}],[\"但也支持传统的\",{\"1\":{\"116\":1}}],[\"但是我们知道\",{\"1\":{\"196\":1}}],[\"但是我在这个\",{\"1\":{\"79\":1}}],[\"但是不要标注\",{\"1\":{\"58\":1}}],[\"但是对静态资源不进行拦截\",{\"1\":{\"57\":1}}],[\"但是配置了\",{\"1\":{\"57\":2}}],[\"但是又要使用cglib动态代理\",{\"1\":{\"33\":1}}],[\"但此功能参数无默认值\",{\"1\":{\"53\":1}}],[\"即使组件上标注了\",{\"1\":{\"196\":1}}],[\"即可\",{\"1\":{\"175\":1}}],[\"即可以通过\",{\"1\":{\"175\":1}}],[\"即可以写文件名\",{\"1\":{\"101\":1}}],[\"即\",{\"1\":{\"131\":1}}],[\"即浏览器访问过一次\",{\"1\":{\"53\":1}}],[\"即时编译的介绍\",{\"1\":{\"48\":1}}],[\"即时编译\",{\"0\":{\"48\":1}}],[\"资源路径\",{\"1\":{\"115\":1}}],[\"资源文件配置\",{\"1\":{\"74\":1}}],[\"资源都在\",{\"1\":{\"53\":2}}],[\"资深专家\",{\"1\":{\"33\":1}}],[\"静态资源处理配置\",{\"0\":{\"115\":1},\"1\":{\"115\":1}}],[\"静态资源缓存策略\",{\"1\":{\"57\":1}}],[\"静态资源目录放index\",{\"1\":{\"121\":1}}],[\"静态资源目录\",{\"1\":{\"57\":1}}],[\"静态资源访问前缀路径\",{\"1\":{\"57\":1}}],[\"静态资源映射规则在\",{\"1\":{\"53\":1}}],[\"静态资源映射规则\",{\"0\":{\"53\":1}}],[\"静态资源\",{\"0\":{\"52\":1}}],[\"线程安全\",{\"1\":{\"188\":1}}],[\"线程池配置\",{\"1\":{\"168\":1}}],[\"线程池在上文提到的taskexecutionautoconfiguration自动配置类中创建\",{\"1\":{\"113\":1}}],[\"线程池\",{\"0\":{\"42\":1}}],[\"线程模型\",{\"0\":{\"41\":1}}],[\"线程模型与线程池\",{\"1\":{\"2\":1}}],[\"锁的介绍\",{\"1\":{\"40\":1}}],[\"锁机制与同步控制\",{\"1\":{\"2\":1}}],[\"降低\",{\"1\":{\"61\":1}}],[\"降低出错的风险\",{\"1\":{\"33\":1}}],[\"降级\",{\"1\":{\"7\":1}}],[\"这会生成\",{\"1\":{\"184\":1}}],[\"这允许其他模块提供自定义实现来覆盖默认行为\",{\"1\":{\"128\":1}}],[\"这对于提供默认实现但允许用户覆盖很有用\",{\"1\":{\"128\":1}}],[\"这样可以让\",{\"1\":{\"127\":1}}],[\"这样的工作流程可以帮助你\",{\"1\":{\"33\":1}}],[\"这在处理可选依赖时特别有用\",{\"1\":{\"127\":1}}],[\"这和springboot没关系\",{\"1\":{\"102\":1}}],[\"这就是一个典型的\",{\"1\":{\"79\":1}}],[\"这类依赖只在编译时需要\",{\"1\":{\"78\":1}}],[\"这个接口定义了\",{\"1\":{\"111\":1}}],[\"这个方法的逻辑主要就是创建\",{\"1\":{\"94\":1}}],[\"这个类到底注册了哪些组件配置了哪些\",{\"1\":{\"111\":1}}],[\"这个类\",{\"1\":{\"94\":1,\"111\":1}}],[\"这个注解导入了\",{\"1\":{\"94\":1}}],[\"这个父项目最重要的作用是\",{\"1\":{\"72\":1}}],[\"这个配置常用于我们后端需要拦截所有请求\",{\"1\":{\"57\":1}}],[\"这个配置的意思就是原本默认访问静态资源路径是\",{\"1\":{\"57\":1}}],[\"这些错误\",{\"1\":{\"68\":1}}],[\"这是类加载机制的介绍\",{\"1\":{\"46\":1}}],[\"这是线程池的介绍\",{\"1\":{\"42\":1}}],[\"这是线程模型的介绍\",{\"1\":{\"41\":1}}],[\"这是并发编程的介绍\",{\"1\":{\"39\":1}}],[\"这是\",{\"1\":{\"35\":1,\"38\":1,\"40\":1,\"48\":1,\"49\":1}}],[\"这是目标\",{\"1\":{\"33\":2}}],[\"这是一则或许对你有用的小广告\",{\"1\":{\"33\":1}}],[\"这是分布式锁的介绍\",{\"1\":{\"28\":1}}],[\"这是分布式\",{\"1\":{\"27\":1}}],[\"<queuesize>512<\",{\"1\":{\"103\":1}}],[\"<queuesize>1024<\",{\"1\":{\"103\":1}}],[\"<neverblock>false<\",{\"1\":{\"103\":1}}],[\"<nacos\",{\"1\":{\"74\":3}}],[\"<level>error<\",{\"1\":{\"103\":1}}],[\"<logger\",{\"1\":{\"99\":1,\"103\":4}}],[\"<root\",{\"1\":{\"103\":3}}],[\"<rollingpolicy\",{\"1\":{\"103\":2}}],[\"<releases>\",{\"1\":{\"74\":1}}],[\"<repository>\",{\"1\":{\"74\":1}}],[\"<repositories>\",{\"1\":{\"74\":1}}],[\"<resource>\",{\"1\":{\"74\":2}}],[\"<resources>\",{\"1\":{\"74\":1}}],[\"<redisson\",{\"1\":{\"74\":1}}],[\"<charset>utf\",{\"1\":{\"103\":3}}],[\"<configuration\",{\"1\":{\"103\":1}}],[\"<configuration>\",{\"1\":{\"74\":2,\"174\":1,\"177\":1}}],[\"<commons\",{\"1\":{\"74\":1}}],[\"<filter\",{\"1\":{\"103\":1}}],[\"<filtering>false<\",{\"1\":{\"74\":1}}],[\"<filtering>true<\",{\"1\":{\"74\":1}}],[\"<filenamepattern>$\",{\"1\":{\"103\":2}}],[\"<file>$\",{\"1\":{\"103\":2}}],[\"<finalname>$\",{\"1\":{\"74\":1,\"179\":1}}],[\"<url>https\",{\"1\":{\"74\":1}}],[\"<include>bootstrap\",{\"1\":{\"74\":2}}],[\"<include>application\",{\"1\":{\"74\":2}}],[\"<includes>\",{\"1\":{\"74\":1}}],[\"<id>repackage<\",{\"1\":{\"174\":1}}],[\"<id>attach\",{\"1\":{\"74\":1,\"178\":1}}],[\"<id>aliyun<\",{\"1\":{\"74\":1}}],[\"<id>prod<\",{\"1\":{\"74\":1}}],[\"<id>test<\",{\"1\":{\"74\":1}}],[\"<id>dev<\",{\"1\":{\"74\":1}}],[\"<totalsizecap>5gb<\",{\"1\":{\"103\":1}}],[\"<totalsizecap>10gb<\",{\"1\":{\"103\":1}}],[\"<t>\",{\"1\":{\"94\":3}}],[\"<target>$\",{\"1\":{\"74\":1,\"177\":1}}],[\"<type>pom<\",{\"1\":{\"73\":3,\"74\":3,\"79\":1,\"177\":1}}],[\"<execution>\",{\"1\":{\"74\":2,\"174\":1,\"178\":1,\"179\":1}}],[\"<executions>\",{\"1\":{\"74\":2,\"174\":1,\"178\":1,\"179\":1}}],[\"<exclude>bootstrap\",{\"1\":{\"74\":1}}],[\"<exclude>application\",{\"1\":{\"74\":1}}],[\"<exclude>\",{\"1\":{\"74\":1}}],[\"<excludes>\",{\"1\":{\"74\":2}}],[\"<encoder>\",{\"1\":{\"103\":3}}],[\"<encoding>utf\",{\"1\":{\"74\":1,\"177\":1}}],[\"<enabled>false<\",{\"1\":{\"74\":1}}],[\"<enabled>true<\",{\"1\":{\"74\":1}}],[\"<env>prod<\",{\"1\":{\"74\":1}}],[\"<env>test<\",{\"1\":{\"74\":1}}],[\"<env>dev<\",{\"1\":{\"74\":1}}],[\"<appender\",{\"1\":{\"103\":16}}],[\"<annotationprocessorpaths>\",{\"1\":{\"74\":1}}],[\"<activebydefault>true<\",{\"1\":{\"74\":1}}],[\"<activation>\",{\"1\":{\"74\":1}}],[\"<artifactid>postgresql<\",{\"1\":{\"79\":1}}],[\"<artifactid>parent\",{\"1\":{\"73\":1}}],[\"<artifactid>javax\",{\"1\":{\"77\":1}}],[\"<artifactid>jackson\",{\"1\":{\"66\":1,\"74\":1}}],[\"<artifactid>lombok<\",{\"1\":{\"74\":3,\"78\":1,\"79\":1}}],[\"<artifactid>knife4j\",{\"1\":{\"74\":1}}],[\"<artifactid>common<\",{\"1\":{\"179\":1}}],[\"<artifactid>commons\",{\"1\":{\"74\":2}}],[\"<artifactid>company\",{\"1\":{\"73\":1}}],[\"<artifactid>guava<\",{\"1\":{\"74\":2}}],[\"<artifactid>hutool\",{\"1\":{\"74\":3}}],[\"<artifactid>redisson\",{\"1\":{\"74\":2}}],[\"<artifactid>dynamic\",{\"1\":{\"74\":2}}],[\"<artifactid>mapstruct\",{\"1\":{\"74\":1,\"78\":1}}],[\"<artifactid>mapstruct<\",{\"1\":{\"74\":3}}],[\"<artifactid>maven\",{\"1\":{\"74\":3,\"177\":2,\"178\":1}}],[\"<artifactid>mall\",{\"1\":{\"74\":8}}],[\"<artifactid>my\",{\"1\":{\"79\":2}}],[\"<artifactid>mybatis\",{\"1\":{\"74\":2,\"76\":2,\"86\":1}}],[\"<artifactid>mysql\",{\"1\":{\"72\":2,\"74\":2,\"77\":1,\"79\":2,\"86\":1}}],[\"<artifactid>spring\",{\"1\":{\"72\":2,\"73\":5,\"74\":17,\"77\":2,\"78\":1,\"79\":4,\"86\":1,\"108\":3,\"174\":1,\"177\":2,\"178\":1,\"179\":2,\"184\":1}}],[\"<optional>true<\",{\"1\":{\"74\":4,\"76\":1,\"79\":3,\"178\":1,\"184\":1}}],[\"<knife4j\",{\"1\":{\"74\":1}}],[\"<goal>jar\",{\"1\":{\"74\":1,\"178\":1}}],[\"<goal>repackage<\",{\"1\":{\"74\":1,\"174\":1,\"179\":1}}],[\"<goals>\",{\"1\":{\"74\":2,\"174\":1,\"178\":1,\"179\":1}}],[\"<guava\",{\"1\":{\"74\":1}}],[\"<groupid>javax\",{\"1\":{\"77\":1}}],[\"<groupid>$\",{\"1\":{\"74\":3,\"179\":1}}],[\"<groupid>cn\",{\"1\":{\"74\":3}}],[\"<groupid>com\",{\"1\":{\"66\":1,\"73\":3,\"74\":16,\"76\":2,\"79\":4}}],[\"<groupid>mysql<\",{\"1\":{\"72\":2,\"77\":1,\"86\":1}}],[\"<groupid>org\",{\"1\":{\"72\":2,\"73\":4,\"74\":28,\"77\":2,\"78\":3,\"79\":6,\"86\":2,\"108\":3,\"174\":1,\"177\":4,\"178\":2,\"179\":2,\"184\":1}}],[\"<hutool\",{\"1\":{\"74\":1}}],[\"<discardingthreshold>0<\",{\"1\":{\"103\":2}}],[\"<directory>src\",{\"1\":{\"74\":2}}],[\"<dynamic\",{\"1\":{\"74\":1}}],[\"<description>公共工具模块<\",{\"1\":{\"74\":1}}],[\"<description>商品服务模块<\",{\"1\":{\"74\":1}}],[\"<description>电商系统父工程<\",{\"1\":{\"74\":1}}],[\"<dependencies>\",{\"1\":{\"73\":2,\"74\":4,\"79\":3,\"177\":1,\"178\":1,\"179\":1}}],[\"<dependencymanagement>\",{\"1\":{\"73\":2,\"74\":1,\"79\":1,\"177\":1}}],[\"<dependency>\",{\"1\":{\"66\":1,\"72\":2,\"73\":3,\"74\":39,\"76\":2,\"77\":4,\"78\":3,\"79\":9,\"86\":3,\"108\":3,\"177\":1,\"178\":1,\"179\":2,\"184\":1}}],[\"<select\",{\"1\":{\"89\":1}}],[\"<snapshots>\",{\"1\":{\"74\":1}}],[\"<source>$\",{\"1\":{\"74\":1,\"177\":1}}],[\"<scope>provided<\",{\"1\":{\"77\":1,\"78\":4,\"79\":1}}],[\"<scope>compile<\",{\"1\":{\"77\":1}}],[\"<scope>test<\",{\"1\":{\"74\":1,\"77\":1}}],[\"<scope>runtime<\",{\"1\":{\"74\":1,\"77\":1}}],[\"<scope>import<\",{\"1\":{\"73\":3,\"74\":3,\"79\":1,\"177\":1}}],[\"<skywalking\",{\"1\":{\"74\":1}}],[\"<springprofile\",{\"1\":{\"103\":3}}],[\"<springproperty\",{\"1\":{\"103\":2}}],[\"<spring\",{\"1\":{\"74\":3,\"79\":1,\"177\":1}}],[\"<java\",{\"1\":{\"74\":1,\"79\":1,\"177\":1}}],[\"<jackson\",{\"1\":{\"72\":1}}],[\"<module>mall\",{\"1\":{\"74\":8}}],[\"<modules>\",{\"1\":{\"74\":1}}],[\"<modelversion>4\",{\"1\":{\"74\":3,\"79\":1}}],[\"<mainclass>$\",{\"1\":{\"174\":1}}],[\"<maxhistory>30<\",{\"1\":{\"103\":2}}],[\"<maxfilesize>10mb<\",{\"1\":{\"103\":2}}],[\"<mapper\",{\"1\":{\"89\":1}}],[\"<mapstruct\",{\"1\":{\"74\":1}}],[\"<maven\",{\"1\":{\"74\":2}}],[\"<mysql\",{\"1\":{\"72\":2,\"74\":1}}],[\"<mybatis\",{\"1\":{\"72\":1,\"74\":1}}],[\"<build>\",{\"1\":{\"73\":1,\"74\":3,\"174\":1,\"177\":1,\"178\":1,\"179\":1}}],[\"<version>8\",{\"1\":{\"86\":1}}],[\"<version>$\",{\"1\":{\"74\":16,\"79\":1,\"177\":2}}],[\"<version>2022\",{\"1\":{\"73\":1}}],[\"<version>1\",{\"1\":{\"73\":2,\"74\":3,\"79\":2}}],[\"<version>5\",{\"1\":{\"72\":1}}],[\"<version>3\",{\"1\":{\"72\":2,\"73\":4,\"74\":2,\"86\":1,\"177\":2}}],[\"<phase>verify<\",{\"1\":{\"74\":1,\"178\":1}}],[\"<plugin>\",{\"1\":{\"73\":1,\"74\":5,\"174\":1,\"177\":3,\"178\":1,\"179\":1}}],[\"<plugins>\",{\"1\":{\"73\":1,\"74\":3,\"174\":1,\"177\":1,\"178\":1,\"179\":1}}],[\"<pluginmanagement>\",{\"1\":{\"73\":1,\"74\":1,\"177\":1}}],[\"<pattern>$\",{\"1\":{\"103\":3}}],[\"<path>\",{\"1\":{\"74\":2}}],[\"<packaging>pom<\",{\"1\":{\"73\":1,\"74\":1}}],[\"<parent>\",{\"1\":{\"72\":2,\"73\":2,\"74\":2}}],[\"<property\",{\"1\":{\"103\":3}}],[\"<properties>\",{\"1\":{\"72\":4,\"74\":4,\"79\":1,\"177\":1}}],[\"<profile>\",{\"1\":{\"74\":3}}],[\"<profiles>\",{\"1\":{\"74\":1}}],[\"<prometheus\",{\"1\":{\"74\":1}}],[\"<project\",{\"1\":{\"74\":5,\"79\":1}}],[\"<project>\",{\"1\":{\"73\":1,\"177\":1,\"178\":1,\"179\":1}}],[\"<\",{\"1\":{\"66\":1,\"72\":8,\"73\":19,\"74\":171,\"76\":6,\"77\":5,\"78\":7,\"79\":29,\"86\":3,\"89\":4,\"103\":49,\"108\":3,\"174\":9,\"177\":24,\"178\":12,\"179\":16,\"184\":1}}],[\"<新分支名>\",{\"1\":{\"33\":1}}],[\"<分支名>\",{\"1\":{\"33\":1}}],[\"创建配置类来启用属性绑定\",{\"0\":{\"200\":1}}],[\"创建配置类的cglib代理\",{\"1\":{\"139\":1}}],[\"创建可执行的\",{\"1\":{\"176\":1}}],[\"创建订单失败\",{\"1\":{\"171\":1}}],[\"创建订单\",{\"1\":{\"171\":1}}],[\"创建一个基于特定条件的配置\",{\"1\":{\"159\":1}}],[\"创建一个简单的日志记录\",{\"1\":{\"158\":1}}],[\"创建\",{\"1\":{\"155\":2}}],[\"创建beandefinition\",{\"1\":{\"139\":1}}],[\"创建自定义条件注解\",{\"1\":{\"130\":1}}],[\"创建自定义的\",{\"1\":{\"70\":1}}],[\"创建默认的\",{\"1\":{\"104\":1}}],[\"创建扫描器\",{\"1\":{\"94\":1}}],[\"创建sqlsessionfactory的步骤就是把连接数据库的数据源\",{\"1\":{\"93\":1}}],[\"创建并切换到新分支\",{\"1\":{\"33\":1}}],[\"创建型模式\",{\"1\":{\"3\":1}}],[\"切换分支\",{\"1\":{\"33\":1}}],[\"切换到\",{\"1\":{\"33\":2}}],[\"查看imports文件中的自动配置类\",{\"1\":{\"93\":1}}],[\"查看分支状态\",{\"1\":{\"33\":1}}],[\"查看所有分支\",{\"1\":{\"33\":1}}],[\"查看当前分支\",{\"1\":{\"33\":1}}],[\"完成开发并测试无误后\",{\"1\":{\"33\":1}}],[\"从而简化了配置管理\",{\"1\":{\"184\":1}}],[\"从而为mapper接口创建代理对象\",{\"1\":{\"94\":1}}],[\"从\",{\"1\":{\"33\":1,\"94\":2}}],[\"部署分支\",{\"1\":{\"33\":1}}],[\"└──\",{\"1\":{\"33\":2,\"176\":19}}],[\"├──\",{\"1\":{\"33\":4,\"176\":7}}],[\"主要用于避免依赖传递\",{\"1\":{\"76\":1}}],[\"主分支\",{\"1\":{\"33\":1}}],[\"主页\",{\"0\":{\"0\":1}}],[\"的容器中\",{\"1\":{\"196\":1}}],[\"的常见使用场景\",{\"0\":{\"196\":1}}],[\"的属性绑定\",{\"1\":{\"184\":1}}],[\"的关键\",{\"1\":{\"176\":1}}],[\"的默认配置\",{\"1\":{\"174\":1}}],[\"的打包问题\",{\"0\":{\"173\":1}}],[\"的配置\",{\"1\":{\"168\":1}}],[\"的初始化过程\",{\"1\":{\"168\":1}}],[\"的工作机制\",{\"1\":{\"168\":1}}],[\"的工作原理\",{\"1\":{\"156\":1}}],[\"的启动过程主要包含以下关键步骤\",{\"1\":{\"155\":1}}],[\"的核心原理\",{\"1\":{\"172\":1}}],[\"的核心类库\",{\"1\":{\"127\":1}}],[\"的核心在于\",{\"1\":{\"91\":1}}],[\"的概念\",{\"1\":{\"127\":1}}],[\"的值为\",{\"1\":{\"126\":1}}],[\"的logger\",{\"1\":{\"99\":1}}],[\"的扫描注册\",{\"1\":{\"94\":1}}],[\"的所有配置绑定在\",{\"1\":{\"93\":1}}],[\"的所有路径\",{\"1\":{\"53\":2}}],[\"的自动配置类\",{\"0\":{\"93\":1},\"1\":{\"92\":1}}],[\"的整合支持\",{\"1\":{\"91\":1}}],[\"的使用场景\",{\"0\":{\"78\":1}}],[\"的作用是标记该依赖是可选的\",{\"1\":{\"76\":1}}],[\"的\",{\"1\":{\"74\":1,\"94\":4,\"99\":1}}],[\"的区别\",{\"0\":{\"75\":1},\"1\":{\"73\":1}}],[\"的依赖\",{\"1\":{\"76\":1}}],[\"的依赖传递原则\",{\"1\":{\"71\":1}}],[\"的依赖管理是基于父项目\",{\"1\":{\"72\":1}}],[\"的依赖管理是基于\",{\"1\":{\"71\":1}}],[\"的介绍\",{\"1\":{\"49\":1}}],[\"的更改同步到\",{\"1\":{\"33\":1}}],[\"的更改\",{\"1\":{\"33\":1}}],[\"的教学大纲和具体内容\",{\"1\":{\"33\":1}}],[\"更新beandefinitionnames\",{\"1\":{\"138\":1}}],[\"更新部署\",{\"1\":{\"33\":1}}],[\"更多set操作\",{\"1\":{\"93\":1}}],[\"更是一种责任和能力的体现\",{\"1\":{\"25\":1}}],[\"你的提交信息\",{\"1\":{\"33\":1}}],[\"拉取最新代码\",{\"1\":{\"33\":1}}],[\"globaltransactional\",{\"1\":{\"171\":1}}],[\"globalexceptionhandler\",{\"1\":{\"167\":1}}],[\"green\",{\"1\":{\"103\":1}}],[\"group>\",{\"1\":{\"141\":1}}],[\"group\",{\"1\":{\"100\":1}}],[\"groupid\",{\"1\":{\"74\":3,\"179\":1}}],[\"groupid>\",{\"1\":{\"66\":1,\"72\":4,\"73\":7,\"74\":50,\"76\":2,\"77\":4,\"78\":3,\"79\":10,\"86\":3,\"108\":3,\"174\":1,\"177\":4,\"178\":2,\"179\":3,\"184\":1}}],[\"generatebeanname\",{\"1\":{\"142\":1}}],[\"generatebasebeanname\",{\"1\":{\"94\":1}}],[\"genericbeandefinition\",{\"1\":{\"94\":3,\"142\":1}}],[\"getter\",{\"1\":{\"199\":2}}],[\"gettimeout\",{\"1\":{\"184\":1,\"186\":2,\"187\":1}}],[\"getting\",{\"1\":{\"94\":1}}],[\"gethost\",{\"1\":{\"184\":1,\"186\":2,\"187\":1,\"201\":1}}],[\"getquantity\",{\"1\":{\"171\":1}}],[\"getimportgroup\",{\"1\":{\"141\":1}}],[\"getlocale\",{\"1\":{\"122\":2}}],[\"getlocaleresolver\",{\"1\":{\"122\":1}}],[\"getwebjarspathpattern\",{\"1\":{\"115\":1}}],[\"getmessage\",{\"1\":{\"167\":2}}],[\"getmediatypes\",{\"1\":{\"114\":1}}],[\"getmatchingstrategy\",{\"1\":{\"116\":1}}],[\"getmapper\",{\"1\":{\"94\":6}}],[\"getmapping\",{\"1\":{\"61\":1,\"65\":1,\"70\":1,\"89\":1}}],[\"getpoolsize\",{\"1\":{\"184\":1,\"186\":2,\"187\":1}}],[\"getport\",{\"1\":{\"184\":1,\"186\":2,\"187\":1,\"201\":1}}],[\"getproductid\",{\"1\":{\"171\":1}}],[\"getproperties\",{\"1\":{\"166\":1}}],[\"getproperty\",{\"1\":{\"104\":1}}],[\"getpathmatch\",{\"1\":{\"116\":1}}],[\"getparametername\",{\"1\":{\"114\":2}}],[\"getexclusions\",{\"1\":{\"156\":1}}],[\"getexceptionhandlerexceptionresolver\",{\"1\":{\"123\":1}}],[\"getenvironment\",{\"1\":{\"104\":1}}],[\"geterrorattributeoptions\",{\"1\":{\"68\":2}}],[\"geterrorattributes\",{\"1\":{\"68\":2}}],[\"getcandidateconfigurations\",{\"1\":{\"156\":1}}],[\"getclassloader\",{\"1\":{\"104\":2}}],[\"getclass\",{\"1\":{\"104\":1}}],[\"getconnections\",{\"1\":{\"184\":1,\"186\":2,\"187\":1}}],[\"getcontentnegotiation\",{\"1\":{\"114\":2}}],[\"getconverters\",{\"1\":{\"112\":1}}],[\"getconstructorargumentvalues\",{\"1\":{\"94\":1}}],[\"getconfigurationproperties\",{\"1\":{\"93\":2}}],[\"getconfiglocation\",{\"1\":{\"93\":2}}],[\"getsettings\",{\"1\":{\"184\":1,\"186\":2,\"187\":1}}],[\"getservleturlmapping\",{\"1\":{\"116\":1}}],[\"getsystemenvironment\",{\"1\":{\"166\":1}}],[\"getsystemproperties\",{\"1\":{\"166\":1}}],[\"getspringfactoriesinstances\",{\"1\":{\"155\":2}}],[\"getspringapplication\",{\"1\":{\"104\":1}}],[\"getstaticlocations\",{\"1\":{\"115\":1}}],[\"getstaticpathpattern\",{\"1\":{\"115\":1}}],[\"getstatus\",{\"1\":{\"68\":2,\"167\":2}}],[\"getsqlsession\",{\"1\":{\"94\":1}}],[\"getbeannamesfortype\",{\"1\":{\"130\":1}}],[\"getbean\",{\"1\":{\"113\":1,\"126\":2}}],[\"getbeanclassname\",{\"1\":{\"94\":1}}],[\"getbeandefinition\",{\"1\":{\"94\":2,\"142\":1}}],[\"getname\",{\"1\":{\"94\":1,\"130\":1}}],[\"getasync\",{\"1\":{\"113\":1}}],[\"getannotationattributes\",{\"1\":{\"94\":1,\"130\":1}}],[\"getaccount\",{\"1\":{\"89\":1}}],[\"getaccountbyid\",{\"1\":{\"89\":3}}],[\"getobjecttype\",{\"1\":{\"143\":1}}],[\"getobject方法中会调用afterpropertiesset方法\",{\"1\":{\"93\":1}}],[\"getobject\",{\"1\":{\"93\":3,\"94\":2,\"143\":3}}],[\"getrequestmappinghandleradapter\",{\"1\":{\"120\":1}}],[\"getrequestmappinghandlermapping\",{\"1\":{\"119\":1}}],[\"getrequest\",{\"1\":{\"117\":1}}],[\"getrequesttimeout\",{\"1\":{\"113\":1}}],[\"getrequesturi\",{\"1\":{\"61\":1}}],[\"getresource\",{\"1\":{\"93\":1}}],[\"getdriverclassname\",{\"1\":{\"79\":1}}],[\"getuser\",{\"1\":{\"70\":2,\"164\":1}}],[\"get\",{\"1\":{\"65\":2,\"94\":1,\"104\":1,\"130\":2,\"170\":2,\"184\":1,\"186\":2,\"187\":1}}],[\"goal\",{\"1\":{\"175\":1}}],[\"goals>\",{\"1\":{\"74\":2,\"174\":1,\"178\":1,\"179\":1}}],[\"goal>\",{\"1\":{\"74\":2,\"174\":1,\"178\":1,\"179\":1}}],[\"google\",{\"1\":{\"74\":2}}],[\"gateway<\",{\"1\":{\"74\":1}}],[\"guava<\",{\"1\":{\"74\":2}}],[\"guava\",{\"1\":{\"74\":2}}],[\"gh\",{\"1\":{\"33\":13}}],[\"github\",{\"1\":{\"74\":1}}],[\"github优秀开源项目\",{\"1\":{\"19\":1}}],[\"git\",{\"0\":{\"33\":1},\"1\":{\"33\":16}}],[\"合并\",{\"1\":{\"33\":2}}],[\"同时这个类绑定了两个属性类\",{\"1\":{\"111\":1}}],[\"同时也支持对其他日志框架的配置和扩展使用\",{\"1\":{\"97\":1}}],[\"同时为了避免包冲突和重复\",{\"1\":{\"78\":1}}],[\"同步\",{\"1\":{\"33\":1}}],[\"同步到\",{\"1\":{\"33\":1}}],[\"同城双活\",{\"1\":{\"7\":1}}],[\"注重性能调优\",{\"1\":{\"172\":1}}],[\"注重软技能提升\",{\"1\":{\"25\":1}}],[\"注册第三方库的类\",{\"1\":{\"146\":1}}],[\"注册bean定义\",{\"1\":{\"142\":1}}],[\"注册beandefinition\",{\"1\":{\"140\":1}}],[\"注册到spring容器\",{\"1\":{\"138\":1}}],[\"注册到beanfactory的beandefinitionmap中\",{\"1\":{\"138\":1}}],[\"注册handleradapter\",{\"0\":{\"120\":1}}],[\"注册\",{\"0\":{\"119\":1},\"1\":{\"94\":1}}],[\"注册infrastructureadvisorautoproxycreator从而开启spring\",{\"1\":{\"33\":1}}],[\"注解就能将其注册为\",{\"1\":{\"196\":1}}],[\"注解是配合\",{\"1\":{\"196\":1}}],[\"注解是一个组合注解\",{\"1\":{\"156\":1}}],[\"注解的原理\",{\"0\":{\"202\":1}}],[\"注解的组成\",{\"1\":{\"168\":1}}],[\"注解的解析\",{\"1\":{\"119\":1}}],[\"注解类上的\",{\"1\":{\"166\":1}}],[\"注解解析过程\",{\"1\":{\"138\":1}}],[\"注解关联了onclasscondition类\",{\"1\":{\"130\":1}}],[\"注解\",{\"1\":{\"94\":1,\"196\":1},\"2\":{\"136\":1}}],[\"注解配置处理\",{\"1\":{\"93\":1}}],[\"注解处理器\",{\"1\":{\"78\":1}}],[\"注意\",{\"1\":{\"60\":1,\"122\":1}}],[\"注意是否需要同步到两个分支\",{\"1\":{\"33\":1}}],[\"注意事项\",{\"1\":{\"33\":1}}],[\"io\",{\"1\":{\"127\":1}}],[\"ioc\",{\"1\":{\"93\":1,\"189\":1}}],[\"i\",{\"1\":{\"103\":2}}],[\"issingleton\",{\"1\":{\"143\":1}}],[\"isafter\",{\"1\":{\"130\":1}}],[\"isaddmappings\",{\"1\":{\"115\":1}}],[\"isbefore\",{\"1\":{\"130\":1}}],[\"isfavorparameter\",{\"1\":{\"114\":1}}],[\"is\",{\"1\":{\"94\":1}}],[\"isempty\",{\"1\":{\"93\":1,\"94\":1}}],[\"import适用场景\",{\"0\":{\"147\":1}}],[\"importconfigclass\",{\"1\":{\"140\":1}}],[\"import注解\",{\"1\":{\"140\":2}}],[\"import注解方式\",{\"0\":{\"140\":1}}],[\"importruntimehints\",{\"1\":{\"110\":1}}],[\"importingclassmetadata\",{\"1\":{\"94\":4,\"141\":1}}],[\"importbeandefinitionregistrar适用场景\",{\"0\":{\"149\":1}}],[\"importbeandefinitionregistrar\",{\"1\":{\"94\":1,\"140\":1,\"142\":1}}],[\"import\",{\"1\":{\"94\":1,\"108\":1,\"111\":1,\"140\":2,\"141\":1,\"142\":1,\"156\":1}}],[\"importselector适用场景\",{\"0\":{\"148\":1}}],[\"importselectorconfig\",{\"1\":{\"141\":1}}],[\"importselector接口\",{\"0\":{\"141\":1}}],[\"importselector\",{\"1\":{\"140\":1,\"141\":2}}],[\"importselector和importbeandefinitionregistrar\",{\"1\":{\"140\":1}}],[\"imports文件中配置的组件\",{\"1\":{\"108\":1}}],[\"imports\",{\"1\":{\"92\":1}}],[\"implementation\",{\"1\":{\"176\":2}}],[\"implements\",{\"1\":{\"58\":1,\"70\":1,\"93\":1,\"94\":4,\"104\":1,\"111\":1,\"130\":1,\"141\":2,\"142\":1,\"143\":1,\"159\":1,\"160\":1}}],[\"impl\",{\"1\":{\"88\":1}}],[\"ibatis\",{\"1\":{\"88\":1}}],[\"illegalargumentexception\",{\"1\":{\"79\":1}}],[\"ico\",{\"1\":{\"55\":1}}],[\"insert\",{\"1\":{\"171\":1}}],[\"instance\",{\"1\":{\"70\":2,\"74\":3,\"79\":1,\"94\":1}}],[\"instanceof\",{\"1\":{\"33\":1,\"104\":2,\"113\":1}}],[\"increment\",{\"1\":{\"170\":1}}],[\"includes>\",{\"1\":{\"74\":1}}],[\"include>\",{\"1\":{\"74\":4}}],[\"include\",{\"1\":{\"70\":1}}],[\"int\",{\"1\":{\"170\":2,\"184\":4,\"186\":4,\"187\":2,\"199\":2}}],[\"interval\",{\"1\":{\"198\":1}}],[\"internal\",{\"1\":{\"167\":2}}],[\"interceptors\",{\"1\":{\"93\":2}}],[\"interface\",{\"1\":{\"89\":1,\"94\":1,\"130\":4,\"151\":1,\"156\":1,\"159\":1}}],[\"integer\",{\"1\":{\"66\":1,\"89\":5,\"170\":2}}],[\"inherited\",{\"1\":{\"156\":1}}],[\"initialize\",{\"1\":{\"163\":1}}],[\"initializeearlylogginglevel\",{\"1\":{\"104\":1}}],[\"initializingbean\",{\"1\":{\"93\":1,\"94\":1}}],[\"invokebeanfactorypostprocessors方法进行回调执行\",{\"1\":{\"94\":1}}],[\"index\",{\"1\":{\"54\":1}}],[\"info级别的日志\",{\"1\":{\"103\":1}}],[\"info\",{\"1\":{\"61\":1,\"99\":1,\"103\":4,\"127\":2,\"201\":1}}],[\"inf\",{\"1\":{\"53\":2,\"108\":1,\"115\":2,\"176\":5}}],[\"ifavailable\",{\"1\":{\"112\":1,\"116\":1}}],[\"if\",{\"1\":{\"33\":1,\"68\":1,\"79\":2,\"93\":4,\"94\":3,\"104\":2,\"113\":3,\"114\":1,\"115\":2,\"116\":2,\"119\":2,\"120\":2,\"122\":1,\"123\":2,\"141\":1,\"170\":1,\"171\":1}}],[\"ide\",{\"1\":{\"184\":1}}],[\"id=\",{\"1\":{\"89\":1}}],[\"id>\",{\"1\":{\"74\":5,\"174\":1,\"178\":1}}],[\"id\",{\"0\":{\"27\":1},\"1\":{\"27\":1,\"60\":2,\"66\":1,\"70\":5,\"89\":9,\"164\":2}}],[\">=\",{\"1\":{\"170\":1}}],[\">>\",{\"1\":{\"70\":1,\"112\":1}}],[\">\",{\"1\":{\"33\":1,\"72\":2,\"73\":5,\"74\":57,\"76\":4,\"77\":1,\"78\":4,\"79\":14,\"89\":4,\"103\":62,\"112\":1,\"115\":1,\"116\":1,\"143\":1,\"155\":1,\"162\":1,\"174\":1,\"177\":8,\"178\":3,\"179\":4}}],[\"function\",{\"1\":{\"108\":2}}],[\"frommap\",{\"1\":{\"94\":1}}],[\"from\",{\"1\":{\"89\":1,\"198\":1,\"199\":1}}],[\"fixedlocaleresolver\",{\"1\":{\"122\":1}}],[\"fixed\",{\"1\":{\"122\":1}}],[\"filter>\",{\"1\":{\"103\":1}}],[\"filter\",{\"1\":{\"103\":1}}],[\"filtering>\",{\"1\":{\"74\":2}}],[\"filenamepattern>\",{\"1\":{\"103\":2}}],[\"file>\",{\"1\":{\"103\":2}}],[\"file\",{\"1\":{\"101\":4,\"103\":7}}],[\"finally\",{\"1\":{\"170\":1}}],[\"final\",{\"1\":{\"94\":1,\"166\":2,\"170\":1,\"184\":1,\"186\":2,\"187\":3,\"188\":1,\"189\":1,\"200\":1,\"201\":1}}],[\"finalname>\",{\"1\":{\"74\":1,\"179\":1}}],[\"final<\",{\"1\":{\"74\":1}}],[\"f\",{\"1\":{\"61\":1}}],[\"found\",{\"1\":{\"207\":1}}],[\"foreach\",{\"1\":{\"114\":1}}],[\"form\",{\"1\":{\"112\":1}}],[\"formattingconversionservice\",{\"1\":{\"121\":1}}],[\"format\",{\"1\":{\"66\":2}}],[\"format=xml\",{\"1\":{\"65\":1}}],[\"format=json\",{\"1\":{\"65\":1}}],[\"for\",{\"1\":{\"94\":1,\"130\":1}}],[\"fork<\",{\"1\":{\"74\":1,\"178\":1}}],[\"forceautoproxycreatortouseclassproxying\",{\"1\":{\"33\":2}}],[\"folder2\",{\"1\":{\"60\":1}}],[\"folder1\",{\"1\":{\"60\":1}}],[\"fat\",{\"1\":{\"176\":1}}],[\"fatal\",{\"1\":{\"99\":1}}],[\"factories\",{\"1\":{\"168\":2}}],[\"factorybean适用场景\",{\"0\":{\"150\":1}}],[\"factorybeanconfig\",{\"1\":{\"143\":1}}],[\"factorybean<userservice>\",{\"1\":{\"143\":1}}],[\"factorybean<t>\",{\"1\":{\"94\":1}}],[\"factorybean接口\",{\"0\":{\"143\":1}}],[\"factorybean\",{\"1\":{\"94\":1}}],[\"factory\",{\"1\":{\"93\":8}}],[\"favorparameter\",{\"1\":{\"114\":1}}],[\"favor\",{\"1\":{\"66\":1}}],[\"favicon\",{\"0\":{\"55\":1},\"1\":{\"55\":1}}],[\"fasterxml\",{\"1\":{\"66\":1,\"74\":1}}],[\"false\",{\"1\":{\"33\":7,\"53\":1,\"70\":1,\"103\":2,\"104\":1,\"111\":1}}],[\"blog\",{\"1\":{\"151\":1}}],[\"bytearrayhttpmessageconverter\",{\"1\":{\"112\":1}}],[\"b3\",{\"1\":{\"103\":2}}],[\"bindingexception\",{\"1\":{\"94\":2}}],[\"balance\",{\"1\":{\"89\":1}}],[\"baomidou<\",{\"1\":{\"74\":4,\"76\":2}}],[\"basicerrorcontroller的组件\",{\"1\":{\"68\":1}}],[\"basepackages\",{\"1\":{\"94\":3}}],[\"basepackage\",{\"1\":{\"94\":1}}],[\"base\",{\"0\":{\"35\":1},\"1\":{\"35\":1}}],[\"base理论\",{\"1\":{\"5\":1}}],[\"builder\",{\"1\":{\"94\":2}}],[\"buildsqlsessionfactory方法执行完毕\",{\"1\":{\"93\":1}}],[\"buildsqlsessionfactory\",{\"1\":{\"93\":2}}],[\"build\",{\"1\":{\"74\":2,\"162\":1}}],[\"build>\",{\"1\":{\"73\":1,\"74\":4,\"174\":1,\"177\":1,\"178\":1,\"179\":1}}],[\"b且依赖\",{\"1\":{\"71\":1}}],[\"boolean\",{\"1\":{\"130\":2,\"143\":1,\"159\":1,\"184\":1}}],[\"boot<\",{\"1\":{\"72\":2,\"73\":4,\"74\":11,\"77\":2,\"78\":1,\"79\":4,\"86\":2,\"108\":3,\"174\":1,\"177\":2,\"178\":1,\"179\":2,\"184\":1}}],[\"boot\",{\"0\":{\"162\":1,\"166\":1,\"167\":1},\"1\":{\"65\":3,\"72\":9,\"73\":5,\"74\":26,\"76\":2,\"77\":2,\"78\":1,\"79\":10,\"86\":2,\"89\":1,\"91\":3,\"92\":5,\"93\":2,\"97\":3,\"104\":1,\"108\":21,\"110\":1,\"116\":1,\"126\":2,\"131\":1,\"168\":1,\"174\":5,\"175\":2,\"176\":12,\"177\":8,\"178\":1,\"179\":3,\"180\":1,\"184\":1}}],[\"boldmagenta\",{\"1\":{\"103\":1}}],[\"body\",{\"1\":{\"68\":2}}],[\"branch\",{\"1\":{\"33\":2}}],[\"b\",{\"1\":{\"33\":2,\"57\":1,\"58\":1,\"61\":1,\"71\":2,\"76\":2,\"175\":1}}],[\"bean适用场景\",{\"0\":{\"146\":1}}],[\"bean生命周期\",{\"1\":{\"145\":1}}],[\"bean方法调用\",{\"1\":{\"139\":1}}],[\"bean方法解析\",{\"1\":{\"139\":1}}],[\"bean方法\",{\"1\":{\"139\":3}}],[\"bean注解方式\",{\"0\":{\"139\":1}}],[\"bean名称是applicationtaskexecutor\",{\"1\":{\"113\":1}}],[\"beanclass\",{\"1\":{\"94\":2}}],[\"bean工厂的后置处理器\",{\"1\":{\"94\":1}}],[\"beandefinition注册到容器\",{\"1\":{\"142\":1}}],[\"beandefinition注册流程\",{\"1\":{\"138\":1}}],[\"beandefinitions\",{\"1\":{\"94\":6}}],[\"beandefinitionholder\",{\"1\":{\"94\":2}}],[\"beandefinitionbuilder\",{\"1\":{\"94\":2,\"142\":1}}],[\"beandefinition\",{\"1\":{\"94\":5,\"142\":4}}],[\"beandefinitionregistrypostprocessor\",{\"1\":{\"94\":2}}],[\"beandefinitionregistry\",{\"1\":{\"33\":3,\"94\":3,\"142\":1}}],[\"beannamegenerator\",{\"1\":{\"142\":1}}],[\"beannamesfortype\",{\"1\":{\"130\":2}}],[\"beannameaware\",{\"1\":{\"94\":1}}],[\"beanname\",{\"1\":{\"94\":2,\"130\":2}}],[\"beanfactory\",{\"1\":{\"33\":3,\"113\":2}}],[\"beanfactorypostprocessor\",{\"1\":{\"33\":1}}],[\"bean\",{\"1\":{\"33\":1,\"79\":1,\"93\":1,\"94\":3,\"104\":2,\"113\":2,\"117\":1,\"121\":1,\"122\":2,\"126\":6,\"127\":2,\"128\":4,\"129\":3,\"130\":4,\"131\":1,\"139\":3,\"141\":1,\"143\":1,\"158\":1,\"162\":1,\"163\":1,\"164\":1,\"196\":1,\"200\":1}}],[\"otherconfiguration\",{\"1\":{\"140\":1}}],[\"oncustomcondition\",{\"1\":{\"159\":2}}],[\"onclasscondition\",{\"1\":{\"130\":1,\"131\":1}}],[\"onbeancondition\",{\"1\":{\"131\":1}}],[\"onpropertycondition\",{\"1\":{\"130\":1}}],[\"onapplicationenvironmentpreparedevent\",{\"1\":{\"104\":2}}],[\"onapplicationevent\",{\"1\":{\"104\":1,\"160\":1}}],[\"onapplicationstartingevent\",{\"1\":{\"104\":2}}],[\"oas\",{\"1\":{\"127\":1}}],[\"oauth\",{\"1\":{\"11\":1}}],[\"out\",{\"1\":{\"126\":2,\"130\":1,\"184\":1,\"186\":2,\"187\":1}}],[\"outputencoding>\",{\"1\":{\"74\":1}}],[\"outputencoding>utf\",{\"1\":{\"74\":1}}],[\"os\",{\"1\":{\"126\":8}}],[\"osconfiguration\",{\"1\":{\"126\":1}}],[\"oot\",{\"1\":{\"99\":1}}],[\"off\",{\"1\":{\"99\":1}}],[\"opsforvalue\",{\"1\":{\"170\":3}}],[\"optional=true\",{\"0\":{\"79\":1},\"1\":{\"76\":1,\"77\":1,\"79\":1}}],[\"optional\",{\"0\":{\"75\":1,\"76\":1},\"1\":{\"76\":1,\"178\":1}}],[\"optional>\",{\"1\":{\"74\":4,\"76\":1,\"79\":3,\"178\":1,\"184\":1}}],[\"openapi\",{\"1\":{\"127\":5}}],[\"openapi3\",{\"1\":{\"74\":1}}],[\"openfeign<\",{\"1\":{\"74\":1}}],[\"object\",{\"1\":{\"113\":1,\"160\":1,\"170\":1}}],[\"objectutils\",{\"1\":{\"93\":1}}],[\"objectmapper\",{\"1\":{\"70\":8}}],[\"object>>\",{\"1\":{\"68\":1}}],[\"object>\",{\"1\":{\"68\":2,\"130\":1}}],[\"override\",{\"1\":{\"58\":1,\"70\":1,\"93\":2,\"94\":5,\"104\":1,\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"119\":1,\"120\":1,\"122\":1,\"123\":1,\"130\":1,\"141\":2,\"142\":1,\"143\":3,\"159\":1,\"160\":1,\"166\":1}}],[\"orderapplication\",{\"1\":{\"176\":1}}],[\"ordermapper\",{\"1\":{\"171\":3}}],[\"orderservice\",{\"1\":{\"139\":3,\"140\":1,\"171\":1}}],[\"order\",{\"1\":{\"111\":1,\"171\":5,\"176\":6}}],[\"orderedrequestcontextfilter\",{\"1\":{\"117\":1}}],[\"ordered\",{\"1\":{\"110\":2}}],[\"order<\",{\"1\":{\"74\":1}}],[\"or\",{\"1\":{\"99\":1}}],[\"original\",{\"1\":{\"176\":1}}],[\"origin\",{\"1\":{\"33\":4}}],[\"org\",{\"1\":{\"33\":1,\"74\":12,\"79\":4,\"88\":1,\"89\":2,\"92\":5,\"93\":2,\"99\":2,\"100\":2,\"103\":1,\"108\":17,\"141\":1,\"176\":2}}],[\"使用配置的服务类\",{\"0\":{\"201\":1}}],[\"使用构造函数的方式注入\",{\"1\":{\"200\":1}}],[\"使用构造注入的方式而非字段注入\",{\"1\":{\"184\":1}}],[\"使用案例\",{\"0\":{\"197\":1}}],[\"使用的\",{\"1\":{\"196\":1}}],[\"使用属性类\",{\"1\":{\"184\":1}}],[\"使用基础的\",{\"1\":{\"175\":1}}],[\"使用deferredimportselector\",{\"1\":{\"148\":1}}],[\"使用建议\",{\"1\":{\"127\":1}}],[\"使用mybatisx插件\",{\"1\":{\"89\":1}}],[\"使用方的\",{\"1\":{\"79\":1}}],[\"使用方的依赖配置\",{\"1\":{\"79\":1}}],[\"使用场景总结\",{\"0\":{\"144\":1}}],[\"使用场景\",{\"0\":{\"79\":1},\"1\":{\"79\":1}}],[\"使用\",{\"1\":{\"69\":1,\"73\":2,\"97\":1,\"104\":1,\"120\":1,\"127\":1,\"129\":2,\"175\":1,\"180\":1,\"188\":1,\"196\":1}}],[\"使用默认的路径匹配规则\",{\"1\":{\"61\":1}}],[\"使用cglib动态代理\",{\"1\":{\"33\":1}}],[\"使用jdk动态代理\",{\"1\":{\"33\":1}}],[\"min\",{\"1\":{\"199\":1}}],[\"mvn\",{\"1\":{\"176\":2}}],[\"mvcresourceurlprovider\",{\"1\":{\"121\":1}}],[\"mvcregistrations\",{\"1\":{\"119\":2,\"120\":2,\"123\":2}}],[\"mvcconversionservice\",{\"1\":{\"121\":1}}],[\"mvcproperties\",{\"1\":{\"113\":1,\"114\":2,\"115\":2,\"116\":1}}],[\"mvc的属性\",{\"1\":{\"111\":1}}],[\"mvc的\",{\"0\":{\"107\":1}}],[\"mvc处理不了\",{\"1\":{\"68\":1}}],[\"mvc\",{\"1\":{\"57\":3,\"61\":1,\"66\":2,\"111\":2,\"122\":2}}],[\"mf\",{\"1\":{\"176\":4}}],[\"mutablepropertysources\",{\"1\":{\"166\":1}}],[\"multipartautoconfiguration\",{\"1\":{\"108\":1}}],[\"mp\",{\"1\":{\"151\":1}}],[\"monitoring\",{\"1\":{\"129\":1}}],[\"monitoringconfiguration\",{\"1\":{\"129\":1}}],[\"modules>\",{\"1\":{\"74\":1}}],[\"module>\",{\"1\":{\"74\":8}}],[\"models\",{\"1\":{\"127\":1}}],[\"modelversion>\",{\"1\":{\"74\":3,\"79\":1}}],[\"model\",{\"1\":{\"68\":3}}],[\"modelandview\",{\"1\":{\"68\":6}}],[\"md\",{\"1\":{\"104\":1,\"151\":1}}],[\"msg\",{\"1\":{\"103\":2,\"104\":1}}],[\"myimportselector\",{\"1\":{\"141\":2}}],[\"mydbautoconfiguration\",{\"1\":{\"79\":1}}],[\"mydbproperties\",{\"1\":{\"79\":3}}],[\"mysql<\",{\"1\":{\"74\":2,\"79\":2}}],[\"mysql\",{\"1\":{\"72\":3,\"74\":2,\"79\":4,\"87\":2,\"127\":2,\"184\":2}}],[\"mybatis的核心初始化完毕\",{\"1\":{\"93\":1}}],[\"mybatis原生的配置文件\",{\"1\":{\"93\":1}}],[\"mybatisproperties\",{\"1\":{\"93\":2}}],[\"mybatislanguagedriverautoconfiguration\",{\"1\":{\"93\":3}}],[\"mybatisautoconfiguration\",{\"0\":{\"93\":1},\"1\":{\"93\":3}}],[\"mybatisapplication\",{\"1\":{\"89\":2}}],[\"mybatis\",{\"0\":{\"84\":1,\"93\":1},\"1\":{\"72\":1,\"74\":2,\"86\":1,\"88\":1,\"89\":9,\"91\":7,\"93\":3},\"2\":{\"95\":1}}],[\"myconfig\",{\"1\":{\"58\":1}}],[\"mm\",{\"1\":{\"70\":2,\"103\":6,\"104\":2}}],[\"m\",{\"1\":{\"33\":1}}],[\"method\",{\"1\":{\"130\":3,\"159\":1}}],[\"metadata\",{\"1\":{\"130\":3,\"141\":1,\"142\":1,\"159\":1}}],[\"meta\",{\"1\":{\"53\":2,\"115\":2,\"176\":2}}],[\"messageconvertersprovider\",{\"1\":{\"112\":1}}],[\"messageconverter\",{\"0\":{\"112\":1}}],[\"mesh\",{\"1\":{\"9\":1}}],[\"mediatypes\",{\"1\":{\"114\":2}}],[\"mediatype>\",{\"1\":{\"114\":1}}],[\"mediatype\",{\"1\":{\"68\":3,\"114\":1}}],[\"merge\",{\"1\":{\"33\":2}}],[\"masterpoolsize\",{\"1\":{\"184\":1,\"186\":2,\"187\":1}}],[\"masterconfig\",{\"1\":{\"184\":2,\"186\":4,\"187\":2}}],[\"master\",{\"1\":{\"184\":1}}],[\"manifest\",{\"1\":{\"176\":5}}],[\"macos\",{\"1\":{\"126\":16}}],[\"maxattempts\",{\"1\":{\"199\":1}}],[\"maxage\",{\"1\":{\"58\":1}}],[\"max\",{\"1\":{\"198\":1,\"199\":1}}],[\"maxhistory>\",{\"1\":{\"103\":2}}],[\"maxfilesize>\",{\"1\":{\"103\":2}}],[\"mall\",{\"1\":{\"74\":1,\"76\":4,\"176\":6}}],[\"mall<\",{\"1\":{\"74\":3}}],[\"maven\",{\"1\":{\"71\":1,\"73\":1,\"74\":21,\"79\":4,\"174\":2,\"175\":4,\"176\":4,\"177\":3,\"178\":1,\"179\":1,\"180\":1},\"2\":{\"81\":1,\"182\":1}}],[\"map\",{\"1\":{\"88\":1}}],[\"mappropertysource\",{\"1\":{\"166\":1}}],[\"mapping\",{\"1\":{\"119\":3}}],[\"mappingjackson2httpmessageconverter\",{\"1\":{\"70\":2,\"112\":1}}],[\"mapperproxyfactory\",{\"1\":{\"94\":3}}],[\"mapperproxyfactory<t>\",{\"1\":{\"94\":2}}],[\"mapperregistry\",{\"1\":{\"94\":4}}],[\"mapperinterface\",{\"1\":{\"94\":2}}],[\"mapperfactorybean<t>\",{\"1\":{\"94\":1}}],[\"mapperfactorybean\",{\"1\":{\"94\":5}}],[\"mapperscannerconfigurer的\",{\"1\":{\"94\":1}}],[\"mapperscannerconfigurer\",{\"1\":{\"94\":8}}],[\"mapperscannerregistrar\",{\"1\":{\"94\":3}}],[\"mapperscanattrs\",{\"1\":{\"94\":3}}],[\"mapperscans\",{\"1\":{\"94\":1}}],[\"mapperscan\",{\"1\":{\"89\":2,\"94\":4}}],[\"mapper>\",{\"1\":{\"89\":1}}],[\"mapper\",{\"0\":{\"94\":1},\"1\":{\"88\":2,\"89\":7,\"94\":9}}],[\"mapstruct<\",{\"1\":{\"74\":4,\"78\":1}}],[\"mapstruct\",{\"1\":{\"74\":4,\"78\":2}}],[\"map<string\",{\"1\":{\"68\":2,\"114\":1,\"130\":1}}],[\"matches\",{\"1\":{\"130\":2,\"131\":1,\"159\":1}}],[\"matcher\",{\"1\":{\"61\":2,\"116\":1}}],[\"matchingstrategy\",{\"1\":{\"116\":1}}],[\"matching\",{\"1\":{\"61\":1}}],[\"matchifmissing\",{\"1\":{\"33\":3,\"126\":4}}],[\"mainclass\",{\"1\":{\"175\":1}}],[\"mainclass>\",{\"1\":{\"174\":1}}],[\"mainapplicationclass\",{\"1\":{\"155\":1}}],[\"main\",{\"1\":{\"33\":19,\"74\":2,\"89\":1,\"155\":1,\"176\":2}}],[\"title\",{\"1\":{\"127\":1,\"176\":1}}],[\"time\",{\"1\":{\"170\":3}}],[\"timerangecondition\",{\"1\":{\"130\":3}}],[\"timeout\",{\"1\":{\"113\":3,\"184\":3,\"186\":2,\"187\":1}}],[\"timestamps\",{\"1\":{\"70\":1}}],[\"timeunit\",{\"1\":{\"58\":1,\"170\":1}}],[\"taskexecutor\",{\"1\":{\"113\":2}}],[\"taskexecutionautoconfiguration\",{\"1\":{\"110\":2,\"113\":2}}],[\"task\",{\"1\":{\"113\":2}}],[\"target>\",{\"1\":{\"74\":2,\"177\":1}}],[\"target>$\",{\"1\":{\"74\":1}}],[\"target\",{\"1\":{\"33\":6,\"94\":1,\"127\":1,\"130\":3,\"156\":1,\"159\":1}}],[\"transactional\",{\"1\":{\"171\":1}}],[\"traceid\",{\"1\":{\"103\":2}}],[\"trace\",{\"1\":{\"99\":1}}],[\"try\",{\"1\":{\"94\":1,\"170\":1}}],[\"true\",{\"1\":{\"33\":7,\"88\":1,\"103\":1,\"116\":1,\"126\":7,\"129\":1,\"143\":1,\"159\":1,\"184\":1}}],[\"t\",{\"1\":{\"94\":4}}],[\"thresholdfilter\",{\"1\":{\"103\":1}}],[\"threadpoolexecutor\",{\"1\":{\"163\":1}}],[\"threadpooltaskexecutor\",{\"1\":{\"163\":3}}],[\"threadpoolconfig\",{\"1\":{\"163\":1}}],[\"thread\",{\"1\":{\"103\":2,\"104\":1}}],[\"throwable\",{\"1\":{\"170\":1}}],[\"throws\",{\"1\":{\"93\":3,\"94\":1,\"143\":1,\"170\":1}}],[\"throw\",{\"1\":{\"79\":1,\"94\":2,\"170\":1,\"171\":1}}],[\"the\",{\"1\":{\"94\":1}}],[\"this\",{\"1\":{\"93\":10,\"94\":3,\"104\":1,\"112\":1,\"113\":3,\"114\":2,\"115\":6,\"116\":2,\"119\":2,\"120\":2,\"122\":3,\"123\":2,\"155\":3,\"160\":1,\"184\":1,\"186\":2,\"187\":1,\"201\":1}}],[\"toarray\",{\"1\":{\"156\":1}}],[\"tomillis\",{\"1\":{\"113\":1}}],[\"tomcat=trace\",{\"1\":{\"100\":1}}],[\"tomcat=org\",{\"1\":{\"100\":1}}],[\"tomcat<\",{\"1\":{\"78\":1}}],[\"tomcat\",{\"1\":{\"78\":2,\"100\":2}}],[\"totalsizecap>\",{\"1\":{\"103\":2}}],[\"tokenizetostringarray\",{\"1\":{\"94\":1}}],[\"to\",{\"1\":{\"88\":1,\"94\":1,\"201\":1}}],[\"tostringserializer\",{\"1\":{\"70\":2}}],[\"tencent\",{\"1\":{\"104\":1}}],[\"tech\",{\"1\":{\"104\":1,\"151\":1}}],[\"test\",{\"1\":{\"77\":2,\"87\":1,\"103\":1}}],[\"test<\",{\"1\":{\"74\":1,\"77\":1}}],[\"templates\",{\"1\":{\"68\":2}}],[\"templates下找index模板页\",{\"1\":{\"54\":1}}],[\"text\",{\"1\":{\"64\":2,\"68\":2}}],[\"type属性时\",{\"1\":{\"126\":1}}],[\"type=macos\",{\"1\":{\"126\":1}}],[\"type>\",{\"1\":{\"73\":3,\"74\":3,\"79\":1,\"177\":1}}],[\"type\",{\"1\":{\"60\":2,\"70\":1,\"79\":1,\"87\":1,\"94\":9,\"110\":4,\"126\":6,\"130\":3,\"156\":1,\"159\":1}}],[\"tcc\",{\"1\":{\"5\":1}}],[\"net\",{\"1\":{\"151\":1}}],[\"neverblock>\",{\"1\":{\"103\":1}}],[\"newinstance\",{\"1\":{\"94\":1}}],[\"new\",{\"1\":{\"68\":3,\"70\":4,\"79\":1,\"93\":1,\"94\":3,\"104\":2,\"115\":1,\"116\":2,\"117\":1,\"122\":2,\"126\":3,\"127\":2,\"128\":2,\"129\":1,\"130\":1,\"139\":3,\"141\":2,\"143\":2,\"155\":1,\"156\":1,\"158\":1,\"160\":1,\"163\":2,\"164\":2,\"166\":2,\"167\":4,\"170\":1,\"171\":1,\"199\":1,\"200\":1}}],[\"n\",{\"1\":{\"103\":2,\"104\":1}}],[\"nacos\",{\"1\":{\"74\":7}}],[\"namegenerator\",{\"1\":{\"142\":2}}],[\"name=\",{\"1\":{\"103\":17,\"126\":3}}],[\"name=logs\",{\"1\":{\"101\":1}}],[\"name=type\",{\"1\":{\"66\":1}}],[\"name叫r\",{\"1\":{\"99\":1}}],[\"name>=<level>指定日志级别\",{\"1\":{\"99\":1}}],[\"namespace=\",{\"1\":{\"89\":1}}],[\"name\",{\"1\":{\"33\":4,\"70\":2,\"87\":1,\"89\":1,\"101\":2,\"103\":3,\"113\":2,\"122\":3,\"127\":3,\"142\":1,\"166\":4,\"184\":3}}],[\"now\",{\"1\":{\"130\":4}}],[\"notempty\",{\"1\":{\"199\":1}}],[\"not\",{\"1\":{\"94\":1,\"207\":1}}],[\"non\",{\"1\":{\"70\":1}}],[\"no\",{\"1\":{\"68\":1,\"74\":1,\"178\":1}}],[\"nullpointerexception\",{\"1\":{\"188\":1}}],[\"null\",{\"1\":{\"68\":1,\"70\":2,\"93\":2,\"94\":2,\"113\":1,\"114\":1,\"115\":1,\"119\":2,\"120\":2,\"123\":2,\"155\":1,\"170\":1}}],[\"nio与网络编程\",{\"1\":{\"2\":1}}],[\"attempts\",{\"1\":{\"198\":1}}],[\"attributes\",{\"1\":{\"130\":3,\"156\":2}}],[\"abstractenvironment\",{\"1\":{\"166\":1}}],[\"abstractbeanfactory\",{\"1\":{\"143\":1}}],[\"after\",{\"1\":{\"110\":2}}],[\"afterpropertiesset\",{\"1\":{\"93\":2}}],[\"around\",{\"1\":{\"170\":1}}],[\"arrays\",{\"1\":{\"164\":1}}],[\"article\",{\"1\":{\"104\":1,\"151\":1}}],[\"artifactid\",{\"1\":{\"74\":1,\"179\":1}}],[\"artifactid>\",{\"1\":{\"66\":1,\"72\":4,\"73\":7,\"74\":52,\"76\":2,\"77\":4,\"78\":3,\"79\":10,\"86\":3,\"108\":3,\"174\":1,\"177\":4,\"178\":2,\"179\":3,\"184\":1}}],[\"args\",{\"1\":{\"89\":2,\"126\":1,\"155\":3}}],[\"and\",{\"1\":{\"129\":1}}],[\"annotatedtypemetadata\",{\"1\":{\"130\":2,\"159\":1}}],[\"annotation\",{\"1\":{\"141\":1,\"170\":1}}],[\"annotationattributes\",{\"1\":{\"94\":3}}],[\"annotationmetadata\",{\"1\":{\"94\":2,\"141\":1,\"142\":1,\"156\":4}}],[\"annotationprocessorpaths>\",{\"1\":{\"74\":1}}],[\"annoattrs\",{\"1\":{\"94\":1}}],[\"annometa\",{\"1\":{\"94\":1}}],[\"ant\",{\"1\":{\"60\":2,\"61\":1,\"116\":1}}],[\"antpathmatcher语法\",{\"1\":{\"61\":1}}],[\"antpathmatcher\",{\"1\":{\"59\":1,\"61\":1,\"116\":3}}],[\"api\",{\"0\":{\"178\":1},\"1\":{\"127\":1,\"175\":2}}],[\"api<\",{\"1\":{\"74\":2,\"77\":1}}],[\"appplication\",{\"0\":{\"198\":1}}],[\"appender\",{\"1\":{\"103\":1}}],[\"appender>\",{\"1\":{\"103\":5}}],[\"app\",{\"1\":{\"101\":1,\"103\":2,\"126\":8,\"198\":1,\"199\":1}}],[\"applyconfiguration\",{\"1\":{\"93\":1}}],[\"applicationarguments\",{\"1\":{\"155\":1}}],[\"applicationcontextinitializer\",{\"1\":{\"155\":1}}],[\"applicationcontext\",{\"1\":{\"121\":2,\"126\":3,\"130\":1,\"155\":1}}],[\"applicationcontextaware\",{\"1\":{\"94\":1}}],[\"applicationenvironmentpreparedevent\",{\"1\":{\"104\":3}}],[\"applicationeventpublisher\",{\"1\":{\"160\":1}}],[\"applicationevent\",{\"1\":{\"104\":1,\"160\":1}}],[\"applicationstartingevent\",{\"1\":{\"104\":3}}],[\"applicationlistener<customevent>\",{\"1\":{\"160\":1}}],[\"applicationlistener<applicationevent>\",{\"1\":{\"104\":1}}],[\"applicationlistener\",{\"1\":{\"97\":1,\"155\":1}}],[\"application\",{\"1\":{\"64\":1,\"102\":1,\"103\":1,\"104\":1,\"113\":2,\"126\":3,\"158\":1,\"166\":4,\"184\":1}}],[\"apache\",{\"1\":{\"74\":14,\"79\":3,\"88\":1,\"100\":3,\"177\":2,\"178\":1}}],[\"aliyun\",{\"1\":{\"74\":1}}],[\"alibaba\",{\"1\":{\"73\":3,\"74\":10}}],[\"all<\",{\"1\":{\"74\":3}}],[\"all\",{\"1\":{\"68\":1,\"103\":9}}],[\"aspect\",{\"1\":{\"170\":1}}],[\"aspectj\",{\"1\":{\"33\":1}}],[\"aspectjautoproxyingconfiguration\",{\"1\":{\"33\":1}}],[\"aslist\",{\"1\":{\"164\":1}}],[\"asyncthreadpooltaskexecutor\",{\"1\":{\"163\":1}}],[\"asynctaskexecutor\",{\"1\":{\"113\":3}}],[\"asyncsupportconfigurer\",{\"1\":{\"113\":1}}],[\"asyncappender\",{\"1\":{\"103\":2}}],[\"async\",{\"1\":{\"103\":8,\"163\":1}}],[\"as\",{\"1\":{\"70\":1}}],[\"age\",{\"1\":{\"66\":1,\"70\":1}}],[\"accountcontroller\",{\"1\":{\"89\":1}}],[\"accountmapper\",{\"1\":{\"89\":5}}],[\"account\",{\"1\":{\"89\":5}}],[\"acceptheaderlocaleresolver\",{\"1\":{\"122\":2}}],[\"accept\",{\"1\":{\"64\":2}}],[\"actuatorconfig\",{\"1\":{\"162\":1}}],[\"actuator\",{\"0\":{\"162\":1}}],[\"actuator<\",{\"1\":{\"74\":1}}],[\"active==\",{\"1\":{\"129\":1}}],[\"active\",{\"1\":{\"103\":2}}],[\"activebydefault>\",{\"1\":{\"74\":1}}],[\"activation>\",{\"1\":{\"74\":1}}],[\"acp\",{\"1\":{\"33\":2}}],[\"adapter\",{\"1\":{\"120\":3}}],[\"addlast\",{\"1\":{\"166\":2}}],[\"addpropertyvalue\",{\"1\":{\"142\":1}}],[\"addall\",{\"1\":{\"112\":1}}],[\"additivity=\",{\"1\":{\"103\":1}}],[\"addgenericargumentvalue\",{\"1\":{\"94\":1}}],[\"addr>prod\",{\"1\":{\"74\":1}}],[\"addr>test\",{\"1\":{\"74\":1}}],[\"addr>\",{\"1\":{\"74\":3}}],[\"addr>127\",{\"1\":{\"74\":1}}],[\"addresourcelocations\",{\"1\":{\"58\":1,\"115\":2}}],[\"addresourcehandler\",{\"1\":{\"58\":1,\"115\":2}}],[\"addresourcehandlers\",{\"1\":{\"58\":1,\"115\":1}}],[\"addserializer\",{\"1\":{\"70\":2}}],[\"add\",{\"1\":{\"33\":1,\"70\":1}}],[\"advice\",{\"1\":{\"33\":2}}],[\"a\",{\"1\":{\"33\":2,\"57\":1,\"58\":1,\"60\":1,\"61\":2,\"71\":2,\"76\":4,\"175\":1}}],[\"autoconfigurationpackage\",{\"1\":{\"156\":1}}],[\"autoconfiguration\",{\"1\":{\"108\":1,\"110\":2}}],[\"autoconfigurationimportselector\",{\"1\":{\"108\":1,\"156\":2}}],[\"autoconfigureorder\",{\"1\":{\"110\":2}}],[\"autoconfigureafter\",{\"1\":{\"93\":1}}],[\"autoconfigure\",{\"1\":{\"91\":1,\"92\":6,\"93\":2,\"108\":17}}],[\"autoconfigure<\",{\"1\":{\"79\":1,\"108\":1}}],[\"autowired\",{\"1\":{\"89\":1,\"160\":1,\"171\":2,\"184\":2,\"186\":4,\"187\":1}}],[\"auto\",{\"1\":{\"33\":1}}],[\"auto时默认也是开启\",{\"1\":{\"33\":1}}],[\"auto=true时开启aop\",{\"1\":{\"33\":1}}],[\"aopconfigutils\",{\"1\":{\"33\":2}}],[\"aop但是同时有用解析aspectj注解的功能\",{\"1\":{\"33\":1}}],[\"aopautoconfiguration\",{\"1\":{\"33\":1}}],[\"aop\",{\"1\":{\"33\":10}}],[\"================以上没关系=================\",{\"1\":{\"108\":1}}],[\"====以下是响应式web场景和现在的没关系======\",{\"1\":{\"108\":1}}],[\"==\",{\"1\":{\"68\":1,\"93\":1,\"94\":1,\"116\":1,\"122\":1}}],[\"=\",{\"1\":{\"33\":23,\"61\":1,\"68\":7,\"70\":3,\"79\":1,\"89\":1,\"93\":3,\"94\":7,\"104\":4,\"110\":4,\"111\":1,\"113\":3,\"114\":3,\"115\":2,\"116\":2,\"117\":1,\"119\":3,\"120\":3,\"122\":4,\"123\":3,\"126\":17,\"127\":2,\"130\":9,\"142\":1,\"155\":7,\"156\":3,\"163\":1,\"164\":4,\"166\":2,\"167\":2,\"170\":7,\"184\":8,\"186\":14,\"187\":7,\"199\":7,\"201\":1}}],[\"pdai\",{\"1\":{\"104\":1,\"151\":1}}],[\"poolsize\",{\"1\":{\"184\":3}}],[\"port=\",{\"1\":{\"201\":1}}],[\"port\",{\"1\":{\"184\":3,\"186\":2,\"187\":1,\"198\":1,\"199\":1}}],[\"point\",{\"1\":{\"170\":2}}],[\"postprocessbeandefinitionregistry\",{\"1\":{\"94\":2}}],[\"postgresql<\",{\"1\":{\"79\":1}}],[\"postgresql\",{\"1\":{\"79\":4}}],[\"pom\",{\"0\":{\"177\":1},\"1\":{\"73\":4,\"74\":10,\"79\":3,\"174\":1,\"180\":1}}],[\"phase>\",{\"1\":{\"74\":1,\"178\":1}}],[\"plus\",{\"1\":{\"74\":5,\"76\":2}}],[\"pluginmanagement\",{\"1\":{\"180\":1}}],[\"pluginmanagement>\",{\"1\":{\"73\":1,\"74\":1,\"177\":1}}],[\"plugin\",{\"1\":{\"174\":1,\"175\":4,\"180\":1}}],[\"plugins<\",{\"1\":{\"74\":3,\"177\":2,\"178\":1}}],[\"plugins>\",{\"1\":{\"73\":1,\"74\":3,\"174\":1,\"177\":1,\"178\":1,\"179\":1}}],[\"plugin>\",{\"1\":{\"73\":1,\"74\":5,\"174\":1,\"177\":3,\"178\":1,\"179\":1}}],[\"plugin<\",{\"1\":{\"73\":1,\"74\":5,\"174\":1,\"177\":3,\"178\":1,\"179\":1}}],[\"performancemonitor\",{\"1\":{\"129\":3}}],[\"person\",{\"1\":{\"66\":1}}],[\"period\",{\"1\":{\"53\":1}}],[\"p1\",{\"1\":{\"61\":2}}],[\"publishevent\",{\"1\":{\"160\":1}}],[\"publisher\",{\"1\":{\"160\":2}}],[\"public<\",{\"1\":{\"74\":1}}],[\"public\",{\"1\":{\"33\":1,\"53\":1,\"58\":2,\"61\":1,\"66\":1,\"68\":2,\"70\":3,\"79\":2,\"89\":7,\"93\":4,\"94\":15,\"104\":5,\"110\":2,\"111\":1,\"112\":1,\"113\":1,\"114\":1,\"115\":2,\"116\":1,\"117\":1,\"121\":1,\"122\":1,\"126\":4,\"127\":2,\"128\":3,\"129\":2,\"130\":8,\"138\":1,\"139\":4,\"140\":2,\"141\":5,\"142\":3,\"143\":6,\"155\":4,\"156\":2,\"158\":2,\"159\":3,\"160\":5,\"162\":2,\"163\":2,\"164\":4,\"166\":3,\"167\":3,\"170\":2,\"171\":2,\"184\":6,\"186\":6,\"187\":3,\"199\":2,\"200\":2,\"201\":3}}],[\"put\",{\"1\":{\"104\":1}}],[\"pull\",{\"1\":{\"33\":1}}],[\"push\",{\"1\":{\"33\":3}}],[\"package\",{\"1\":{\"176\":1}}],[\"packaging>\",{\"1\":{\"73\":1,\"74\":1}}],[\"password\",{\"1\":{\"87\":1,\"184\":2}}],[\"payment<\",{\"1\":{\"74\":1}}],[\"parse\",{\"1\":{\"130\":2,\"138\":1}}],[\"parser\",{\"1\":{\"61\":1}}],[\"param\",{\"1\":{\"89\":1}}],[\"parametername\",{\"1\":{\"114\":1}}],[\"parameter\",{\"1\":{\"66\":1}}],[\"parameter=true\",{\"1\":{\"66\":1}}],[\"parent也有父项目\",{\"1\":{\"72\":1}}],[\"parent>\",{\"1\":{\"72\":2,\"73\":2,\"74\":2}}],[\"parent<\",{\"1\":{\"72\":1,\"73\":2,\"74\":3}}],[\"parent\",{\"1\":{\"72\":3,\"73\":4,\"74\":1,\"174\":3}}],[\"pattern>\",{\"1\":{\"103\":3}}],[\"pattern\",{\"1\":{\"57\":1,\"61\":1,\"103\":5}}],[\"pattern=\",{\"1\":{\"57\":1}}],[\"path>\",{\"1\":{\"74\":2}}],[\"pathmatchconfigurer\",{\"1\":{\"116\":1}}],[\"pathmatch\",{\"1\":{\"61\":1}}],[\"pathvariable\",{\"1\":{\"61\":1,\"70\":1,\"89\":1}}],[\"pathpatternparser\",{\"1\":{\"59\":1,\"61\":5,\"116\":2}}],[\"path\",{\"1\":{\"57\":2,\"61\":5,\"101\":1,\"103\":5,\"116\":1,\"176\":1}}],[\"pages\",{\"1\":{\"33\":13}}],[\"paxos\",{\"1\":{\"5\":1}}],[\"printdatabaseinfo\",{\"1\":{\"184\":1,\"186\":2,\"187\":1}}],[\"println\",{\"1\":{\"126\":2,\"130\":1,\"184\":1,\"186\":2,\"187\":1}}],[\"primarysources\",{\"1\":{\"155\":1}}],[\"private\",{\"1\":{\"66\":4,\"79\":1,\"89\":5,\"94\":2,\"104\":2,\"160\":1,\"170\":1,\"171\":2,\"184\":11,\"186\":3,\"187\":1,\"199\":6,\"200\":1,\"201\":1}}],[\"prepareenvironment\",{\"1\":{\"155\":1}}],[\"precedence\",{\"1\":{\"110\":2}}],[\"prefix=system\",{\"1\":{\"158\":1}}],[\"prefix\",{\"1\":{\"33\":4,\"122\":1,\"126\":3,\"184\":1,\"199\":1}}],[\"proceed\",{\"1\":{\"170\":1}}],[\"proceedingjoinpoint\",{\"1\":{\"170\":1}}],[\"processimports\",{\"1\":{\"140\":1}}],[\"processconfigbeandefinitions\",{\"1\":{\"138\":1}}],[\"processbeandefinitions\",{\"1\":{\"94\":2}}],[\"processor<\",{\"1\":{\"74\":1,\"78\":1,\"79\":1,\"184\":1}}],[\"property\",{\"1\":{\"166\":4}}],[\"propertysources\",{\"1\":{\"166\":3}}],[\"propertysource\",{\"1\":{\"166\":1}}],[\"properties中添加logging\",{\"1\":{\"101\":1}}],[\"properties\",{\"1\":{\"72\":1,\"79\":6,\"89\":1,\"93\":4,\"99\":1,\"102\":1,\"104\":6,\"158\":3,\"166\":4,\"184\":1,\"201\":6}}],[\"properties>\",{\"1\":{\"72\":2,\"74\":4,\"79\":1,\"177\":1}}],[\"protected\",{\"1\":{\"119\":1,\"120\":1,\"123\":1,\"166\":1}}],[\"prod\",{\"1\":{\"103\":1}}],[\"productmapper\",{\"1\":{\"171\":3}}],[\"product\",{\"0\":{\"179\":1},\"1\":{\"76\":1,\"175\":1}}],[\"product<\",{\"1\":{\"74\":2}}],[\"produces\",{\"1\":{\"68\":1}}],[\"provided\",{\"0\":{\"78\":1},\"1\":{\"77\":2}}],[\"profiles\",{\"1\":{\"103\":1,\"129\":1}}],[\"profiles>\",{\"1\":{\"74\":1}}],[\"profile\",{\"1\":{\"103\":1,\"166\":2}}],[\"profile>\",{\"1\":{\"74\":3}}],[\"prometheus\",{\"1\":{\"74\":1}}],[\"projectlombok<\",{\"1\":{\"74\":3,\"78\":1,\"79\":1}}],[\"project>\",{\"1\":{\"73\":1,\"74\":2,\"79\":1,\"177\":1,\"178\":1,\"179\":1}}],[\"project<\",{\"1\":{\"73\":1}}],[\"project\",{\"1\":{\"73\":1,\"74\":8,\"179\":2}}],[\"projects\",{\"1\":{\"65\":3}}],[\"proxy\",{\"1\":{\"33\":6}}],[\"proxytargetclass\",{\"1\":{\"33\":2}}],[\"proxybeanmethods\",{\"1\":{\"33\":5,\"104\":1,\"111\":1}}],[\"官方知识星球\",{\"1\":{\"33\":1}}],[\"不可变性\",{\"1\":{\"189\":1}}],[\"不变性保证\",{\"1\":{\"188\":1}}],[\"不包含依赖\",{\"1\":{\"176\":1}}],[\"不需要\",{\"1\":{\"175\":1}}],[\"不推荐\",{\"1\":{\"127\":1}}],[\"不丢失日志\",{\"1\":{\"103\":1}}],[\"不会被打包到最终的\",{\"1\":{\"77\":2,\"78\":1}}],[\"不会自动依赖项目\",{\"1\":{\"76\":1}}],[\"不同格式数据\",{\"1\":{\"66\":1}}],[\"不直接在上面开发\",{\"1\":{\"33\":1}}],[\"不定时福利\",{\"1\":{\"33\":1}}],[\"不仅是一个职位\",{\"1\":{\"25\":1}}],[\"求职指南\",{\"1\":{\"33\":1}}],[\"知识星球\",{\"1\":{\"33\":1}}],[\"食用效果最佳\",{\"1\":{\"33\":1}}],[\"质量非常高\",{\"1\":{\"33\":1}}],[\"准备环境\",{\"1\":{\"155\":1}}],[\"准备\",{\"1\":{\"33\":1}}],[\"面试要点\",{\"0\":{\"168\":1}}],[\"面试打卡\",{\"1\":{\"33\":1}}],[\"面试的小伙伴可以考虑面试专版\",{\"1\":{\"33\":1}}],[\"面试专版\",{\"1\":{\"33\":1}}],[\"面向对象设计原则\",{\"1\":{\"3\":1}}],[\"请稍后再试\",{\"1\":{\"170\":1}}],[\"请求处理器适配器创建\",{\"1\":{\"120\":1}}],[\"请求和响应的消息转换\",{\"1\":{\"112\":1}}],[\"请求同一个接口\",{\"1\":{\"66\":1}}],[\"请求头的内容协商\",{\"1\":{\"114\":1}}],[\"请求头\",{\"1\":{\"64\":1}}],[\"请根据教学大纲来为我制定学习详细内容以及辅助\",{\"1\":{\"33\":1}}],[\"请你扮演一名阿里云的\",{\"1\":{\"33\":1}}],[\"开始处理\",{\"1\":{\"131\":1}}],[\"开始时间\",{\"1\":{\"130\":1}}],[\"开启\",{\"1\":{\"88\":1}}],[\"开启驼峰命名转换\",{\"1\":{\"88\":1}}],[\"开启基于请求参数的内容协商功能\",{\"1\":{\"66\":1}}],[\"开启基于请求参数的内容协商\",{\"1\":{\"66\":1}}],[\"开启aop的注解\",{\"1\":{\"33\":2}}],[\"开发是我们平时开发中最常遇到的场景\",{\"1\":{\"107\":1}}],[\"开发环境配置\",{\"1\":{\"103\":1}}],[\"开发工具\",{\"1\":{\"74\":1}}],[\"开发中我们经常自己实现一个webmvcconfigurer\",{\"1\":{\"70\":1}}],[\"开发\",{\"0\":{\"51\":1,\"158\":1},\"1\":{\"33\":1,\"196\":1}}],[\"开源项目贡献\",{\"1\":{\"20\":1}}],[\"并启用了\",{\"1\":{\"174\":1}}],[\"并关联\",{\"1\":{\"130\":1}}],[\"并将解析的参数存放到指定的位置中\",{\"1\":{\"122\":1}}],[\"并用合适的方式执行handler的逻辑\",{\"1\":{\"120\":1}}],[\"并注册了一些新的bean\",{\"1\":{\"111\":1}}],[\"并创建代理对象\",{\"1\":{\"94\":1}}],[\"并调用\",{\"1\":{\"94\":1}}],[\"并调用其``getobject方法实际构建sqlsessionfactory`对象\",{\"1\":{\"93\":1}}],[\"并支持更多类型的路径模式\",{\"1\":{\"61\":1}}],[\"并且不依赖于主程序的组件扫描机制\",{\"1\":{\"196\":1}}],[\"并且提供开箱即用的默认配置\",{\"1\":{\"97\":1}}],[\"并且可以让我们指定到底使用那种策略\",{\"1\":{\"59\":1}}],[\"并且也精通\",{\"1\":{\"33\":1}}],[\"并发编程\",{\"0\":{\"39\":1}}],[\"并发编程精通\",{\"1\":{\"2\":1}}],[\"并发容器与框架\",{\"1\":{\"2\":1}}],[\"工具类\",{\"1\":{\"74\":4,\"79\":1}}],[\"工具\",{\"0\":{\"32\":1}}],[\"每当引入一个场景启动器都会引入\",{\"1\":{\"108\":1}}],[\"每次开发前先拉取最新代码\",{\"1\":{\"33\":1}}],[\"每篇文章都是知识的沉淀\",{\"1\":{\"25\":1}}],[\"每一行代码都是一次思维的跃迁\",{\"1\":{\"25\":1}}],[\"在属性类上使用\",{\"1\":{\"196\":1}}],[\"在父\",{\"1\":{\"180\":1}}],[\"在一个电商多模块系统中\",{\"1\":{\"175\":1}}],[\"在配置类中使用该自定义条件注解\",{\"1\":{\"130\":1}}],[\"在该实现类实现具体条件逻辑\",{\"1\":{\"130\":1}}],[\"在该注解上添加\",{\"1\":{\"130\":1}}],[\"在实际开发中\",{\"1\":{\"117\":1}}],[\"在application\",{\"1\":{\"99\":1}}],[\"在自定义一个数据库的\",{\"1\":{\"79\":1}}],[\"在当前项目的\",{\"1\":{\"72\":1}}],[\"在没有配置自定义消息转换器之前在前端是这样返回的\",{\"1\":{\"70\":1}}],[\"在静态资源文件夹下找\",{\"1\":{\"68\":2}}],[\"在静态资源目录下找\",{\"1\":{\"54\":1,\"55\":1}}],[\"在任意命名的\",{\"1\":{\"60\":1}}],[\"在\",{\"1\":{\"33\":1,\"61\":1,\"174\":1,\"184\":1,\"186\":1,\"196\":1}}],[\"在这里创建代理对象\",{\"1\":{\"94\":1}}],[\"在这里\",{\"1\":{\"25\":1}}],[\"在线课程平台\",{\"1\":{\"19\":1}}],[\"在线资源\",{\"0\":{\"19\":1}}],[\"探索代码的无限可能\",{\"1\":{\"25\":1}}],[\"培养架构思维方式\",{\"1\":{\"25\":1}}],[\"积累实际项目经验\",{\"1\":{\"25\":1}}],[\"建议打包源码\",{\"1\":{\"175\":1}}],[\"建议的工作流程\",{\"1\":{\"33\":1}}],[\"建议采用以下工作流程\",{\"1\":{\"33\":1}}],[\"建议\",{\"1\":{\"25\":1,\"172\":1}}],[\"建立完整的知识体系\",{\"1\":{\"25\":1}}],[\"建立个人知识库\",{\"1\":{\"16\":1}}],[\"建立知识管理\",{\"1\":{\"16\":1}}],[\"广度和软技能等多个维度持续提升\",{\"1\":{\"25\":1}}],[\"需要反射注入依赖\",{\"1\":{\"189\":1}}],[\"需要指定\",{\"1\":{\"175\":1}}],[\"需要配置\",{\"0\":{\"176\":1},\"1\":{\"175\":2}}],[\"需要配合\",{\"1\":{\"138\":1}}],[\"需要手动配置\",{\"1\":{\"174\":1}}],[\"需要控制对象实例化过程的场景\",{\"1\":{\"150\":1}}],[\"需要使用工厂模式的场景\",{\"1\":{\"150\":1}}],[\"需要使用项目\",{\"1\":{\"76\":1}}],[\"需要完全控制bean定义的场景\",{\"1\":{\"149\":1}}],[\"需要完全控制项目的构建配置\",{\"1\":{\"73\":1}}],[\"需要编程方式注册bean\",{\"1\":{\"149\":1}}],[\"需要推迟导入的场景\",{\"1\":{\"148\":1}}],[\"需要进行方法级别配置的bean\",{\"1\":{\"146\":1}}],[\"需要显式声明依赖\",{\"1\":{\"76\":1}}],[\"需要显式声明\",{\"1\":{\"76\":1}}],[\"需要在方法中进行复杂初始化的bean\",{\"1\":{\"146\":1}}],[\"需要在\",{\"1\":{\"139\":1}}],[\"需要在项目\",{\"1\":{\"76\":1}}],[\"需要在技术\",{\"1\":{\"25\":1}}],[\"需要在技术深度\",{\"1\":{\"25\":1}}],[\"需要更灵活的版本控制\",{\"1\":{\"73\":1}}],[\"需要开启参数匹配设置\",{\"1\":{\"65\":1}}],[\"需要开启\",{\"0\":{\"65\":1}}],[\"需求分析与管理\",{\"1\":{\"13\":1}}],[\"成为一名优秀的java架构师是一个渐进的过\",{\"1\":{\"25\":1}}],[\"成本收益分析\",{\"1\":{\"15\":1}}],[\"总结\",{\"0\":{\"25\":1,\"172\":1,\"180\":1},\"1\":{\"61\":1}}],[\"总结经验教训\",{\"1\":{\"16\":1}}],[\"影响力\",{\"0\":{\"24\":1}}],[\"有了sqlsessionfactory就可以创建sqlsession\",{\"1\":{\"93\":1}}],[\"有两种方式\",{\"1\":{\"72\":1}}],[\"有如下接口\",{\"1\":{\"70\":1}}],[\"有\",{\"1\":{\"61\":1}}],[\"有技术团队管理经验\",{\"1\":{\"23\":1}}],[\"有复杂业务系统设计经验\",{\"1\":{\"23\":1}}],[\"有大型分布式系统架构经验\",{\"1\":{\"23\":1}}],[\"能够解决复杂技术问题\",{\"1\":{\"22\":1}}],[\"能够独立设计和负责大型系统架构\",{\"1\":{\"22\":1}}],[\"评估标准\",{\"0\":{\"21\":1}}],[\"七\",{\"0\":{\"21\":1}}],[\"个人项目实践\",{\"1\":{\"20\":1}}],[\"企业内部分享\",{\"1\":{\"20\":1}}],[\"领域驱动设计\",{\"1\":{\"18\":1}}],[\"领域知识积累\",{\"1\":{\"15\":1}}],[\"凤凰架构\",{\"1\":{\"18\":1}}],[\"书籍推荐\",{\"0\":{\"18\":1}}],[\"学习资源推荐\",{\"0\":{\"17\":1}}],[\"学习优秀开源项目\",{\"1\":{\"16\":1}}],[\"六\",{\"0\":{\"17\":1,\"169\":1}}],[\"持续学习和实践是提升的关键\",{\"1\":{\"172\":1}}],[\"持续学习新技术\",{\"1\":{\"25\":1}}],[\"持续学习\",{\"1\":{\"16\":1}}],[\"最基础的组件注册方式\",{\"1\":{\"138\":1}}],[\"最佳实践\",{\"0\":{\"102\":1}}],[\"最后在配置类中使用\",{\"1\":{\"130\":1}}],[\"最后注册\",{\"1\":{\"94\":1}}],[\"最后建立完整知识体系\",{\"1\":{\"16\":1}}],[\"最一致性\",{\"1\":{\"5\":1}}],[\"再拓展分布式架构知识\",{\"1\":{\"16\":1}}],[\"循序渐进\",{\"1\":{\"16\":1}}],[\"实战案例\",{\"0\":{\"169\":1}}],[\"实战驱动\",{\"1\":{\"16\":1}}],[\"实时查看logback运行状态\",{\"1\":{\"103\":1}}],[\"实时计算\",{\"1\":{\"10\":1}}],[\"实例\",{\"1\":{\"94\":1}}],[\"实例化之前执行\",{\"1\":{\"94\":1}}],[\"实现发送邮件逻辑\",{\"1\":{\"201\":1}}],[\"实现factorybean接口\",{\"1\":{\"143\":1}}],[\"实现类完成自定义注册逻辑\",{\"1\":{\"142\":1}}],[\"实现动态导入\",{\"1\":{\"141\":1}}],[\"实现自定义条件注解功能的步骤有\",{\"1\":{\"130\":1}}],[\"实现\",{\"0\":{\"124\":1}}],[\"实现了日志框架的解耦\",{\"1\":{\"97\":1,\"104\":1}}],[\"实现了\",{\"1\":{\"94\":1}}],[\"实现webmvcconfigurer接口\",{\"1\":{\"58\":1}}],[\"实际构建sqlsessionfactory\",{\"1\":{\"93\":1}}],[\"实践途径\",{\"0\":{\"20\":1}}],[\"实践路径建议\",{\"0\":{\"16\":1}}],[\"五\",{\"0\":{\"16\":1,\"168\":1}}],[\"业务逻辑\",{\"1\":{\"138\":1}}],[\"业务\",{\"1\":{\"25\":1}}],[\"业务价值评估\",{\"1\":{\"15\":1}}],[\"业务架构设计\",{\"1\":{\"15\":1}}],[\"业务理解能力\",{\"0\":{\"15\":1}}],[\"业务监控\",{\"1\":{\"7\":1}}],[\"团队技术指导能力\",{\"1\":{\"24\":1}}],[\"团队培养\",{\"1\":{\"14\":1}}],[\"团队协作\",{\"1\":{\"13\":1}}],[\"架构师\",{\"1\":{\"25\":1}}],[\"架构整洁之道\",{\"1\":{\"18\":1}}],[\"架构评审\",{\"1\":{\"14\":1}}],[\"架构设计原则\",{\"1\":{\"3\":1}}],[\"技术专栏\",{\"1\":{\"33\":1}}],[\"技术演讲和分享能力\",{\"1\":{\"24\":1}}],[\"技术方案评审能力\",{\"1\":{\"24\":1}}],[\"技术能力\",{\"0\":{\"22\":1}}],[\"技术社区交流\",{\"1\":{\"20\":1}}],[\"技术会议与分享\",{\"1\":{\"19\":1}}],[\"技术博客和公众号\",{\"1\":{\"19\":1}}],[\"技术博客写作\",{\"1\":{\"16\":1}}],[\"技术分享与演讲\",{\"1\":{\"16\":1}}],[\"技术债务管理\",{\"1\":{\"14\":1}}],[\"技术评估\",{\"1\":{\"14\":1}}],[\"技术管理能力\",{\"0\":{\"14\":1}}],[\"技术广度扩展\",{\"0\":{\"8\":1}}],[\"项目中\",{\"1\":{\"174\":1}}],[\"项目中没有自定义的webmvcconfigurationsupport类或子类\",{\"1\":{\"110\":1}}],[\"项目依赖的所有\",{\"1\":{\"127\":1}}],[\"项目访问\",{\"1\":{\"121\":1}}],[\"项目整合\",{\"1\":{\"107\":1}}],[\"项目\",{\"1\":{\"76\":1}}],[\"项目需要继承其他父\",{\"1\":{\"73\":1}}],[\"项目时\",{\"1\":{\"72\":1}}],[\"项目经验\",{\"0\":{\"23\":1}}],[\"项目估算与规划\",{\"1\":{\"13\":1}}],[\"项目管理能力\",{\"0\":{\"13\":1}}],[\"软技能提升\",{\"0\":{\"12\":1}}],[\"四\",{\"0\":{\"12\":1,\"165\":1}}],[\"漏洞防护\",{\"1\":{\"11\":1}}],[\"安全模块\",{\"1\":{\"74\":1}}],[\"安全传输\",{\"1\":{\"11\":1}}],[\"安全架构\",{\"0\":{\"11\":1}}],[\"认证授权\",{\"1\":{\"11\":1}}],[\"离线分析\",{\"1\":{\"10\":1}}],[\"数据源设置\",{\"1\":{\"93\":1}}],[\"数据源\",{\"1\":{\"92\":1}}],[\"数据源的自动配置\",{\"1\":{\"92\":1}}],[\"数据库查询逻辑\",{\"1\":{\"164\":1}}],[\"数据库厂商标识\",{\"1\":{\"93\":1}}],[\"数据库驱动\",{\"1\":{\"79\":1}}],[\"数据库相关\",{\"1\":{\"74\":2}}],[\"数据库和缓存相关\",{\"1\":{\"74\":1}}],[\"数据库优化\",{\"1\":{\"6\":1,\"168\":1}}],[\"数据密集型应用系统设计\",{\"1\":{\"18\":1}}],[\"数据加密\",{\"1\":{\"11\":1}}],[\"数据治理\",{\"1\":{\"10\":1}}],[\"数据湖架构\",{\"1\":{\"10\":1}}],[\"数据仓库设计\",{\"1\":{\"10\":1}}],[\"数据架构\",{\"0\":{\"10\":1}}],[\"云原生存储\",{\"1\":{\"9\":1}}],[\"云原生技术\",{\"0\":{\"9\":1}}],[\"key\",{\"1\":{\"164\":1,\"170\":4}}],[\"known\",{\"1\":{\"94\":1}}],[\"knownmappers\",{\"1\":{\"94\":1}}],[\"knife4j\",{\"1\":{\"74\":2}}],[\"kubernetes\",{\"1\":{\"9\":1}}],[\"kafka之类的中间件\",{\"1\":{\"102\":1}}],[\"kafka\",{\"1\":{\"6\":1}}],[\"容易发现设计问题\",{\"1\":{\"188\":1}}],[\"容器\",{\"1\":{\"189\":1}}],[\"容器耦合\",{\"1\":{\"189\":1}}],[\"容器启动时\",{\"1\":{\"131\":1}}],[\"容器中\",{\"1\":{\"196\":1}}],[\"容器中没有这个bean\",{\"1\":{\"110\":1}}],[\"容器中注册的mybatis拦截器等组件一一应用到sqlsessionfactorybean对象中\",{\"1\":{\"93\":1}}],[\"容器的对象\",{\"1\":{\"94\":1}}],[\"容器的\",{\"1\":{\"94\":1}}],[\"容器化技术\",{\"1\":{\"9\":1}}],[\"容错设计\",{\"1\":{\"7\":1}}],[\"三\",{\"0\":{\"8\":1,\"161\":1}}],[\"链路追踪\",{\"1\":{\"7\":1}}],[\"系统环境\",{\"1\":{\"166\":1}}],[\"系统属性\",{\"1\":{\"166\":2}}],[\"系统监控\",{\"1\":{\"7\":1}}],[\"系统架构能力\",{\"0\":{\"4\":1}}],[\"冷备热备\",{\"1\":{\"7\":1}}],[\"灾备方案\",{\"1\":{\"7\":1}}],[\"隔离\",{\"1\":{\"7\":1}}],[\"限流\",{\"1\":{\"7\":1}}],[\"熔断\",{\"1\":{\"7\":1}}],[\"3+\",{\"1\":{\"184\":1,\"186\":1}}],[\"31\",{\"1\":{\"103\":1}}],[\"3306\",{\"1\":{\"87\":1,\"184\":1}}],[\"33<\",{\"1\":{\"72\":1,\"74\":1,\"86\":1}}],[\"3<\",{\"1\":{\"72\":1,\"74\":1,\"86\":1}}],[\"30\",{\"1\":{\"61\":1}}],[\"3\",{\"0\":{\"7\":1,\"11\":1,\"15\":1,\"20\":1,\"24\":1,\"74\":1,\"88\":1,\"114\":1,\"121\":1,\"131\":1,\"140\":1,\"147\":1,\"160\":1,\"164\":1,\"200\":1},\"1\":{\"59\":1,\"72\":2,\"74\":3,\"89\":2,\"114\":1,\"116\":1,\"176\":1,\"177\":2,\"198\":1,\"199\":1}}],[\"3pc\",{\"1\":{\"5\":1}}],[\"索引设计\",{\"1\":{\"6\":1}}],[\"读写分离\",{\"1\":{\"6\":1}}],[\"分别完成请求体到参数对象的转换以及响应对象到响应体的转换\",{\"1\":{\"112\":1}}],[\"分支的更改同步到\",{\"1\":{\"33\":1}}],[\"分支的更改到\",{\"1\":{\"33\":1}}],[\"分支专门用于部署\",{\"1\":{\"33\":1}}],[\"分支进行\",{\"1\":{\"33\":1}}],[\"分支进行开发\",{\"1\":{\"33\":1}}],[\"分支合并更新\",{\"1\":{\"33\":1}}],[\"分支管理策略\",{\"1\":{\"33\":1}}],[\"分支管理策略和工作流程\",{\"0\":{\"33\":1}}],[\"分支\",{\"1\":{\"33\":9}}],[\"分享技术的纯粹热爱\",{\"1\":{\"25\":1}}],[\"分库分表\",{\"1\":{\"6\":1}}],[\"分布式事务实现\",{\"0\":{\"171\":1}}],[\"分布式事务解决方案\",{\"1\":{\"5\":1}}],[\"分布式限流实现\",{\"0\":{\"170\":1}}],[\"分布式算法基础\",{\"0\":{\"34\":1}}],[\"分布式锁\",{\"0\":{\"28\":1}}],[\"分布式\",{\"0\":{\"27\":1},\"2\":{\"36\":1,\"37\":1}}],[\"分布式系统\",{\"0\":{\"26\":1}}],[\"分布式系统设计\",{\"0\":{\"5\":1}}],[\"分布式服务框架\",{\"1\":{\"5\":1}}],[\"分布式理论\",{\"1\":{\"5\":1}}],[\"延迟消息\",{\"1\":{\"6\":1}}],[\"顺序消息\",{\"1\":{\"6\":1}}],[\"消息转换器的作用对象是\",{\"1\":{\"112\":1}}],[\"消息转换器配置\",{\"1\":{\"112\":1}}],[\"消息转换器\",{\"0\":{\"70\":1}}],[\"消息幂等性\",{\"1\":{\"6\":1}}],[\"消息队列\",{\"1\":{\"6\":1}}],[\"run\",{\"1\":{\"89\":1,\"126\":1,\"155\":2,\"168\":1}}],[\"runtimeexception\",{\"1\":{\"170\":1,\"171\":1}}],[\"runtime\",{\"1\":{\"77\":2,\"94\":1,\"130\":3,\"156\":1,\"159\":1}}],[\"rollingpolicy>\",{\"1\":{\"103\":2}}],[\"rollingfileappender\",{\"1\":{\"103\":2}}],[\"rolling\",{\"1\":{\"103\":4}}],[\"root>\",{\"1\":{\"103\":3}}],[\"root=warn\",{\"1\":{\"99\":2}}],[\"root\",{\"1\":{\"87\":1,\"99\":2,\"184\":1}}],[\"rocketmq\",{\"1\":{\"6\":1}}],[\"requiredargsconstructor\",{\"1\":{\"187\":2,\"200\":1}}],[\"requestcontextholder\",{\"1\":{\"117\":1}}],[\"requestcontextfilter\",{\"1\":{\"117\":4}}],[\"requestcontextlistener\",{\"1\":{\"117\":1}}],[\"requestbody和\",{\"1\":{\"112\":1}}],[\"requestmappinghandleradapter\",{\"1\":{\"120\":2}}],[\"requestmappinghandlermapping\",{\"1\":{\"119\":2}}],[\"requestmapping注解定义的handler\",{\"1\":{\"120\":1}}],[\"requestmapping注解定义的\",{\"1\":{\"119\":1}}],[\"requestmapping\",{\"1\":{\"68\":2,\"119\":1}}],[\"request\",{\"1\":{\"61\":2,\"68\":9,\"117\":1}}],[\"removeall\",{\"1\":{\"156\":1}}],[\"removeduplicates\",{\"1\":{\"156\":1}}],[\"reactivewebserverfactoryautoconfiguration\",{\"1\":{\"108\":1}}],[\"reactivemultipartautoconfiguration\",{\"1\":{\"108\":1}}],[\"reactive\",{\"1\":{\"108\":8,\"110\":1}}],[\"ref=\",{\"1\":{\"103\":11}}],[\"ref\",{\"1\":{\"103\":11}}],[\"refreshcontext\",{\"1\":{\"155\":1}}],[\"refresh\",{\"1\":{\"94\":1}}],[\"red\",{\"1\":{\"103\":1}}],[\"redistemplate\",{\"1\":{\"170\":6}}],[\"redistemplate<string\",{\"1\":{\"170\":1}}],[\"redis<\",{\"1\":{\"74\":1}}],[\"redis\",{\"1\":{\"74\":1}}],[\"redisson<\",{\"1\":{\"74\":2}}],[\"redisson\",{\"1\":{\"74\":2}}],[\"repackage\",{\"1\":{\"174\":3,\"175\":1,\"176\":3}}],[\"repeatable\",{\"1\":{\"94\":1}}],[\"repositories>\",{\"1\":{\"74\":1}}],[\"repository>\",{\"1\":{\"74\":1}}],[\"repository\",{\"1\":{\"74\":1,\"138\":1}}],[\"reporting\",{\"1\":{\"74\":2}}],[\"retryinterval\",{\"1\":{\"199\":1}}],[\"retryconfig\",{\"1\":{\"199\":4}}],[\"retry\",{\"1\":{\"198\":2}}],[\"retentionpolicy\",{\"1\":{\"94\":1,\"130\":3,\"156\":1,\"159\":1}}],[\"retention\",{\"1\":{\"94\":1,\"130\":3,\"156\":1,\"159\":1}}],[\"return\",{\"1\":{\"33\":1,\"61\":1,\"68\":3,\"70\":1,\"79\":3,\"89\":1,\"93\":2,\"94\":5,\"104\":2,\"115\":1,\"117\":1,\"119\":2,\"120\":2,\"121\":1,\"122\":2,\"123\":2,\"126\":4,\"127\":1,\"128\":2,\"129\":1,\"130\":2,\"139\":3,\"141\":3,\"143\":4,\"155\":1,\"156\":1,\"158\":1,\"159\":1,\"162\":2,\"163\":1,\"164\":1,\"167\":2,\"170\":1,\"200\":1}}],[\"releases>\",{\"1\":{\"74\":1}}],[\"resttemplateautoconfiguration\",{\"1\":{\"108\":1}}],[\"restcontroller\",{\"1\":{\"89\":1}}],[\"resulttype=\",{\"1\":{\"89\":1}}],[\"resolver\",{\"1\":{\"122\":1,\"123\":3}}],[\"resolveerrorview\",{\"1\":{\"68\":1}}],[\"resourceurlprovider\",{\"1\":{\"121\":1}}],[\"resource\",{\"1\":{\"115\":3}}],[\"resourceproperties\",{\"1\":{\"115\":2}}],[\"resourcehttpmessageconverter\",{\"1\":{\"112\":1}}],[\"resourcehandlerregistry\",{\"1\":{\"58\":1,\"115\":1}}],[\"resourceloader\",{\"1\":{\"93\":1,\"155\":4}}],[\"resource>\",{\"1\":{\"74\":2}}],[\"resources>\",{\"1\":{\"74\":1}}],[\"resources<\",{\"1\":{\"74\":2}}],[\"resources\",{\"1\":{\"53\":3,\"57\":1,\"115\":3}}],[\"responsebody注解标注的controller方法\",{\"1\":{\"112\":1}}],[\"responseentity<errorresponse>\",{\"1\":{\"167\":2}}],[\"responseentity<>\",{\"1\":{\"68\":2,\"167\":2}}],[\"responseentity<map<string\",{\"1\":{\"68\":1}}],[\"responseentity\",{\"1\":{\"68\":1}}],[\"response\",{\"1\":{\"68\":3,\"151\":1}}],[\"registrarconfig\",{\"1\":{\"142\":1}}],[\"registration\",{\"1\":{\"115\":3}}],[\"registry\",{\"1\":{\"33\":3,\"58\":2,\"94\":6,\"115\":3,\"142\":3}}],[\"registerbeandefinition\",{\"1\":{\"94\":1,\"138\":1,\"142\":1}}],[\"registerbeandefinitions\",{\"1\":{\"94\":6,\"142\":2}}],[\"registermodule\",{\"1\":{\"70\":1}}],[\"registerautoproxycreatorifnecessary\",{\"1\":{\"33\":1}}],[\"range\",{\"1\":{\"199\":1}}],[\"random\",{\"1\":{\"166\":1}}],[\"randomvaluepropertysource\",{\"1\":{\"166\":1}}],[\"rate\",{\"1\":{\"170\":1}}],[\"ratelimit\",{\"1\":{\"170\":1}}],[\"ratelimiter\",{\"1\":{\"170\":6}}],[\"ratelimiteraspect\",{\"1\":{\"170\":1}}],[\"rabbitmq\",{\"1\":{\"6\":1}}],[\"raft\",{\"0\":{\"38\":1},\"1\":{\"5\":1,\"38\":1}}],[\"热点数据处理\",{\"1\":{\"6\":1}}],[\"缓存使用策略\",{\"1\":{\"168\":1}}],[\"缓存优化\",{\"0\":{\"164\":1}}],[\"缓存配置\",{\"1\":{\"93\":1}}],[\"缓存相关\",{\"1\":{\"74\":1}}],[\"缓存控制\",{\"1\":{\"53\":1}}],[\"缓存间隔\",{\"1\":{\"53\":1}}],[\"缓存一致性\",{\"1\":{\"6\":1}}],[\"缓存架构\",{\"1\":{\"6\":1}}],[\"高级运用\",{\"0\":{\"162\":1}}],[\"高级特性\",{\"1\":{\"172\":1}}],[\"高级特性实战\",{\"0\":{\"157\":1}}],[\"高级特性与源码解析指南\",{\"0\":{\"153\":1}}],[\"高可用架构设计\",{\"0\":{\"7\":1}}],[\"高并发架构设计\",{\"0\":{\"6\":1}}],[\"高内聚低耦合\",{\"1\":{\"3\":1}}],[\"服务端根据客户端请求头期望的数据类型进行动态返回\",{\"1\":{\"64\":1}}],[\"服务网格\",{\"1\":{\"9\":1}}],[\"服务熔断与降级\",{\"1\":{\"5\":1}}],[\"服务注册与发现\",{\"1\":{\"5\":1}}],[\"duration\",{\"1\":{\"113\":1}}],[\"dubbo生态\",{\"1\":{\"5\":1}}],[\"d\",{\"1\":{\"103\":4,\"104\":1}}],[\"dosomething\",{\"1\":{\"160\":1}}],[\"doscan\",{\"1\":{\"94\":2,\"138\":1}}],[\"documentation\",{\"1\":{\"127\":1}}],[\"documented\",{\"1\":{\"94\":1,\"130\":2}}],[\"doctype\",{\"1\":{\"89\":1}}],[\"docker\",{\"1\":{\"9\":1}}],[\"dtd\",{\"1\":{\"89\":3}}],[\"driver\",{\"1\":{\"87\":2,\"127\":2}}],[\"driverclassname\",{\"1\":{\"79\":3}}],[\"dbproperties\",{\"1\":{\"184\":9,\"186\":19,\"187\":9}}],[\"db\",{\"1\":{\"79\":2}}],[\"directimportconfig\",{\"1\":{\"140\":1}}],[\"directory>\",{\"1\":{\"74\":2}}],[\"dispatcherpath\",{\"1\":{\"116\":2}}],[\"dispatcherservletpath\",{\"1\":{\"116\":1}}],[\"dispatcherservlet\",{\"1\":{\"110\":2,\"122\":1}}],[\"dispatcherservlet类\",{\"1\":{\"110\":2}}],[\"dispatcherservletautoconfiguration\",{\"1\":{\"108\":1,\"110\":5}}],[\"disabled\",{\"1\":{\"115\":1}}],[\"discardingthreshold>\",{\"1\":{\"103\":2}}],[\"discovery<\",{\"1\":{\"74\":1}}],[\"dynamic\",{\"1\":{\"74\":2}}],[\"decreasestock\",{\"1\":{\"171\":1}}],[\"delete\",{\"1\":{\"170\":1}}],[\"delimiters\",{\"1\":{\"94\":1}}],[\"deducemainapplicationclass\",{\"1\":{\"155\":1}}],[\"deducefromclasspath\",{\"1\":{\"155\":1}}],[\"demoapplication\",{\"1\":{\"155\":2}}],[\"details\",{\"1\":{\"151\":1}}],[\"detailedregistrar\",{\"1\":{\"142\":2}}],[\"detailedconfig\",{\"1\":{\"139\":1}}],[\"developer\",{\"1\":{\"104\":1}}],[\"dev\",{\"1\":{\"103\":2,\"129\":1}}],[\"devtools<\",{\"1\":{\"74\":1}}],[\"debug=\",{\"1\":{\"103\":1}}],[\"debug\",{\"1\":{\"99\":1,\"103\":4,\"115\":1}}],[\"deferredselector\",{\"1\":{\"141\":1}}],[\"deferredimportselector接口示例\",{\"1\":{\"141\":1}}],[\"deferredimportselector\",{\"1\":{\"141\":2}}],[\"defaultgroup\",{\"1\":{\"141\":1}}],[\"defaultlistablebeanfactory\",{\"1\":{\"138\":1}}],[\"defaultcacheservice\",{\"1\":{\"128\":1}}],[\"defaultuserservice\",{\"1\":{\"128\":2}}],[\"default\",{\"1\":{\"115\":1,\"130\":2,\"159\":1}}],[\"defaultvalue=\",{\"1\":{\"103\":2}}],[\"defaultsqlsession\",{\"1\":{\"94\":2}}],[\"definition\",{\"1\":{\"94\":4}}],[\"description>\",{\"1\":{\"74\":3}}],[\"dependencymanagement\",{\"1\":{\"73\":1,\"174\":1}}],[\"dependencymanagement>\",{\"1\":{\"73\":2,\"74\":1,\"79\":1,\"177\":1}}],[\"dependency>\",{\"1\":{\"66\":1,\"72\":2,\"73\":3,\"74\":39,\"76\":2,\"77\":4,\"78\":3,\"79\":9,\"86\":3,\"108\":3,\"177\":1,\"178\":1,\"179\":2,\"184\":1}}],[\"dependencies>\",{\"1\":{\"73\":2,\"74\":4,\"79\":3,\"177\":1,\"178\":1,\"179\":1}}],[\"dependencies<\",{\"1\":{\"72\":1,\"73\":3,\"74\":3,\"79\":1,\"177\":1}}],[\"dependencies\",{\"1\":{\"72\":3}}],[\"dates\",{\"1\":{\"70\":1}}],[\"databaseservice\",{\"1\":{\"184\":2,\"186\":4,\"187\":2}}],[\"databaseproperties\",{\"1\":{\"184\":4,\"186\":7,\"187\":3}}],[\"database\",{\"1\":{\"79\":1,\"184\":2}}],[\"databind<\",{\"1\":{\"74\":1}}],[\"datasourcecondition\",{\"1\":{\"139\":1}}],[\"datasourcetransactionmanagerautoconfiguration\",{\"1\":{\"92\":1}}],[\"datasourceautoconfiguration\",{\"1\":{\"92\":1,\"93\":2}}],[\"datasource\",{\"1\":{\"74\":5,\"79\":4,\"87\":1,\"93\":4,\"139\":3}}],[\"data\",{\"1\":{\"66\":1,\"74\":1,\"89\":1,\"104\":1,\"184\":3}}],[\"dataformat\",{\"1\":{\"66\":1}}],[\"dataformat<\",{\"1\":{\"66\":1}}],[\"dd\",{\"1\":{\"70\":1,\"103\":4,\"104\":1}}],[\"ddd领域驱动设计\",{\"1\":{\"3\":1}}],[\"csdn\",{\"1\":{\"151\":1}}],[\"currentcount\",{\"1\":{\"170\":2}}],[\"currentrequestattributes\",{\"1\":{\"117\":1}}],[\"customexception\",{\"1\":{\"167\":2}}],[\"customeventlistener\",{\"1\":{\"160\":1}}],[\"customevent\",{\"1\":{\"160\":4}}],[\"customizepropertysources\",{\"1\":{\"166\":1}}],[\"customvalue\",{\"1\":{\"162\":1}}],[\"customkey\",{\"1\":{\"162\":1}}],[\"customhealthindicator\",{\"1\":{\"162\":1}}],[\"custom\",{\"1\":{\"158\":2}}],[\"customconverters\",{\"1\":{\"112\":2}}],[\"customloggingconfig\",{\"1\":{\"104\":1}}],[\"custommessageconverterconfig\",{\"1\":{\"70\":1}}],[\"cyan\",{\"1\":{\"103\":1}}],[\"crud编写\",{\"0\":{\"89\":1}}],[\"createorder\",{\"1\":{\"171\":1}}],[\"createapplicationcontext\",{\"1\":{\"155\":1}}],[\"createexceptionhandlerexceptionresolver\",{\"1\":{\"123\":2}}],[\"createwelcomepagehandlermapping\",{\"1\":{\"121\":1}}],[\"createrequestmappinghandleradapter\",{\"1\":{\"120\":2}}],[\"createrequestmappinghandlermapping\",{\"1\":{\"119\":2}}],[\"createpostgresqldatasource\",{\"1\":{\"79\":1}}],[\"createmysqldatasource\",{\"1\":{\"79\":1}}],[\"createdatasource\",{\"1\":{\"79\":2}}],[\"createtime\",{\"1\":{\"70\":2}}],[\"cj\",{\"1\":{\"87\":1,\"127\":2}}],[\"charset>\",{\"1\":{\"103\":3}}],[\"characterencoding=utf\",{\"1\":{\"87\":1}}],[\"ch\",{\"1\":{\"103\":8}}],[\"checkout\",{\"1\":{\"33\":5}}],[\"c\",{\"1\":{\"71\":2,\"76\":4}}],[\"callerrunspolicy\",{\"1\":{\"163\":1}}],[\"cacheable\",{\"1\":{\"164\":1}}],[\"cachemanager\",{\"1\":{\"164\":5}}],[\"cacheconfig\",{\"1\":{\"164\":1}}],[\"cachecontrol\",{\"1\":{\"53\":1,\"58\":1}}],[\"cacheservice\",{\"1\":{\"128\":2}}],[\"catalina\",{\"1\":{\"100\":1}}],[\"catch\",{\"1\":{\"94\":1}}],[\"cause\",{\"1\":{\"94\":1}}],[\"case\",{\"1\":{\"88\":1}}],[\"camel\",{\"1\":{\"88\":1}}],[\"cap\",{\"0\":{\"35\":1},\"1\":{\"35\":1}}],[\"cap理论\",{\"1\":{\"5\":1}}],[\"countkey\",{\"1\":{\"170\":5}}],[\"count\",{\"1\":{\"170\":3}}],[\"collection\",{\"1\":{\"155\":2}}],[\"collections\",{\"1\":{\"68\":1}}],[\"core\",{\"1\":{\"103\":5,\"176\":1}}],[\"core<\",{\"1\":{\"74\":1}}],[\"coyote\",{\"1\":{\"100\":1}}],[\"comp\",{\"1\":{\"166\":1}}],[\"component适用场景\",{\"0\":{\"145\":1}}],[\"component及其派生注解\",{\"1\":{\"138\":1}}],[\"component及其衍生注解\",{\"1\":{\"138\":1}}],[\"componentscan\",{\"1\":{\"138\":2,\"156\":1}}],[\"componentscan使用\",{\"1\":{\"138\":1}}],[\"component\",{\"1\":{\"138\":1,\"160\":1,\"170\":1,\"184\":1,\"196\":2}}],[\"component注解方式\",{\"0\":{\"138\":1}}],[\"compile\",{\"1\":{\"77\":2}}],[\"compiler\",{\"1\":{\"74\":5,\"175\":1,\"177\":1}}],[\"com\",{\"1\":{\"74\":1,\"87\":2,\"89\":4,\"94\":1,\"103\":3,\"104\":1,\"126\":2,\"127\":2,\"141\":2,\"151\":1,\"176\":3,\"198\":2}}],[\"common\",{\"0\":{\"178\":1},\"1\":{\"74\":1,\"76\":3,\"175\":1}}],[\"common<\",{\"1\":{\"74\":4}}],[\"commons<\",{\"1\":{\"74\":2}}],[\"commons\",{\"1\":{\"74\":2}}],[\"commit\",{\"1\":{\"33\":1}}],[\"connectionconfig>\",{\"1\":{\"184\":1,\"186\":2,\"187\":1}}],[\"connectionconfig\",{\"1\":{\"184\":2,\"186\":2,\"187\":1}}],[\"connections\",{\"1\":{\"184\":4,\"186\":4,\"187\":2}}],[\"connector\",{\"1\":{\"72\":2,\"74\":2,\"77\":1,\"79\":2,\"86\":1}}],[\"concurrentmapcache\",{\"1\":{\"164\":2}}],[\"conditonalonclass\",{\"0\":{\"127\":1}}],[\"conditional注解\",{\"1\":{\"130\":1}}],[\"conditional\",{\"1\":{\"130\":3,\"139\":1,\"159\":1}}],[\"conditionaloncustom\",{\"1\":{\"159\":1}}],[\"conditionalonclass\",{\"1\":{\"33\":1,\"79\":1,\"93\":1,\"104\":1,\"110\":2,\"127\":3,\"130\":2,\"158\":1,\"168\":1}}],[\"conditionalontimerange\",{\"1\":{\"130\":4}}],[\"conditionalonexpression\",{\"0\":{\"129\":1},\"1\":{\"129\":1}}],[\"conditionalonwebapplication\",{\"1\":{\"110\":2}}],[\"conditionalonsinglecandidate\",{\"1\":{\"93\":1}}],[\"conditionalonmissingfilterbean\",{\"1\":{\"117\":1}}],[\"conditionalonmissingbean\",{\"0\":{\"128\":1},\"1\":{\"79\":1,\"93\":1,\"104\":1,\"110\":1,\"117\":1,\"122\":1,\"128\":2,\"158\":1,\"168\":1}}],[\"conditionalonmissingclass\",{\"1\":{\"33\":1}}],[\"conditionalonproperty注解关联了onpropertycondition类\",{\"1\":{\"130\":1}}],[\"conditionalonproperty设置了该属性值为\",{\"1\":{\"126\":1}}],[\"conditionalonproperty\",{\"0\":{\"126\":1},\"1\":{\"33\":4,\"122\":1,\"126\":3,\"130\":1,\"168\":1}}],[\"conditioncontext\",{\"1\":{\"130\":3,\"131\":1,\"159\":1}}],[\"condition\",{\"1\":{\"126\":2,\"130\":5,\"131\":1,\"159\":1}}],[\"consoleappender\",{\"1\":{\"103\":1}}],[\"console\",{\"1\":{\"103\":6}}],[\"configb\",{\"1\":{\"141\":1}}],[\"configa\",{\"1\":{\"141\":1}}],[\"config\",{\"1\":{\"94\":1,\"104\":2,\"198\":1}}],[\"config<\",{\"1\":{\"74\":1}}],[\"configurableenvironment\",{\"1\":{\"155\":1}}],[\"configurableapplicationcontext\",{\"1\":{\"94\":1,\"126\":1,\"155\":2}}],[\"configurationproperties标注的属性类\",{\"1\":{\"196\":1}}],[\"configurationproperties注解的属性类上加上\",{\"1\":{\"196\":1}}],[\"configurationproperties`标注的属性类加入到\",{\"1\":{\"196\":1}}],[\"configurationproperties仅仅只是进行属性绑定的第一步\",{\"1\":{\"196\":1}}],[\"configurationproperties\",{\"0\":{\"183\":1},\"1\":{\"184\":1,\"196\":2,\"199\":1}}],[\"configurations\",{\"1\":{\"156\":6}}],[\"configurationclassparser\",{\"1\":{\"139\":1,\"140\":1,\"141\":1}}],[\"configurationclasspostprocessor\",{\"1\":{\"131\":1,\"138\":1,\"139\":1}}],[\"configuration类处理\",{\"1\":{\"139\":1}}],[\"configuration类\",{\"1\":{\"139\":2,\"140\":1}}],[\"configuration类中使用\",{\"1\":{\"139\":1}}],[\"configuration>\",{\"1\":{\"74\":2,\"103\":1,\"174\":1,\"177\":1}}],[\"configuration\",{\"1\":{\"33\":5,\"58\":1,\"70\":1,\"79\":2,\"88\":1,\"94\":3,\"103\":1,\"104\":2,\"111\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"139\":1,\"140\":2,\"141\":2,\"142\":1,\"143\":1,\"158\":1,\"162\":1,\"163\":1,\"164\":1,\"166\":1,\"184\":1,\"200\":1,\"201\":1}}],[\"configurepathmatch\",{\"1\":{\"116\":1}}],[\"configurecontentnegotiation\",{\"1\":{\"114\":1}}],[\"configurer\",{\"1\":{\"113\":3,\"114\":4,\"116\":3}}],[\"configureasyncsupport\",{\"1\":{\"113\":1}}],[\"configure\",{\"1\":{\"70\":1}}],[\"configuremessageconverters\",{\"1\":{\"70\":2,\"112\":1}}],[\"converters\",{\"1\":{\"70\":2,\"112\":2}}],[\"controller等\",{\"1\":{\"138\":1}}],[\"controller\",{\"1\":{\"138\":1}}],[\"controlleradvice\",{\"1\":{\"69\":1,\"167\":1}}],[\"context\",{\"1\":{\"103\":2,\"130\":2,\"141\":1,\"155\":4,\"159\":1}}],[\"content\",{\"1\":{\"68\":1,\"201\":1}}],[\"contentnegotiationconfigurer\",{\"1\":{\"114\":1}}],[\"contentnegotiation\",{\"1\":{\"66\":2,\"114\":5}}],[\"containsbean\",{\"1\":{\"113\":1}}],[\"contains\",{\"1\":{\"79\":2}}],[\"cglibautoproxyconfiguration\",{\"1\":{\"33\":1}}],[\"clienthttpconnectorautoconfiguration\",{\"1\":{\"108\":1}}],[\"client\",{\"1\":{\"108\":3}}],[\"class<\",{\"1\":{\"141\":1,\"143\":1,\"155\":1}}],[\"class<t>\",{\"1\":{\"94\":4}}],[\"classes\",{\"1\":{\"127\":1,\"176\":3}}],[\"classic\",{\"1\":{\"103\":3}}],[\"classpathbeandefinitionscanner\",{\"1\":{\"94\":1,\"138\":1}}],[\"classpathmapperscanner\",{\"1\":{\"94\":5}}],[\"classpath\",{\"1\":{\"53\":5,\"57\":2,\"58\":2,\"68\":2,\"88\":1,\"104\":1,\"115\":5,\"127\":1}}],[\"classproxyingconfiguration\",{\"1\":{\"33\":1}}],[\"class时默认也生效\",{\"1\":{\"33\":1}}],[\"class=\",{\"1\":{\"103\":8}}],[\"class=true时生效\",{\"1\":{\"33\":1}}],[\"class=false时才生效\",{\"1\":{\"33\":1}}],[\"class\",{\"1\":{\"33\":9,\"58\":1,\"66\":1,\"70\":2,\"79\":3,\"87\":1,\"89\":4,\"93\":8,\"94\":12,\"104\":5,\"108\":1,\"110\":12,\"111\":8,\"117\":3,\"126\":4,\"127\":2,\"128\":2,\"129\":1,\"130\":7,\"138\":1,\"139\":2,\"140\":5,\"141\":5,\"142\":4,\"143\":3,\"155\":4,\"156\":1,\"158\":3,\"159\":2,\"160\":2,\"162\":1,\"163\":1,\"164\":2,\"166\":1,\"167\":3,\"170\":1,\"171\":1,\"174\":1,\"176\":7,\"184\":4,\"186\":2,\"187\":1,\"199\":2,\"200\":2,\"201\":1}}],[\"cloud<\",{\"1\":{\"73\":1,\"74\":6}}],[\"cloud\",{\"1\":{\"5\":1,\"73\":1,\"74\":15,\"104\":1}}],[\"subject\",{\"1\":{\"201\":1}}],[\"suppresswarnings\",{\"1\":{\"94\":1}}],[\"super\",{\"1\":{\"94\":1,\"119\":1,\"120\":1,\"123\":1,\"160\":1}}],[\"smtp服务器端口\",{\"1\":{\"199\":1}}],[\"smtp服务器地址\",{\"1\":{\"199\":1}}],[\"smtp\",{\"1\":{\"198\":1}}],[\"slave\",{\"1\":{\"184\":1}}],[\"slf4j\",{\"1\":{\"97\":2,\"104\":1,\"201\":1}}],[\"s\",{\"1\":{\"151\":1}}],[\"spel\",{\"1\":{\"129\":2}}],[\"spring通过getobject方法获取真正的bean实例\",{\"1\":{\"143\":1}}],[\"spring回调接口方法\",{\"1\":{\"142\":1}}],[\"spring内部通过反射将返回的类注册为bean\",{\"1\":{\"141\":1}}],[\"spring解析\",{\"1\":{\"140\":1}}],[\"springmvc\",{\"1\":{\"109\":1}}],[\"springmvc的错误处理机制依然保留\",{\"1\":{\"68\":1}}],[\"springprofile>\",{\"1\":{\"103\":3}}],[\"springbean\",{\"1\":{\"94\":1}}],[\"springbootconfiguration\",{\"1\":{\"156\":1}}],[\"springbootcondition\",{\"1\":{\"131\":1}}],[\"springboot在底层已经默认准备好了一个异步线程池\",{\"1\":{\"113\":1}}],[\"springboot在底层写好一个\",{\"1\":{\"68\":1}}],[\"springbootvfs\",{\"1\":{\"93\":1}}],[\"springbootapplication\",{\"1\":{\"89\":1,\"155\":1,\"156\":1,\"168\":1}}],[\"springboot\",{\"0\":{\"50\":1,\"51\":1,\"71\":1,\"82\":1,\"84\":1,\"96\":1,\"98\":1,\"107\":1,\"124\":1,\"137\":1,\"151\":1,\"153\":1,\"155\":1,\"173\":1,\"190\":1,\"205\":1},\"1\":{\"68\":1,\"71\":1,\"72\":5,\"73\":1,\"78\":2,\"79\":1,\"91\":1,\"97\":2,\"100\":2,\"101\":1,\"104\":1,\"107\":1,\"109\":1,\"112\":1,\"130\":1,\"131\":2,\"151\":2,\"155\":1,\"168\":1,\"172\":1,\"174\":1,\"184\":1,\"196\":1},\"2\":{\"80\":1,\"81\":1,\"83\":1,\"95\":1,\"105\":1,\"106\":1,\"135\":1,\"136\":1,\"152\":1,\"181\":1,\"182\":1,\"193\":1,\"194\":1,\"203\":1,\"204\":1}}],[\"springapplication\",{\"1\":{\"89\":1,\"126\":1,\"155\":4,\"166\":1,\"168\":1}}],[\"springcloud\",{\"1\":{\"73\":1}}],[\"springframework\",{\"1\":{\"72\":2,\"73\":4,\"74\":14,\"77\":2,\"78\":1,\"79\":4,\"86\":1,\"92\":5,\"99\":1,\"108\":20,\"141\":1,\"174\":1,\"176\":2,\"177\":2,\"178\":1,\"179\":2,\"184\":1}}],[\"spring5\",{\"1\":{\"59\":1}}],[\"spring\",{\"0\":{\"103\":1,\"162\":1,\"166\":1,\"167\":1},\"1\":{\"5\":1,\"33\":7,\"57\":5,\"61\":1,\"65\":3,\"66\":2,\"72\":7,\"73\":1,\"74\":19,\"79\":5,\"86\":2,\"87\":1,\"89\":1,\"91\":5,\"93\":2,\"94\":3,\"102\":2,\"103\":2,\"104\":3,\"108\":1,\"111\":2,\"116\":2,\"122\":1,\"129\":1,\"131\":2,\"141\":1,\"151\":1,\"168\":3,\"174\":4,\"175\":2,\"176\":8,\"177\":5,\"179\":1,\"180\":1,\"184\":1,\"186\":1,\"196\":2}}],[\"swagger\",{\"1\":{\"127\":3}}],[\"swaggerconfiguration\",{\"1\":{\"127\":1}}],[\"samplespringbootapplication\",{\"1\":{\"126\":1}}],[\"saga模式\",{\"1\":{\"5\":1}}],[\"systemenvironmentpropertysource\",{\"1\":{\"166\":1}}],[\"systemenvironment\",{\"1\":{\"166\":1}}],[\"systemproperties\",{\"1\":{\"104\":1,\"166\":1}}],[\"system\",{\"1\":{\"104\":2,\"126\":2,\"130\":1,\"166\":5,\"184\":1,\"186\":2,\"187\":1}}],[\"size\",{\"1\":{\"156\":1}}],[\"sizeandtimebasedrollingpolicy\",{\"1\":{\"103\":2}}],[\"singledispatcherservlet\",{\"1\":{\"116\":1}}],[\"simplecachemanager\",{\"1\":{\"164\":2}}],[\"simplecacheservice\",{\"1\":{\"128\":1}}],[\"simplemodule\",{\"1\":{\"70\":6}}],[\"simpledateformat\",{\"1\":{\"70\":1}}],[\"sql日志配置\",{\"1\":{\"103\":1}}],[\"sqlsession\",{\"1\":{\"94\":9}}],[\"sqlsessiondaosupport\",{\"1\":{\"94\":1}}],[\"sqlsessionfactory被成功创建\",{\"1\":{\"93\":1}}],[\"sqlsessionfactory是mybatis底层核心支撑\",{\"1\":{\"93\":1}}],[\"sqlsessionfactorybean\",{\"1\":{\"93\":5}}],[\"sqlsessionfactory\",{\"1\":{\"93\":8}}],[\"sql\",{\"1\":{\"88\":1,\"89\":1,\"93\":1,\"103\":1}}],[\"sql优化\",{\"1\":{\"6\":1}}],[\"shanghai\",{\"1\":{\"87\":1}}],[\"snapshot\",{\"1\":{\"176\":1}}],[\"snapshots>\",{\"1\":{\"74\":1}}],[\"snapshot<\",{\"1\":{\"74\":3}}],[\"skywalking\",{\"1\":{\"74\":1}}],[\"somecondition\",{\"1\":{\"171\":1}}],[\"source=\",{\"1\":{\"103\":2}}],[\"sources<\",{\"1\":{\"74\":1,\"178\":1}}],[\"source\",{\"1\":{\"74\":2,\"160\":2,\"166\":4,\"175\":1,\"177\":1,\"178\":1}}],[\"source>\",{\"1\":{\"74\":2,\"177\":1}}],[\"source>$\",{\"1\":{\"74\":1}}],[\"sourceencoding>\",{\"1\":{\"74\":1}}],[\"sourceencoding>utf\",{\"1\":{\"74\":1}}],[\"solid\",{\"1\":{\"3\":1}}],[\"scan=\",{\"1\":{\"103\":1}}],[\"scanperiod=\",{\"1\":{\"103\":1}}],[\"scanperiod\",{\"1\":{\"103\":1}}],[\"scan\",{\"1\":{\"94\":1,\"103\":1}}],[\"scanner\",{\"1\":{\"94\":2}}],[\"scope=\",{\"1\":{\"103\":2}}],[\"scope=provided\",{\"1\":{\"77\":1}}],[\"scope\",{\"0\":{\"75\":1,\"77\":1},\"1\":{\"77\":1}}],[\"scope>\",{\"1\":{\"73\":3,\"74\":5,\"77\":4,\"78\":4,\"79\":2,\"177\":1}}],[\"schemalocation=\",{\"1\":{\"74\":3,\"79\":1}}],[\"sss\",{\"1\":{\"103\":2,\"104\":1}}],[\"ss\",{\"1\":{\"70\":1,\"103\":2,\"104\":1}}],[\"ssm\",{\"0\":{\"31\":1}}],[\"stop\",{\"1\":{\"155\":1}}],[\"stopwatch\",{\"1\":{\"155\":5}}],[\"stdoutimpl\",{\"1\":{\"88\":1}}],[\"stdout\",{\"1\":{\"88\":1}}],[\"standardenvironment\",{\"1\":{\"166\":1}}],[\"starttime\",{\"1\":{\"130\":2}}],[\"start\",{\"1\":{\"130\":5,\"155\":1,\"174\":1,\"176\":1}}],[\"starter中会引入自动配置的依赖autoconfigure\",{\"1\":{\"108\":1}}],[\"starter<\",{\"1\":{\"74\":7,\"76\":2,\"79\":2,\"86\":1,\"108\":1}}],[\"starter\",{\"0\":{\"158\":1},\"1\":{\"72\":5,\"73\":2,\"74\":11,\"77\":2,\"78\":1,\"79\":5,\"86\":1,\"89\":1,\"91\":2,\"97\":4,\"104\":1,\"108\":1,\"110\":1,\"158\":1,\"168\":1,\"174\":3,\"178\":1,\"179\":1,\"196\":1}}],[\"status\",{\"1\":{\"33\":1,\"68\":7}}],[\"static\",{\"1\":{\"33\":5,\"53\":1,\"57\":9,\"58\":1,\"89\":1,\"111\":1,\"115\":1,\"117\":1,\"155\":1,\"166\":2,\"184\":2,\"199\":1}}],[\"strategy=ant\",{\"1\":{\"61\":1}}],[\"string>\",{\"1\":{\"170\":1}}],[\"stringhttpmessageconverter\",{\"1\":{\"112\":1}}],[\"stringutils\",{\"1\":{\"93\":1,\"94\":1}}],[\"string\",{\"1\":{\"61\":3,\"66\":2,\"79\":1,\"89\":2,\"94\":2,\"112\":1,\"116\":1,\"130\":8,\"141\":3,\"155\":2,\"156\":2,\"159\":1,\"166\":2,\"170\":3,\"184\":5,\"186\":2,\"187\":1,\"199\":2,\"201\":3}}],[\"sending\",{\"1\":{\"201\":1}}],[\"sendemail\",{\"1\":{\"201\":1}}],[\"selectimports\",{\"1\":{\"141\":2,\"156\":1}}],[\"select>\",{\"1\":{\"89\":1}}],[\"select\",{\"1\":{\"89\":1}}],[\"security<\",{\"1\":{\"74\":1}}],[\"seconds\",{\"1\":{\"58\":1,\"103\":1,\"170\":1}}],[\"serializationfeature\",{\"1\":{\"70\":1}}],[\"server\",{\"1\":{\"167\":2}}],[\"servertimezone=asia\",{\"1\":{\"87\":1}}],[\"serverless架构\",{\"1\":{\"9\":1}}],[\"servletrequestattributes\",{\"1\":{\"117\":1}}],[\"servleturlmapping\",{\"1\":{\"116\":2}}],[\"servletcontextresource\",{\"1\":{\"115\":2}}],[\"servletcontext\",{\"1\":{\"115\":2}}],[\"servletcontextaware\",{\"1\":{\"111\":1}}],[\"servlet容器的装配→dispatcherservlet的装配→webmvc\",{\"1\":{\"110\":1}}],[\"servletwebserverfactoryautoconfiguration\",{\"1\":{\"108\":1,\"110\":2}}],[\"servlet\",{\"1\":{\"77\":1,\"108\":6,\"110\":4,\"115\":1}}],[\"servlet<\",{\"1\":{\"77\":1}}],[\"serviceconfiguration\",{\"1\":{\"128\":1}}],[\"service\",{\"1\":{\"9\":1,\"103\":1,\"138\":2,\"163\":1,\"164\":1,\"171\":1,\"184\":1,\"186\":2,\"187\":1,\"201\":1}}],[\"setrejectedexecutionhandler\",{\"1\":{\"163\":1}}],[\"setkeepaliveseconds\",{\"1\":{\"163\":1}}],[\"setqueuecapacity\",{\"1\":{\"163\":1}}],[\"setmaxpoolsize\",{\"1\":{\"163\":1}}],[\"setmaxfilesize\",{\"1\":{\"104\":1}}],[\"set<string>\",{\"1\":{\"156\":1}}],[\"set<beandefinitionholder>\",{\"1\":{\"94\":3}}],[\"setlisteners\",{\"1\":{\"155\":1}}],[\"setinitializers\",{\"1\":{\"155\":1}}],[\"seturlpathhelper\",{\"1\":{\"116\":1}}],[\"setalwaysusefullpath\",{\"1\":{\"116\":1}}],[\"setdefaultproperties\",{\"1\":{\"166\":1}}],[\"setdefaultlocale\",{\"1\":{\"122\":1}}],[\"setdefaulttimeout\",{\"1\":{\"113\":1}}],[\"setdatasource\",{\"1\":{\"93\":1}}],[\"setdateformat\",{\"1\":{\"70\":1}}],[\"setter\",{\"1\":{\"199\":2}}],[\"settings\",{\"1\":{\"184\":4}}],[\"setthreadnameprefix\",{\"1\":{\"163\":1}}],[\"settaskexecutor\",{\"1\":{\"113\":1}}],[\"settotalsizecap\",{\"1\":{\"104\":1}}],[\"setfile\",{\"1\":{\"104\":1}}],[\"setpathmatcher\",{\"1\":{\"116\":1}}],[\"setpattern\",{\"1\":{\"104\":1}}],[\"setplugins\",{\"1\":{\"93\":1}}],[\"setbeanclass\",{\"1\":{\"94\":1}}],[\"setcaches\",{\"1\":{\"164\":1}}],[\"setcachecontrol\",{\"1\":{\"58\":1}}],[\"setcorepoolsize\",{\"1\":{\"163\":1}}],[\"setconfigurationproperties\",{\"1\":{\"93\":1}}],[\"setconfiglocation\",{\"1\":{\"93\":1}}],[\"setvfs\",{\"1\":{\"93\":1}}],[\"setobjectmapper\",{\"1\":{\"70\":1}}],[\"setserializationinclusion\",{\"1\":{\"70\":1}}],[\"setstatus\",{\"1\":{\"68\":1}}],[\"二\",{\"0\":{\"4\":1,\"157\":1}}],[\"行为型模式\",{\"1\":{\"3\":1}}],[\"25\",{\"1\":{\"199\":1}}],[\"261db982\",{\"1\":{\"126\":1}}],[\"2322889\",{\"1\":{\"104\":1}}],[\"23<\",{\"1\":{\"74\":1}}],[\"24\",{\"1\":{\"74\":1}}],[\"2000\",{\"1\":{\"198\":1}}],[\"200\",{\"1\":{\"163\":1}}],[\"2001\",{\"1\":{\"74\":3,\"79\":1}}],[\"20\",{\"1\":{\"163\":1}}],[\"2023\",{\"1\":{\"103\":1}}],[\"2021\",{\"1\":{\"70\":1}}],[\"2pc\",{\"1\":{\"5\":1}}],[\"2\",{\"0\":{\"3\":1,\"6\":1,\"10\":1,\"14\":1,\"19\":1,\"23\":1,\"73\":1,\"113\":1,\"130\":1,\"139\":1,\"146\":1,\"156\":1,\"159\":1,\"163\":1,\"167\":1,\"171\":1,\"199\":1},\"1\":{\"33\":1,\"73\":4,\"74\":2,\"78\":1,\"79\":1,\"113\":1,\"176\":2,\"177\":2,\"178\":1,\"179\":1}}],[\"jndi\",{\"1\":{\"166\":1}}],[\"jndidatasourceautoconfiguration\",{\"1\":{\"92\":1}}],[\"jdbctemplate\",{\"1\":{\"92\":1}}],[\"jdbctemplateautoconfiguration\",{\"1\":{\"92\":1}}],[\"jdbc<\",{\"1\":{\"79\":1}}],[\"jdbc\",{\"0\":{\"92\":1},\"1\":{\"79\":1,\"87\":2,\"91\":2,\"92\":7,\"127\":2}}],[\"jdk\",{\"1\":{\"77\":1,\"78\":1,\"127\":1}}],[\"jdkdynamicautoproxyconfiguration\",{\"1\":{\"33\":1}}],[\"j<\",{\"1\":{\"74\":2,\"79\":2}}],[\"jre<\",{\"1\":{\"74\":1}}],[\"jarlauncher\",{\"1\":{\"176\":1}}],[\"jar\",{\"0\":{\"173\":1,\"176\":1},\"1\":{\"77\":4,\"78\":1,\"82\":2,\"127\":1,\"166\":2,\"175\":6,\"176\":12}}],[\"jackson2httpmessageconverter\",{\"1\":{\"70\":3}}],[\"jacksonxmlrootelement\",{\"1\":{\"66\":1}}],[\"jackson\",{\"1\":{\"66\":1,\"70\":1,\"72\":1,\"74\":1}}],[\"java<\",{\"1\":{\"72\":2,\"77\":1,\"86\":1}}],[\"java文件\",{\"1\":{\"60\":1}}],[\"java锁\",{\"0\":{\"40\":1}}],[\"javaguide\",{\"1\":{\"33\":2}}],[\"java面试指北\",{\"1\":{\"33\":1}}],[\"java\",{\"1\":{\"33\":3,\"40\":1,\"60\":1,\"72\":2,\"74\":5,\"79\":1,\"82\":1,\"93\":1,\"94\":7,\"127\":1,\"166\":2,\"175\":1,\"177\":3,\"184\":1},\"2\":{\"30\":1,\"44\":1}}],[\"java编程思想\",{\"1\":{\"18\":1}}],[\"java核心技术深化\",{\"0\":{\"2\":1,\"29\":1}}],[\"jsoninclude\",{\"1\":{\"70\":1}}],[\"json\",{\"1\":{\"64\":1,\"65\":1,\"66\":1,\"68\":1,\"74\":1,\"112\":2,\"184\":1}}],[\"jsp文件\",{\"1\":{\"60\":1}}],[\"jsp\",{\"1\":{\"60\":1}}],[\"jmh\",{\"1\":{\"61\":1}}],[\"jpeg\",{\"1\":{\"55\":1}}],[\"jit\",{\"0\":{\"48\":1},\"1\":{\"48\":1}}],[\"jit即时编译\",{\"1\":{\"2\":1}}],[\"jvm\",{\"0\":{\"43\":1,\"49\":1},\"1\":{\"49\":1,\"127\":1,\"168\":1},\"2\":{\"45\":1,\"47\":1}}],[\"jvm底层原理与性能调优\",{\"1\":{\"2\":1}}],[\"jwt\",{\"1\":{\"11\":1}}],[\"10\",{\"1\":{\"110\":1,\"163\":1,\"184\":1}}],[\"1000\",{\"1\":{\"199\":1}}],[\"100mb\",{\"1\":{\"104\":1}}],[\"10086\",{\"1\":{\"55\":1}}],[\"1gb\",{\"1\":{\"104\":1}}],[\"192\",{\"1\":{\"87\":1}}],[\"117\",{\"1\":{\"87\":2}}],[\"11\",{\"1\":{\"74\":2,\"177\":1}}],[\"1180\",{\"1\":{\"58\":1}}],[\"168\",{\"1\":{\"87\":1}}],[\"16\",{\"1\":{\"74\":1}}],[\"1621324800000\",{\"1\":{\"70\":1}}],[\"135672595\",{\"1\":{\"151\":1}}],[\"13\",{\"1\":{\"74\":1}}],[\"13<\",{\"1\":{\"72\":1}}],[\"1<\",{\"1\":{\"74\":1}}],[\"15\",{\"1\":{\"72\":1}}],[\"17+\",{\"1\":{\"72\":1}}],[\"1223\",{\"1\":{\"198\":1}}],[\"123456\",{\"1\":{\"184\":1}}],[\"1234567890123456789\",{\"1\":{\"70\":2}}],[\"12\",{\"1\":{\"70\":1,\"103\":1}}],[\"18\",{\"1\":{\"70\":1,\"130\":2}}],[\"1\",{\"0\":{\"2\":1,\"5\":1,\"9\":1,\"13\":1,\"18\":1,\"22\":1,\"72\":1,\"86\":1,\"125\":1,\"138\":1,\"145\":1,\"155\":1,\"158\":1,\"162\":1,\"166\":1,\"170\":1,\"198\":1},\"1\":{\"33\":1,\"72\":2,\"74\":5,\"78\":1,\"79\":1,\"89\":1,\"103\":1,\"112\":1,\"127\":1,\"176\":2,\"177\":1,\"178\":1,\"179\":1,\"199\":1}}],[\"一般像商品模块\",{\"1\":{\"175\":1}}],[\"一般不使用logging\",{\"1\":{\"101\":1}}],[\"一些前置判断\",{\"1\":{\"93\":1}}],[\"一些有用的命令\",{\"1\":{\"33\":1}}],[\"一套系统适配多端数据返回\",{\"1\":{\"62\":1}}],[\"一对一提问\",{\"1\":{\"33\":1}}],[\"一致性算法的介绍\",{\"1\":{\"38\":1}}],[\"一致性算法\",{\"0\":{\"38\":1},\"1\":{\"5\":1}}],[\"一\",{\"0\":{\"1\":1,\"154\":1}}]],\"version\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
